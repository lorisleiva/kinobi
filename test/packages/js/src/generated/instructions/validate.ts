/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  Operation,
  OperationArgs,
  Payload,
  PayloadArgs,
  getOperationSerializer,
  getPayloadSerializer,
} from '../types';

// Accounts.
export type ValidateInstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSet: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  optRuleSigner1?: PublicKey | Pda | Signer;
  /** Optional rule validation signer 2 */
  optRuleSigner2?: Signer;
  /** Optional rule validation signer 3 */
  optRuleSigner3?: Signer;
  /** Optional rule validation signer 4 */
  optRuleSigner4?: Signer;
  /** Optional rule validation signer 5 */
  optRuleSigner5?: Signer;
  /** Optional rule validation non-signer 1 */
  optRuleNonsigner1?: PublicKey | Pda;
  /** Optional rule validation non-signer 2 */
  optRuleNonsigner2?: PublicKey | Pda;
  /** Optional rule validation non-signer 3 */
  optRuleNonsigner3?: PublicKey | Pda;
  /** Optional rule validation non-signer 4 */
  optRuleNonsigner4?: PublicKey | Pda;
  /** Optional rule validation non-signer 5 */
  optRuleNonsigner5?: PublicKey | Pda;
};

// Data.
export type ValidateInstructionData = {
  discriminator: number;
  ruleSetName: string;
  operation: Operation;
  payload: Payload;
};

export type ValidateInstructionDataArgs = {
  ruleSetName: string;
  operation: OperationArgs;
  payload: PayloadArgs;
};

export function getValidateInstructionDataSerializer(): Serializer<
  ValidateInstructionDataArgs,
  ValidateInstructionData
> {
  return mapSerializer<
    ValidateInstructionDataArgs,
    any,
    ValidateInstructionData
  >(
    struct<ValidateInstructionData>(
      [
        ['discriminator', u8()],
        ['ruleSetName', string()],
        ['operation', getOperationSerializer()],
        ['payload', getPayloadSerializer()],
      ],
      { description: 'ValidateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<ValidateInstructionDataArgs, ValidateInstructionData>;
}

// Args.
export type ValidateInstructionArgs = ValidateInstructionDataArgs;

// Instruction.
export function validate(
  context: Pick<Context, 'payer' | 'programs'>,
  input: ValidateInstructionAccounts & ValidateInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    payer: { index: 0, isWritable: true, value: input.payer ?? null },
    ruleSet: { index: 1, isWritable: true, value: input.ruleSet ?? null },
    systemProgram: {
      index: 2,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    optRuleSigner1: {
      index: 3,
      isWritable: false,
      value: input.optRuleSigner1 ?? null,
    },
    optRuleSigner2: {
      index: 4,
      isWritable: false,
      value: input.optRuleSigner2 ?? null,
    },
    optRuleSigner3: {
      index: 5,
      isWritable: false,
      value: input.optRuleSigner3 ?? null,
    },
    optRuleSigner4: {
      index: 6,
      isWritable: false,
      value: input.optRuleSigner4 ?? null,
    },
    optRuleSigner5: {
      index: 7,
      isWritable: false,
      value: input.optRuleSigner5 ?? null,
    },
    optRuleNonsigner1: {
      index: 8,
      isWritable: false,
      value: input.optRuleNonsigner1 ?? null,
    },
    optRuleNonsigner2: {
      index: 9,
      isWritable: false,
      value: input.optRuleNonsigner2 ?? null,
    },
    optRuleNonsigner3: {
      index: 10,
      isWritable: false,
      value: input.optRuleNonsigner3 ?? null,
    },
    optRuleNonsigner4: {
      index: 11,
      isWritable: false,
      value: input.optRuleNonsigner4 ?? null,
    },
    optRuleNonsigner5: {
      index: 12,
      isWritable: false,
      value: input.optRuleNonsigner5 ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: ValidateInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'omitted',
    programId
  );

  // Data.
  const data = getValidateInstructionDataSerializer().serialize(
    resolvedArgs as ValidateInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
