/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  MintPrintingTokensViaTokenArgs,
  MintPrintingTokensViaTokenArgsArgs,
  getMintPrintingTokensViaTokenArgsSerializer,
} from '../types';

// Accounts.
export type DeprecatedMintPrintingTokensViaTokenInstructionAccounts = {
  /** Destination account */
  destination: PublicKey | Pda;
  /** Token account containing one time authorization token */
  token: PublicKey | Pda;
  /** One time authorization mint */
  oneTimePrintingAuthorizationMint: PublicKey | Pda;
  /** Printing mint */
  printingMint: PublicKey | Pda;
  /** Burn authority */
  burnAuthority: Signer;
  /** Metadata key (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey | Pda;
  /** Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition']) */
  masterEdition: PublicKey | Pda;
  /** Token program */
  tokenProgram?: PublicKey | Pda;
  /** Rent */
  rent?: PublicKey | Pda;
};

// Data.
export type DeprecatedMintPrintingTokensViaTokenInstructionData = {
  discriminator: number;
  mintPrintingTokensViaTokenArgs: MintPrintingTokensViaTokenArgs;
};

export type DeprecatedMintPrintingTokensViaTokenInstructionDataArgs = {
  mintPrintingTokensViaTokenArgs: MintPrintingTokensViaTokenArgsArgs;
};

export function getDeprecatedMintPrintingTokensViaTokenInstructionDataSerializer(): Serializer<
  DeprecatedMintPrintingTokensViaTokenInstructionDataArgs,
  DeprecatedMintPrintingTokensViaTokenInstructionData
> {
  return mapSerializer<
    DeprecatedMintPrintingTokensViaTokenInstructionDataArgs,
    any,
    DeprecatedMintPrintingTokensViaTokenInstructionData
  >(
    struct<DeprecatedMintPrintingTokensViaTokenInstructionData>(
      [
        ['discriminator', u8()],
        [
          'mintPrintingTokensViaTokenArgs',
          getMintPrintingTokensViaTokenArgsSerializer(),
        ],
      ],
      { description: 'DeprecatedMintPrintingTokensViaTokenInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 8 })
  ) as Serializer<
    DeprecatedMintPrintingTokensViaTokenInstructionDataArgs,
    DeprecatedMintPrintingTokensViaTokenInstructionData
  >;
}

// Args.
export type DeprecatedMintPrintingTokensViaTokenInstructionArgs =
  DeprecatedMintPrintingTokensViaTokenInstructionDataArgs;

// Instruction.
export function deprecatedMintPrintingTokensViaToken(
  context: Pick<Context, 'programs'>,
  input: DeprecatedMintPrintingTokensViaTokenInstructionAccounts &
    DeprecatedMintPrintingTokensViaTokenInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    destination: {
      index: 0,
      isWritable: true,
      value: input.destination ?? null,
    },
    token: { index: 1, isWritable: true, value: input.token ?? null },
    oneTimePrintingAuthorizationMint: {
      index: 2,
      isWritable: true,
      value: input.oneTimePrintingAuthorizationMint ?? null,
    },
    printingMint: {
      index: 3,
      isWritable: true,
      value: input.printingMint ?? null,
    },
    burnAuthority: {
      index: 4,
      isWritable: false,
      value: input.burnAuthority ?? null,
    },
    metadata: { index: 5, isWritable: false, value: input.metadata ?? null },
    masterEdition: {
      index: 6,
      isWritable: false,
      value: input.masterEdition ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false,
      value: input.tokenProgram ?? null,
    },
    rent: { index: 8, isWritable: false, value: input.rent ?? null },
  };

  // Arguments.
  const resolvedArgs: DeprecatedMintPrintingTokensViaTokenInstructionArgs = {
    ...input,
  };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getDeprecatedMintPrintingTokensViaTokenInstructionDataSerializer().serialize(
      resolvedArgs as DeprecatedMintPrintingTokensViaTokenInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
