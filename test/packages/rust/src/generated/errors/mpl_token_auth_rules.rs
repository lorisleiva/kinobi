//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MplTokenAuthRulesError {
    /// 0 (0x0) - Numerical Overflow
    #[error("Numerical Overflow")]
    NumericalOverflow,
    /// 1 (0x1) - Data type mismatch
    #[error("Data type mismatch")]
    DataTypeMismatch,
    /// 2 (0x2) - Incorrect account owner
    #[error("Incorrect account owner")]
    IncorrectOwner,
    /// 3 (0x3) - Could not index into PayloadVec
    #[error("Could not index into PayloadVec")]
    PayloadVecIndexError,
    /// 4 (0x4) - Derived key invalid
    #[error("Derived key invalid")]
    DerivedKeyInvalid,
    /// 5 (0x5) - Additional Signer check failed
    #[error("Additional Signer check failed")]
    AdditionalSignerCheckFailed,
    /// 6 (0x6) - Pubkey Match check failed
    #[error("Pubkey Match check failed")]
    PubkeyMatchCheckFailed,
    /// 7 (0x7) - Derived Key Match check failed
    #[error("Derived Key Match check failed")]
    DerivedKeyMatchCheckFailed,
    /// 8 (0x8) - Program Owned check failed
    #[error("Program Owned check failed")]
    ProgramOwnedCheckFailed,
    /// 9 (0x9) - Amount checked failed
    #[error("Amount checked failed")]
    AmountCheckFailed,
    /// 10 (0xA) - Frequency check failed
    #[error("Frequency check failed")]
    FrequencyCheckFailed,
    /// 11 (0xB) - Pubkey Tree Match check failed
    #[error("Pubkey Tree Match check failed")]
    PubkeyTreeMatchCheckFailed,
    /// 12 (0xC) - Payer is not a signer
    #[error("Payer is not a signer")]
    PayerIsNotSigner,
    /// 13 (0xD) -
    #[error("")]
    NotImplemented,
    /// 14 (0xE) - Borsh Serialization Error
    #[error("Borsh Serialization Error")]
    BorshSerializationError,
}

impl solana_program::program_error::PrintProgramError for MplTokenAuthRulesError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
