//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

pub(crate) mod add_config_lines;
pub(crate) mod approve_collection_authority;
pub(crate) mod approve_use_authority;
pub(crate) mod bubblegum_set_collection_size;
pub(crate) mod burn;
pub(crate) mod burn_edition_nft;
pub(crate) mod burn_nft;
pub(crate) mod close_escrow_account;
pub(crate) mod convert_master_edition_v1_to_v2;
pub(crate) mod create_escrow_account;
pub(crate) mod create_frequency_rule;
pub(crate) mod create_master_edition;
pub(crate) mod create_master_edition_v3;
pub(crate) mod create_metadata_account;
pub(crate) mod create_metadata_account_v2;
pub(crate) mod create_metadata_account_v3;
pub(crate) mod create_reservation_list;
pub(crate) mod create_rule_set;
pub(crate) mod create_v1;
pub(crate) mod create_v2;
pub(crate) mod delegate;
pub(crate) mod deprecated_create_master_edition;
pub(crate) mod deprecated_mint_new_edition_from_master_edition_via_printing_token;
pub(crate) mod deprecated_mint_printing_tokens;
pub(crate) mod deprecated_mint_printing_tokens_via_token;
pub(crate) mod deprecated_set_reservation_list;
pub(crate) mod dummy;
pub(crate) mod freeze_delegated_account;
pub(crate) mod initialize;
pub(crate) mod migrate;
pub(crate) mod mint;
pub(crate) mod mint_from_candy_machine;
pub(crate) mod mint_new_edition_from_master_edition_via_token;
pub(crate) mod mint_new_edition_from_master_edition_via_vault_proxy;
pub(crate) mod puff_metadata;
pub(crate) mod remove_creator_verification;
pub(crate) mod revoke;
pub(crate) mod revoke_collection_authority;
pub(crate) mod revoke_use_authority;
pub(crate) mod set_and_verify_collection;
pub(crate) mod set_and_verify_sized_collection_item;
pub(crate) mod set_authority;
pub(crate) mod set_collection;
pub(crate) mod set_collection_size;
pub(crate) mod set_mint_authority;
pub(crate) mod set_token_standard;
pub(crate) mod sign_metadata;
pub(crate) mod thaw_delegated_account;
pub(crate) mod transfer;
pub(crate) mod transfer_out_of_escrow;
pub(crate) mod unverify_collection;
pub(crate) mod unverify_sized_collection_item;
pub(crate) mod update_candy_machine;
pub(crate) mod update_metadata_account;
pub(crate) mod update_metadata_account_v2;
pub(crate) mod update_primary_sale_happened_via_token;
pub(crate) mod update_v1;
pub(crate) mod use_asset;
pub(crate) mod utilize;
pub(crate) mod validate;
pub(crate) mod verify;
pub(crate) mod verify_collection;
pub(crate) mod verify_sized_collection_item;
pub(crate) mod withdraw;

pub use self::add_config_lines::*;
pub use self::approve_collection_authority::*;
pub use self::approve_use_authority::*;
pub use self::bubblegum_set_collection_size::*;
pub use self::burn::*;
pub use self::burn_edition_nft::*;
pub use self::burn_nft::*;
pub use self::close_escrow_account::*;
pub use self::convert_master_edition_v1_to_v2::*;
pub use self::create_escrow_account::*;
pub use self::create_frequency_rule::*;
pub use self::create_master_edition::*;
pub use self::create_master_edition_v3::*;
pub use self::create_metadata_account::*;
pub use self::create_metadata_account_v2::*;
pub use self::create_metadata_account_v3::*;
pub use self::create_reservation_list::*;
pub use self::create_rule_set::*;
pub use self::create_v1::*;
pub use self::create_v2::*;
pub use self::delegate::*;
pub use self::deprecated_create_master_edition::*;
pub use self::deprecated_mint_new_edition_from_master_edition_via_printing_token::*;
pub use self::deprecated_mint_printing_tokens::*;
pub use self::deprecated_mint_printing_tokens_via_token::*;
pub use self::deprecated_set_reservation_list::*;
pub use self::dummy::*;
pub use self::freeze_delegated_account::*;
pub use self::initialize::*;
pub use self::migrate::*;
pub use self::mint::*;
pub use self::mint_from_candy_machine::*;
pub use self::mint_new_edition_from_master_edition_via_token::*;
pub use self::mint_new_edition_from_master_edition_via_vault_proxy::*;
pub use self::puff_metadata::*;
pub use self::remove_creator_verification::*;
pub use self::revoke::*;
pub use self::revoke_collection_authority::*;
pub use self::revoke_use_authority::*;
pub use self::set_and_verify_collection::*;
pub use self::set_and_verify_sized_collection_item::*;
pub use self::set_authority::*;
pub use self::set_collection::*;
pub use self::set_collection_size::*;
pub use self::set_mint_authority::*;
pub use self::set_token_standard::*;
pub use self::sign_metadata::*;
pub use self::thaw_delegated_account::*;
pub use self::transfer::*;
pub use self::transfer_out_of_escrow::*;
pub use self::unverify_collection::*;
pub use self::unverify_sized_collection_item::*;
pub use self::update_candy_machine::*;
pub use self::update_metadata_account::*;
pub use self::update_metadata_account_v2::*;
pub use self::update_primary_sale_happened_via_token::*;
pub use self::update_v1::*;
pub use self::use_asset::*;
pub use self::utilize::*;
pub use self::validate::*;
pub use self::verify::*;
pub use self::verify_collection::*;
pub use self::verify_sized_collection_item::*;
pub use self::withdraw::*;

#[derive(Clone, Copy)]
pub enum InstructionAccount {
    Readonly(solana_program::pubkey::Pubkey),
    ReadonlySigner(solana_program::pubkey::Pubkey),
    Writable(solana_program::pubkey::Pubkey),
    WritableSigner(solana_program::pubkey::Pubkey),
}

impl InstructionAccount {
    pub fn to_account_meta(&self) -> solana_program::instruction::AccountMeta {
        let (pubkey, writable, signer) = match self {
            InstructionAccount::Readonly(pubkey) => (pubkey, false, false),
            InstructionAccount::ReadonlySigner(pubkey) => (pubkey, false, true),
            InstructionAccount::Writable(pubkey) => (pubkey, true, false),
            InstructionAccount::WritableSigner(pubkey) => (pubkey, true, true),
        };

        if writable {
            solana_program::instruction::AccountMeta::new(*pubkey, signer)
        } else {
            solana_program::instruction::AccountMeta::new_readonly(*pubkey, signer)
        }
    }
}

#[derive(Clone, Copy)]
pub enum InstructionAccountInfo<'a, 'b> {
    Readonly(&'b solana_program::account_info::AccountInfo<'a>),
    ReadonlySigner(&'b solana_program::account_info::AccountInfo<'a>),
    Writable(&'b solana_program::account_info::AccountInfo<'a>),
    WritableSigner(&'b solana_program::account_info::AccountInfo<'a>),
}

impl<'a, 'b> InstructionAccountInfo<'a, 'b> {
    pub fn to_account_meta(&self) -> solana_program::instruction::AccountMeta {
        let (pubkey, writable, signer) = match self {
            InstructionAccountInfo::Readonly(account_info) => (account_info.key, false, false),
            InstructionAccountInfo::ReadonlySigner(account_info) => (account_info.key, false, true),
            InstructionAccountInfo::Writable(account_info) => (account_info.key, true, false),
            InstructionAccountInfo::WritableSigner(account_info) => (account_info.key, true, true),
        };

        if writable {
            solana_program::instruction::AccountMeta::new(*pubkey, signer)
        } else {
            solana_program::instruction::AccountMeta::new_readonly(*pubkey, signer)
        }
    }
    pub fn account_info(&self) -> &'b solana_program::account_info::AccountInfo<'a> {
        match self {
            InstructionAccountInfo::Readonly(account_info)
            | InstructionAccountInfo::ReadonlySigner(account_info)
            | InstructionAccountInfo::Writable(account_info)
            | InstructionAccountInfo::WritableSigner(account_info) => account_info,
        }
    }
}
