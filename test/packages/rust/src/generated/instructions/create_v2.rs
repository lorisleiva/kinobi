//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::AssetData;
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct CreateV2 {
    /// Metadata account key (pda of ['metadata', program id, mint id])
    pub metadata: solana_program::pubkey::Pubkey,
    /// Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition']
    pub master_edition: Option<solana_program::pubkey::Pubkey>,
    /// Mint of token asset
    pub mint: (solana_program::pubkey::Pubkey, bool),
    /// Mint authority
    pub mint_authority: solana_program::pubkey::Pubkey,
    /// Payer
    pub payer: solana_program::pubkey::Pubkey,
    /// update authority info
    pub update_authority: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
    /// Instructions sysvar account
    pub sysvar_instructions: solana_program::pubkey::Pubkey,
    /// SPL Token program
    pub spl_token_program: solana_program::pubkey::Pubkey,
}

impl CreateV2 {
    pub fn instruction(
        &self,
        args: CreateV2InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        solana_program::instruction::Instruction {
            program_id: crate::MPL_TOKEN_METADATA_ID,
            accounts: vec![
                solana_program::instruction::AccountMeta::new(self.metadata, false),
                if let Some(master_edition) = self.master_edition {
                    solana_program::instruction::AccountMeta::new(master_edition, false)
                } else {
                    solana_program::instruction::AccountMeta::new_readonly(
                        crate::MPL_TOKEN_METADATA_ID,
                        false,
                    )
                },
                solana_program::instruction::AccountMeta::new(self.mint.0, self.mint.1),
                solana_program::instruction::AccountMeta::new_readonly(self.mint_authority, true),
                solana_program::instruction::AccountMeta::new(self.payer, true),
                solana_program::instruction::AccountMeta::new_readonly(
                    self.update_authority,
                    false,
                ),
                solana_program::instruction::AccountMeta::new_readonly(self.system_program, false),
                solana_program::instruction::AccountMeta::new_readonly(
                    self.sysvar_instructions,
                    false,
                ),
                solana_program::instruction::AccountMeta::new_readonly(
                    self.spl_token_program,
                    false,
                ),
            ],
            data: args.try_to_vec().unwrap(),
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct CreateV2InstructionArgs {
    discriminator: u8,
    create_v2_discriminator: u8,
    pub asset_data: AssetData,
    pub max_supply: Option<u64>,
}

impl CreateV2InstructionArgs {
    pub fn new(asset_data: AssetData, max_supply: Option<u64>) -> Self {
        Self {
            discriminator: 41,
            create_v2_discriminator: 1,
            asset_data,
            max_supply,
        }
    }
}

/// Instruction builder.
#[derive(Default)]
pub struct CreateV2Builder {
    metadata: Option<solana_program::pubkey::Pubkey>,
    master_edition: Option<solana_program::pubkey::Pubkey>,
    mint: Option<(solana_program::pubkey::Pubkey, bool)>,
    mint_authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    update_authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    sysvar_instructions: Option<solana_program::pubkey::Pubkey>,
    spl_token_program: Option<solana_program::pubkey::Pubkey>,
    asset_data: Option<AssetData>,
    max_supply: Option<u64>,
}

impl CreateV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
        self.master_edition = Some(master_edition);
        self
    }
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey, as_signer: bool) -> &mut Self {
        self.mint = Some((mint, as_signer));
        self
    }
    pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_authority = Some(mint_authority);
        self
    }
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    pub fn update_authority(
        &mut self,
        update_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.update_authority = Some(update_authority);
        self
    }
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sysvar_instructions = Some(sysvar_instructions);
        self
    }
    pub fn spl_token_program(
        &mut self,
        spl_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spl_token_program = Some(spl_token_program);
        self
    }
    pub fn asset_data(&mut self, asset_data: AssetData) -> &mut Self {
        self.asset_data = Some(asset_data);
        self
    }
    pub fn max_supply(&mut self, max_supply: u64) -> &mut Self {
        self.max_supply = Some(max_supply);
        self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateV2 {
            metadata: self.metadata.expect("metadata is not set"),

            master_edition: self.master_edition,

            mint: self.mint.expect("mint is not set"),

            mint_authority: self.mint_authority.expect("mint_authority is not set"),

            payer: self.payer.expect("payer is not set"),

            update_authority: self.update_authority.expect("update_authority is not set"),

            system_program: self.system_program.expect("system_program is not set"),

            sysvar_instructions: self
                .sysvar_instructions
                .expect("sysvar_instructions is not set"),

            spl_token_program: self
                .spl_token_program
                .expect("spl_token_program is not set"),
        };
        let args = CreateV2InstructionArgs::new(
            self.asset_data.expect("asset_data is not set"),
            self.max_supply,
        );
        accounts.instruction(args)
    }
}

pub mod cpi {
    use super::*;

    /// `create_v2` CPI instruction.
    pub struct CreateV2<'a> {
        pub program: &'a solana_program::account_info::AccountInfo<'a>,
        /// Metadata account key (pda of ['metadata', program id, mint id])
        pub metadata: &'a solana_program::account_info::AccountInfo<'a>,
        /// Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition']
        pub master_edition: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        /// Mint of token asset
        pub mint: (&'a solana_program::account_info::AccountInfo<'a>, bool),
        /// Mint authority
        pub mint_authority: &'a solana_program::account_info::AccountInfo<'a>,
        /// Payer
        pub payer: &'a solana_program::account_info::AccountInfo<'a>,
        /// update authority info
        pub update_authority: &'a solana_program::account_info::AccountInfo<'a>,
        /// System program
        pub system_program: &'a solana_program::account_info::AccountInfo<'a>,
        /// Instructions sysvar account
        pub sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,
        /// SPL Token program
        pub spl_token_program: &'a solana_program::account_info::AccountInfo<'a>,
        pub args: CreateV2InstructionArgs,
    }

    impl<'a> CreateV2<'a> {
        pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
            self.invoke_signed(&[])
        }
        #[allow(clippy::vec_init_then_push)]
        pub fn invoke_signed(
            &self,
            signers_seeds: &[&[&[u8]]],
        ) -> solana_program::entrypoint::ProgramResult {
            let instruction = solana_program::instruction::Instruction {
                program_id: crate::MPL_TOKEN_METADATA_ID,
                accounts: vec![
                    solana_program::instruction::AccountMeta::new(*self.metadata.key, false),
                    if let Some(master_edition) = self.master_edition {
                        solana_program::instruction::AccountMeta::new(*master_edition.key, false)
                    } else {
                        solana_program::instruction::AccountMeta::new_readonly(
                            crate::MPL_TOKEN_METADATA_ID,
                            false,
                        )
                    },
                    solana_program::instruction::AccountMeta::new(*self.mint.0.key, self.mint.1),
                    solana_program::instruction::AccountMeta::new_readonly(
                        *self.mint_authority.key,
                        true,
                    ),
                    solana_program::instruction::AccountMeta::new(*self.payer.key, true),
                    solana_program::instruction::AccountMeta::new_readonly(
                        *self.update_authority.key,
                        false,
                    ),
                    solana_program::instruction::AccountMeta::new_readonly(
                        *self.system_program.key,
                        false,
                    ),
                    solana_program::instruction::AccountMeta::new_readonly(
                        *self.sysvar_instructions.key,
                        false,
                    ),
                    solana_program::instruction::AccountMeta::new_readonly(
                        *self.spl_token_program.key,
                        false,
                    ),
                ],
                data: self.args.try_to_vec().unwrap(),
            };
            let mut account_infos = Vec::with_capacity(9 + 1);
            account_infos.push(self.program.clone());
            account_infos.push(self.metadata.clone());
            if let Some(master_edition) = self.master_edition {
                account_infos.push(master_edition.clone());
            }
            account_infos.push(self.mint.clone());
            account_infos.push(self.mint_authority.clone());
            account_infos.push(self.payer.clone());
            account_infos.push(self.update_authority.clone());
            account_infos.push(self.system_program.clone());
            account_infos.push(self.sysvar_instructions.clone());
            account_infos.push(self.spl_token_program.clone());

            if signers_seeds.is_empty() {
                solana_program::program::invoke(&instruction, &account_infos)
            } else {
                solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
            }
        }
    }

    /// `create_v2` CPI instruction builder.
    pub struct CreateV2Builder<'a> {
        program: &'a solana_program::account_info::AccountInfo<'a>,
        metadata: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        master_edition: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        mint: Option<(&'a solana_program::account_info::AccountInfo<'a>, bool)>,
        mint_authority: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        payer: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        update_authority: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        system_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        sysvar_instructions: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        spl_token_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        asset_data: Option<AssetData>,
        max_supply: Option<u64>,
    }

    impl<'a> CreateV2Builder<'a> {
        pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
            Self {
                program,
                metadata: None,
                master_edition: None,
                mint: None,
                mint_authority: None,
                payer: None,
                update_authority: None,
                system_program: None,
                sysvar_instructions: None,
                spl_token_program: None,
                asset_data: None,
                max_supply: None,
            }
        }
        pub fn metadata(
            &'a mut self,
            metadata: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.metadata = Some(metadata);
            self
        }
        pub fn master_edition(
            &'a mut self,
            master_edition: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.master_edition = Some(master_edition);
            self
        }
        pub fn mint(
            &'a mut self,
            mint: &'a solana_program::account_info::AccountInfo<'a>,
            as_signer: bool,
        ) -> &mut Self {
            self.mint = Some((mint, as_signer));
            self
        }
        pub fn mint_authority(
            &'a mut self,
            mint_authority: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.mint_authority = Some(mint_authority);
            self
        }
        pub fn payer(
            &'a mut self,
            payer: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.payer = Some(payer);
            self
        }
        pub fn update_authority(
            &'a mut self,
            update_authority: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.update_authority = Some(update_authority);
            self
        }
        pub fn system_program(
            &'a mut self,
            system_program: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.system_program = Some(system_program);
            self
        }
        pub fn sysvar_instructions(
            &'a mut self,
            sysvar_instructions: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.sysvar_instructions = Some(sysvar_instructions);
            self
        }
        pub fn spl_token_program(
            &'a mut self,
            spl_token_program: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.spl_token_program = Some(spl_token_program);
            self
        }
        pub fn asset_data(&'a mut self, asset_data: AssetData) -> &mut Self {
            self.asset_data = Some(asset_data);
            self
        }
        pub fn max_supply(&'a mut self, max_supply: u64) -> &mut Self {
            self.max_supply = Some(max_supply);
            self
        }
        pub fn build(&'a self) -> CreateV2 {
            CreateV2 {
                program: self.program,

                metadata: self.metadata.expect("metadata is not set"),

                master_edition: self.master_edition,

                mint: self.mint.expect("mint is not set"),

                mint_authority: self.mint_authority.expect("mint_authority is not set"),

                payer: self.payer.expect("payer is not set"),

                update_authority: self.update_authority.expect("update_authority is not set"),

                system_program: self.system_program.expect("system_program is not set"),

                sysvar_instructions: self
                    .sysvar_instructions
                    .expect("sysvar_instructions is not set"),

                spl_token_program: self
                    .spl_token_program
                    .expect("spl_token_program is not set"),
                args: CreateV2InstructionArgs::new(
                    self.asset_data.expect("asset_data is not set"),
                    self.max_supply,
                ),
            }
        }
    }
}
