//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::Operation;
use crate::generated::types::Payload;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Validate {
    /// Payer and creator of the RuleSet
    pub payer: solana_program::pubkey::Pubkey,
    /// The PDA account where the RuleSet is stored
    pub rule_set: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,

    pub opt_rule_signer1: Option<(solana_program::pubkey::Pubkey, bool)>,
    /// Optional rule validation signer 2
    pub opt_rule_signer2: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation signer 3
    pub opt_rule_signer3: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation signer 4
    pub opt_rule_signer4: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation signer 5
    pub opt_rule_signer5: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation non-signer 1
    pub opt_rule_nonsigner1: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation non-signer 2
    pub opt_rule_nonsigner2: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation non-signer 3
    pub opt_rule_nonsigner3: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation non-signer 4
    pub opt_rule_nonsigner4: Option<solana_program::pubkey::Pubkey>,
    /// Optional rule validation non-signer 5
    pub opt_rule_nonsigner5: Option<solana_program::pubkey::Pubkey>,
}

impl Validate {
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction(
        &self,
        args: ValidateInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(13);
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.rule_set,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        if let Some((opt_rule_signer1, signer)) = self.opt_rule_signer1 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_signer1,
                signer,
            ));
        }
        if let Some(opt_rule_signer2) = self.opt_rule_signer2 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_signer2,
                true,
            ));
        }
        if let Some(opt_rule_signer3) = self.opt_rule_signer3 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_signer3,
                true,
            ));
        }
        if let Some(opt_rule_signer4) = self.opt_rule_signer4 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_signer4,
                true,
            ));
        }
        if let Some(opt_rule_signer5) = self.opt_rule_signer5 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_signer5,
                true,
            ));
        }
        if let Some(opt_rule_nonsigner1) = self.opt_rule_nonsigner1 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_nonsigner1,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner2) = self.opt_rule_nonsigner2 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_nonsigner2,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner3) = self.opt_rule_nonsigner3 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_nonsigner3,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner4) = self.opt_rule_nonsigner4 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_nonsigner4,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner5) = self.opt_rule_nonsigner5 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                opt_rule_nonsigner5,
                false,
            ));
        }
        let mut data = ValidateInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_TOKEN_AUTH_RULES_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct ValidateInstructionData {
    discriminator: u8,
}

impl ValidateInstructionData {
    fn new() -> Self {
        Self { discriminator: 1 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ValidateInstructionArgs {
    pub rule_set_name: String,
    pub operation: Operation,
    pub payload: Payload,
}

/// Instruction builder.
#[derive(Default)]
pub struct ValidateBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    rule_set: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    opt_rule_signer1: Option<(solana_program::pubkey::Pubkey, bool)>,
    opt_rule_signer2: Option<solana_program::pubkey::Pubkey>,
    opt_rule_signer3: Option<solana_program::pubkey::Pubkey>,
    opt_rule_signer4: Option<solana_program::pubkey::Pubkey>,
    opt_rule_signer5: Option<solana_program::pubkey::Pubkey>,
    opt_rule_nonsigner1: Option<solana_program::pubkey::Pubkey>,
    opt_rule_nonsigner2: Option<solana_program::pubkey::Pubkey>,
    opt_rule_nonsigner3: Option<solana_program::pubkey::Pubkey>,
    opt_rule_nonsigner4: Option<solana_program::pubkey::Pubkey>,
    opt_rule_nonsigner5: Option<solana_program::pubkey::Pubkey>,
    rule_set_name: Option<String>,
    operation: Option<Operation>,
    payload: Option<Payload>,
}

impl ValidateBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Payer and creator of the RuleSet
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// The PDA account where the RuleSet is stored
    #[inline(always)]
    pub fn rule_set(&mut self, rule_set: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rule_set = Some(rule_set);
        self
    }
    /// System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn opt_rule_signer1(
        &mut self,
        opt_rule_signer1: solana_program::pubkey::Pubkey,
        as_signer: bool,
    ) -> &mut Self {
        self.opt_rule_signer1 = Some((opt_rule_signer1, as_signer));
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 2
    #[inline(always)]
    pub fn opt_rule_signer2(
        &mut self,
        opt_rule_signer2: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_signer2 = Some(opt_rule_signer2);
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 3
    #[inline(always)]
    pub fn opt_rule_signer3(
        &mut self,
        opt_rule_signer3: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_signer3 = Some(opt_rule_signer3);
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 4
    #[inline(always)]
    pub fn opt_rule_signer4(
        &mut self,
        opt_rule_signer4: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_signer4 = Some(opt_rule_signer4);
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 5
    #[inline(always)]
    pub fn opt_rule_signer5(
        &mut self,
        opt_rule_signer5: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_signer5 = Some(opt_rule_signer5);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 1
    #[inline(always)]
    pub fn opt_rule_nonsigner1(
        &mut self,
        opt_rule_nonsigner1: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_nonsigner1 = Some(opt_rule_nonsigner1);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 2
    #[inline(always)]
    pub fn opt_rule_nonsigner2(
        &mut self,
        opt_rule_nonsigner2: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_nonsigner2 = Some(opt_rule_nonsigner2);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 3
    #[inline(always)]
    pub fn opt_rule_nonsigner3(
        &mut self,
        opt_rule_nonsigner3: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_nonsigner3 = Some(opt_rule_nonsigner3);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 4
    #[inline(always)]
    pub fn opt_rule_nonsigner4(
        &mut self,
        opt_rule_nonsigner4: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_nonsigner4 = Some(opt_rule_nonsigner4);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 5
    #[inline(always)]
    pub fn opt_rule_nonsigner5(
        &mut self,
        opt_rule_nonsigner5: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.opt_rule_nonsigner5 = Some(opt_rule_nonsigner5);
        self
    }
    #[inline(always)]
    pub fn rule_set_name(&mut self, rule_set_name: String) -> &mut Self {
        self.rule_set_name = Some(rule_set_name);
        self
    }
    #[inline(always)]
    pub fn operation(&mut self, operation: Operation) -> &mut Self {
        self.operation = Some(operation);
        self
    }
    #[inline(always)]
    pub fn payload(&mut self, payload: Payload) -> &mut Self {
        self.payload = Some(payload);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = Validate {
            payer: self.payer.expect("payer is not set"),
            rule_set: self.rule_set.expect("rule_set is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            opt_rule_signer1: self.opt_rule_signer1,
            opt_rule_signer2: self.opt_rule_signer2,
            opt_rule_signer3: self.opt_rule_signer3,
            opt_rule_signer4: self.opt_rule_signer4,
            opt_rule_signer5: self.opt_rule_signer5,
            opt_rule_nonsigner1: self.opt_rule_nonsigner1,
            opt_rule_nonsigner2: self.opt_rule_nonsigner2,
            opt_rule_nonsigner3: self.opt_rule_nonsigner3,
            opt_rule_nonsigner4: self.opt_rule_nonsigner4,
            opt_rule_nonsigner5: self.opt_rule_nonsigner5,
        };
        let args = ValidateInstructionArgs {
            rule_set_name: self
                .rule_set_name
                .clone()
                .expect("rule_set_name is not set"),
            operation: self.operation.clone().expect("operation is not set"),
            payload: self.payload.clone().expect("payload is not set"),
        };

        accounts.instruction(args)
    }
}

/// `validate` CPI instruction.
pub struct ValidateCpi<'a> {
    /// The program to invoke.
    pub __program: &'a solana_program::account_info::AccountInfo<'a>,
    /// Payer and creator of the RuleSet
    pub payer: &'a solana_program::account_info::AccountInfo<'a>,
    /// The PDA account where the RuleSet is stored
    pub rule_set: &'a solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'a solana_program::account_info::AccountInfo<'a>,

    pub opt_rule_signer1: Option<(&'a solana_program::account_info::AccountInfo<'a>, bool)>,
    /// Optional rule validation signer 2
    pub opt_rule_signer2: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation signer 3
    pub opt_rule_signer3: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation signer 4
    pub opt_rule_signer4: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation signer 5
    pub opt_rule_signer5: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation non-signer 1
    pub opt_rule_nonsigner1: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation non-signer 2
    pub opt_rule_nonsigner2: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation non-signer 3
    pub opt_rule_nonsigner3: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation non-signer 4
    pub opt_rule_nonsigner4: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// Optional rule validation non-signer 5
    pub opt_rule_nonsigner5: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: ValidateInstructionArgs,
}

impl<'a> ValidateCpi<'a> {
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13);
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.rule_set.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        if let Some((opt_rule_signer1, signer)) = self.opt_rule_signer1 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_signer1.key,
                signer,
            ));
        }
        if let Some(opt_rule_signer2) = self.opt_rule_signer2 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_signer2.key,
                true,
            ));
        }
        if let Some(opt_rule_signer3) = self.opt_rule_signer3 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_signer3.key,
                true,
            ));
        }
        if let Some(opt_rule_signer4) = self.opt_rule_signer4 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_signer4.key,
                true,
            ));
        }
        if let Some(opt_rule_signer5) = self.opt_rule_signer5 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_signer5.key,
                true,
            ));
        }
        if let Some(opt_rule_nonsigner1) = self.opt_rule_nonsigner1 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_nonsigner1.key,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner2) = self.opt_rule_nonsigner2 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_nonsigner2.key,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner3) = self.opt_rule_nonsigner3 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_nonsigner3.key,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner4) = self.opt_rule_nonsigner4 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_nonsigner4.key,
                false,
            ));
        }
        if let Some(opt_rule_nonsigner5) = self.opt_rule_nonsigner5 {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *opt_rule_nonsigner5.key,
                false,
            ));
        }
        let mut data = ValidateInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_TOKEN_AUTH_RULES_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + 1);
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.rule_set.clone());
        account_infos.push(self.system_program.clone());
        if let Some(opt_rule_signer1) = self.opt_rule_signer1 {
            account_infos.push(opt_rule_signer1.0.clone());
        }
        if let Some(opt_rule_signer2) = self.opt_rule_signer2 {
            account_infos.push(opt_rule_signer2.clone());
        }
        if let Some(opt_rule_signer3) = self.opt_rule_signer3 {
            account_infos.push(opt_rule_signer3.clone());
        }
        if let Some(opt_rule_signer4) = self.opt_rule_signer4 {
            account_infos.push(opt_rule_signer4.clone());
        }
        if let Some(opt_rule_signer5) = self.opt_rule_signer5 {
            account_infos.push(opt_rule_signer5.clone());
        }
        if let Some(opt_rule_nonsigner1) = self.opt_rule_nonsigner1 {
            account_infos.push(opt_rule_nonsigner1.clone());
        }
        if let Some(opt_rule_nonsigner2) = self.opt_rule_nonsigner2 {
            account_infos.push(opt_rule_nonsigner2.clone());
        }
        if let Some(opt_rule_nonsigner3) = self.opt_rule_nonsigner3 {
            account_infos.push(opt_rule_nonsigner3.clone());
        }
        if let Some(opt_rule_nonsigner4) = self.opt_rule_nonsigner4 {
            account_infos.push(opt_rule_nonsigner4.clone());
        }
        if let Some(opt_rule_nonsigner5) = self.opt_rule_nonsigner5 {
            account_infos.push(opt_rule_nonsigner5.clone());
        }

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// `validate` CPI instruction builder.
pub struct ValidateCpiBuilder<'a> {
    instruction: Box<ValidateCpiBuilderInstruction<'a>>,
}

impl<'a> ValidateCpiBuilder<'a> {
    pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ValidateCpiBuilderInstruction {
            __program: program,
            payer: None,
            rule_set: None,
            system_program: None,
            opt_rule_signer1: None,
            opt_rule_signer2: None,
            opt_rule_signer3: None,
            opt_rule_signer4: None,
            opt_rule_signer5: None,
            opt_rule_nonsigner1: None,
            opt_rule_nonsigner2: None,
            opt_rule_nonsigner3: None,
            opt_rule_nonsigner4: None,
            opt_rule_nonsigner5: None,
            rule_set_name: None,
            operation: None,
            payload: None,
        });
        Self { instruction }
    }
    /// Payer and creator of the RuleSet
    #[inline(always)]
    pub fn payer(&mut self, payer: &'a solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// The PDA account where the RuleSet is stored
    #[inline(always)]
    pub fn rule_set(
        &mut self,
        rule_set: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rule_set = Some(rule_set);
        self
    }
    /// System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn opt_rule_signer1(
        &mut self,
        opt_rule_signer1: &'a solana_program::account_info::AccountInfo<'a>,
        as_signer: bool,
    ) -> &mut Self {
        self.instruction.opt_rule_signer1 = Some((opt_rule_signer1, as_signer));
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 2
    #[inline(always)]
    pub fn opt_rule_signer2(
        &mut self,
        opt_rule_signer2: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_signer2 = Some(opt_rule_signer2);
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 3
    #[inline(always)]
    pub fn opt_rule_signer3(
        &mut self,
        opt_rule_signer3: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_signer3 = Some(opt_rule_signer3);
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 4
    #[inline(always)]
    pub fn opt_rule_signer4(
        &mut self,
        opt_rule_signer4: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_signer4 = Some(opt_rule_signer4);
        self
    }
    /// `[optional account]`
    /// Optional rule validation signer 5
    #[inline(always)]
    pub fn opt_rule_signer5(
        &mut self,
        opt_rule_signer5: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_signer5 = Some(opt_rule_signer5);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 1
    #[inline(always)]
    pub fn opt_rule_nonsigner1(
        &mut self,
        opt_rule_nonsigner1: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_nonsigner1 = Some(opt_rule_nonsigner1);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 2
    #[inline(always)]
    pub fn opt_rule_nonsigner2(
        &mut self,
        opt_rule_nonsigner2: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_nonsigner2 = Some(opt_rule_nonsigner2);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 3
    #[inline(always)]
    pub fn opt_rule_nonsigner3(
        &mut self,
        opt_rule_nonsigner3: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_nonsigner3 = Some(opt_rule_nonsigner3);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 4
    #[inline(always)]
    pub fn opt_rule_nonsigner4(
        &mut self,
        opt_rule_nonsigner4: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_nonsigner4 = Some(opt_rule_nonsigner4);
        self
    }
    /// `[optional account]`
    /// Optional rule validation non-signer 5
    #[inline(always)]
    pub fn opt_rule_nonsigner5(
        &mut self,
        opt_rule_nonsigner5: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.opt_rule_nonsigner5 = Some(opt_rule_nonsigner5);
        self
    }
    #[inline(always)]
    pub fn rule_set_name(&mut self, rule_set_name: String) -> &mut Self {
        self.instruction.rule_set_name = Some(rule_set_name);
        self
    }
    #[inline(always)]
    pub fn operation(&mut self, operation: Operation) -> &mut Self {
        self.instruction.operation = Some(operation);
        self
    }
    #[inline(always)]
    pub fn payload(&mut self, payload: Payload) -> &mut Self {
        self.instruction.payload = Some(payload);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn build(&self) -> ValidateCpi<'a> {
        let args = ValidateInstructionArgs {
            rule_set_name: self
                .instruction
                .rule_set_name
                .clone()
                .expect("rule_set_name is not set"),
            operation: self
                .instruction
                .operation
                .clone()
                .expect("operation is not set"),
            payload: self
                .instruction
                .payload
                .clone()
                .expect("payload is not set"),
        };

        ValidateCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            rule_set: self.instruction.rule_set.expect("rule_set is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            opt_rule_signer1: self.instruction.opt_rule_signer1,

            opt_rule_signer2: self.instruction.opt_rule_signer2,

            opt_rule_signer3: self.instruction.opt_rule_signer3,

            opt_rule_signer4: self.instruction.opt_rule_signer4,

            opt_rule_signer5: self.instruction.opt_rule_signer5,

            opt_rule_nonsigner1: self.instruction.opt_rule_nonsigner1,

            opt_rule_nonsigner2: self.instruction.opt_rule_nonsigner2,

            opt_rule_nonsigner3: self.instruction.opt_rule_nonsigner3,

            opt_rule_nonsigner4: self.instruction.opt_rule_nonsigner4,

            opt_rule_nonsigner5: self.instruction.opt_rule_nonsigner5,
            __args: args,
        }
    }
}

struct ValidateCpiBuilderInstruction<'a> {
    __program: &'a solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    rule_set: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_signer1: Option<(&'a solana_program::account_info::AccountInfo<'a>, bool)>,
    opt_rule_signer2: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_signer3: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_signer4: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_signer5: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_nonsigner1: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_nonsigner2: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_nonsigner3: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_nonsigner4: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    opt_rule_nonsigner5: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    rule_set_name: Option<String>,
    operation: Option<Operation>,
    payload: Option<Payload>,
}
