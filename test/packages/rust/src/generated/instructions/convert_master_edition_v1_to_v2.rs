//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct ConvertMasterEditionV1ToV2 {
    /// Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
    pub master_edition: solana_program::pubkey::Pubkey,
    /// One time authorization mint
    pub one_time_auth: solana_program::pubkey::Pubkey,
    /// Printing mint
    pub printing_mint: solana_program::pubkey::Pubkey,
}

impl ConvertMasterEditionV1ToV2 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let args = ConvertMasterEditionV1ToV2InstructionArgs::new();
        solana_program::instruction::Instruction {
            program_id: crate::MPL_TOKEN_METADATA_ID,
            accounts: vec![
                solana_program::instruction::AccountMeta::new(self.master_edition, false),
                solana_program::instruction::AccountMeta::new(self.one_time_auth, false),
                solana_program::instruction::AccountMeta::new(self.printing_mint, false),
            ],
            data: args.try_to_vec().unwrap(),
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
struct ConvertMasterEditionV1ToV2InstructionArgs {
    discriminator: u8,
}

impl ConvertMasterEditionV1ToV2InstructionArgs {
    pub fn new() -> Self {
        Self { discriminator: 12 }
    }
}

/// Instruction builder.
#[derive(Default)]
pub struct ConvertMasterEditionV1ToV2Builder {
    master_edition: Option<solana_program::pubkey::Pubkey>,
    one_time_auth: Option<solana_program::pubkey::Pubkey>,
    printing_mint: Option<solana_program::pubkey::Pubkey>,
}

impl ConvertMasterEditionV1ToV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
        self.master_edition = Some(master_edition);
        self
    }
    pub fn one_time_auth(&mut self, one_time_auth: solana_program::pubkey::Pubkey) -> &mut Self {
        self.one_time_auth = Some(one_time_auth);
        self
    }
    pub fn printing_mint(&mut self, printing_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.printing_mint = Some(printing_mint);
        self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = ConvertMasterEditionV1ToV2 {
            master_edition: self.master_edition.expect("master_edition is not set"),

            one_time_auth: self.one_time_auth.expect("one_time_auth is not set"),

            printing_mint: self.printing_mint.expect("printing_mint is not set"),
        };
        accounts.instruction()
    }
}

pub mod cpi {
    use super::*;

    /// `convert_master_edition_v1_to_v2` CPI instruction.
    pub struct ConvertMasterEditionV1ToV2<'a> {
        pub program: &'a solana_program::account_info::AccountInfo<'a>,
        /// Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])
        pub master_edition: &'a solana_program::account_info::AccountInfo<'a>,
        /// One time authorization mint
        pub one_time_auth: &'a solana_program::account_info::AccountInfo<'a>,
        /// Printing mint
        pub printing_mint: &'a solana_program::account_info::AccountInfo<'a>,
    }

    impl<'a> ConvertMasterEditionV1ToV2<'a> {
        pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
            self.invoke_signed(&[])
        }
        #[allow(clippy::vec_init_then_push)]
        pub fn invoke_signed(
            &self,
            signers_seeds: &[&[&[u8]]],
        ) -> solana_program::entrypoint::ProgramResult {
            let args = ConvertMasterEditionV1ToV2InstructionArgs::new();
            let instruction = solana_program::instruction::Instruction {
                program_id: crate::MPL_TOKEN_METADATA_ID,
                accounts: vec![
                    solana_program::instruction::AccountMeta::new(*self.master_edition.key, false),
                    solana_program::instruction::AccountMeta::new(*self.one_time_auth.key, false),
                    solana_program::instruction::AccountMeta::new(*self.printing_mint.key, false),
                ],
                data: args.try_to_vec().unwrap(),
            };
            let mut account_infos = Vec::with_capacity(3 + 1);
            account_infos.push(self.program.clone());
            account_infos.push(self.master_edition.clone());
            account_infos.push(self.one_time_auth.clone());
            account_infos.push(self.printing_mint.clone());

            if signers_seeds.is_empty() {
                solana_program::program::invoke(&instruction, &account_infos)
            } else {
                solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
            }
        }
    }

    /// `convert_master_edition_v1_to_v2` CPI instruction builder.
    pub struct ConvertMasterEditionV1ToV2Builder<'a> {
        program: &'a solana_program::account_info::AccountInfo<'a>,
        master_edition: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        one_time_auth: Option<&'a solana_program::account_info::AccountInfo<'a>>,
        printing_mint: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    }

    impl<'a> ConvertMasterEditionV1ToV2Builder<'a> {
        pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
            Self {
                program,
                master_edition: None,
                one_time_auth: None,
                printing_mint: None,
            }
        }
        pub fn master_edition(
            &'a mut self,
            master_edition: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.master_edition = Some(master_edition);
            self
        }
        pub fn one_time_auth(
            &'a mut self,
            one_time_auth: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.one_time_auth = Some(one_time_auth);
            self
        }
        pub fn printing_mint(
            &'a mut self,
            printing_mint: &'a solana_program::account_info::AccountInfo<'a>,
        ) -> &mut Self {
            self.printing_mint = Some(printing_mint);
            self
        }
        pub fn build(&'a self) -> ConvertMasterEditionV1ToV2 {
            ConvertMasterEditionV1ToV2 {
                program: self.program,

                master_edition: self.master_edition.expect("master_edition is not set"),

                one_time_auth: self.one_time_auth.expect("one_time_auth is not set"),

                printing_mint: self.printing_mint.expect("printing_mint is not set"),
            }
        }
    }
}
