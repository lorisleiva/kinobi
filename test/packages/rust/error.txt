//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct Create {
    /// The address of the new account
    pub address: solana_program::pubkey::Pubkey,
    /// The authority of the new account
    pub authority: solana_program::pubkey::Pubkey,
    /// The account paying for the storage fees
    pub payer: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl Create {
    pub fn instruction(
        &self,
        args: CreateInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        solana_program::instruction::Instruction {
            program_id: crate::MPL_PROJECT_NAME_ID,
            accounts: vec![
                solana_program::instruction::AccountMeta::new(self.address, true),
                solana_program::instruction::AccountMeta::new_readonly(self.authority, false),
                solana_program::instruction::AccountMeta::new(self.payer, false),
                solana_program::instruction::AccountMeta::new_readonly(self.system_program, false),
            ],
            data: args.try_to_vec().unwrap(),
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct CreateInstructionArgs {
    discriminator: u8,
    pub arg1: u16,
    pub arg2: u32,
}

impl CreateInstructionArgs {
    pub fn new(arg1: u16, arg2: u32) -> Self {
        Self {
            discriminator: 0,
            arg1,
            arg2,
        }
    }
}

/// Instruction builder.
#[derive(Default)]
pub struct CreateBuilder {
    address: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    arg1: Option<u16>,
    arg2: Option<u32>,
}

impl CreateBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    pub fn address(&mut self, address: solana_program::pubkey::Pubkey) -> &mut Self {
        self.address = Some(address);
        self
    }
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    pub fn arg1(&mut self, arg1: u16) -> &mut Self {
        self.arg1 = Some(arg1);
        self
    }
    pub fn arg2(&mut self, arg2: u32) -> &mut Self {
        self.arg2 = Some(arg2);
        self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = Create {
            address: self.address.expect("address is not set"),

            authority: self.authority.expect("authority is not set"),

            payer: self.payer.expect("payer is not set"),

            system_program: self.system_program.expect("system_program is not set"),
        };
        let args = CreateInstructionArgs::new(
            self.arg1.clone().expect("arg1 is not set"),
            self.arg2.clone().expect("arg2 is not set"),
        );
        accounts.instruction(args)
    }
}

/// `create` CPI instruction.
pub struct RealCreateCpi<'a> {
    pub program: &'a solana_program::account_info::AccountInfo<'a>,
    /// The address of the new account
    pub address: &'a solana_program::account_info::AccountInfo<'a>,
}

/// `create` CPI instruction.
pub struct CreateCpi<'a> {
    pub program: Option<&'a solana_program::account_info::AccountInfo<'a>>,
    /// The address of the new account
    pub address: Option<&'a solana_program::account_info::AccountInfo<'a>>,
}

/// `create` CPI instruction builder.
pub struct CreateCpiBuilder<'a> {
    instruction: Box<CreateCpi<'a>>,
}

impl<'a> CreateCpiBuilder<'a> {
    pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateCpi {
            program: Some(program),
            address: None,
        });

        Self { instruction }
    }
    pub fn address(
        &mut self,
        address: &'a solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.address = Some(address);
        self
    }
    pub fn build(&self) -> RealCreateCpi<'a> {
        RealCreateCpi {
            program: self.instruction.program.unwrap(),
            address: self.instruction.address.unwrap(),
        }
    }
}
