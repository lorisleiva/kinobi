/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
} from '../shared';
import {
  EscrowAuthority,
  EscrowAuthorityArgs,
  TmKey,
  getEscrowAuthorityDecoder,
  getEscrowAuthorityEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type TokenOwnedEscrow<TAddress extends string = string> = Account<
  TokenOwnedEscrowAccountData,
  TAddress
>;

export type TokenOwnedEscrowAccountData = {
  key: TmKey;
  baseToken: Base58EncodedAddress;
  authority: EscrowAuthority;
  bump: number;
};

export type TokenOwnedEscrowAccountDataArgs = {
  baseToken: Base58EncodedAddress;
  authority: EscrowAuthorityArgs;
  bump: number;
};

export function getTokenOwnedEscrowAccountDataEncoder(): Encoder<TokenOwnedEscrowAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<TokenOwnedEscrowAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['baseToken', getAddressEncoder()],
        ['authority', getEscrowAuthorityEncoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'TokenOwnedEscrowAccountData' }
    ),
    (value) =>
      ({ ...value, key: TmKey.TokenOwnedEscrow } as TokenOwnedEscrowAccountData)
  ) as Encoder<TokenOwnedEscrowAccountDataArgs>;
}

export function getTokenOwnedEscrowAccountDataDecoder(): Decoder<TokenOwnedEscrowAccountData> {
  return getStructDecoder<TokenOwnedEscrowAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['baseToken', getAddressDecoder()],
      ['authority', getEscrowAuthorityDecoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'TokenOwnedEscrowAccountData' }
  ) as Decoder<TokenOwnedEscrowAccountData>;
}

export function getTokenOwnedEscrowAccountDataCodec(): Codec<
  TokenOwnedEscrowAccountDataArgs,
  TokenOwnedEscrowAccountData
> {
  return combineCodec(
    getTokenOwnedEscrowAccountDataEncoder(),
    getTokenOwnedEscrowAccountDataDecoder()
  );
}

export function decodeTokenOwnedEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): TokenOwnedEscrow<TAddress> {
  return decodeAccount(encodedAccount, getTokenOwnedEscrowAccountDataDecoder());
}

export async function fetchTokenOwnedEscrow<TAddress extends string = string>(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<TokenOwnedEscrow<TAddress>> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeTokenOwnedEscrow(maybeAccount);
}

export async function safeFetchTokenOwnedEscrow<
  TAddress extends string = string
>(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<TokenOwnedEscrow<TAddress> | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists ? decodeTokenOwnedEscrow(maybeAccount) : null;
}

export async function fetchAllTokenOwnedEscrow(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<TokenOwnedEscrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeTokenOwnedEscrow(maybeAccount);
  });
}

export async function safeFetchAllTokenOwnedEscrow(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<TokenOwnedEscrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      decodeTokenOwnedEscrow(maybeAccount as EncodedAccount)
    );
}
