/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import {
  Account,
  Context,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from 'some-magical-place';
import { TmKey, TmKeyArgs, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type Edition = Account<EditionAccountData>;

export type EditionAccountData = {
  key: TmKey;
  parent: Base58EncodedAddress;
  edition: bigint;
};

export type EditionAccountDataArgs = {
  parent: Base58EncodedAddress;
  edition: number | bigint;
};

export function getEditionAccountDataEncoder(): Encoder<EditionAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<EditionAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['parent', getAddressEncoder()],
        ['edition', getU64Encoder()],
      ],
      { description: 'EditionAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.EditionV1 } as EditionAccountData)
  ) as Encoder<EditionAccountDataArgs>;
}

export function getEditionAccountDataDecoder(): Decoder<EditionAccountData> {
  return getStructDecoder<EditionAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['parent', getAddressDecoder()],
      ['edition', getU64Decoder()],
    ],
    { description: 'EditionAccountData' }
  ) as Decoder<EditionAccountData>;
}

export function getEditionAccountDataCodec(): Codec<
  EditionAccountDataArgs,
  EditionAccountData
> {
  return combineCodec(
    getEditionAccountDataEncoder(),
    getEditionAccountDataDecoder()
  );
}

export function deserializeEdition(rawAccount: RpcAccount): Edition {
  return deserializeAccount(rawAccount, getEditionAccountDataEncoder());
}

export async function fetchEdition(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<Edition> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'Edition');
  return deserializeEdition(maybeAccount);
}

export async function safeFetchEdition(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<Edition | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists ? deserializeEdition(maybeAccount) : null;
}

export async function fetchAllEdition(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<Edition[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Edition');
    return deserializeEdition(maybeAccount);
  });
}

export async function safeFetchAllEdition(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<Edition[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeEdition(maybeAccount as RpcAccount));
}

export function getEditionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: TmKeyArgs;
      parent: Base58EncodedAddress;
      edition: number | bigint;
    }>({
      key: [0, getTmKeyEncoder()],
      parent: [1, getAddressEncoder()],
      edition: [33, getU64Encoder()],
    })
    .deserializeUsing<Edition>((account) => deserializeEdition(account))
    .whereField('key', TmKey.EditionV1);
}

export function getEditionSize(): number {
  return 41;
}
