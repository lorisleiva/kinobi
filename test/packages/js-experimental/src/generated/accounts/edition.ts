/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
} from '../shared';
import { TmKey, TmKeyArgs, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type Edition<TAddress extends string = string> = Account<
  EditionAccountData,
  TAddress
>;

export type EditionAccountData = {
  key: TmKey;
  parent: Base58EncodedAddress;
  edition: bigint;
};

export type EditionAccountDataArgs = {
  parent: Base58EncodedAddress;
  edition: number | bigint;
};

export function getEditionAccountDataEncoder(): Encoder<EditionAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<{
      key: TmKeyArgs;
      parent: Base58EncodedAddress;
      edition: number | bigint;
    }>(
      [
        ['key', getTmKeyEncoder()],
        ['parent', getAddressEncoder()],
        ['edition', getU64Encoder()],
      ],
      { description: 'EditionAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.EditionV1 })
  ) as Encoder<EditionAccountDataArgs>;
}

export function getEditionAccountDataDecoder(): Decoder<EditionAccountData> {
  return getStructDecoder<EditionAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['parent', getAddressDecoder()],
      ['edition', getU64Decoder()],
    ],
    { description: 'EditionAccountData' }
  ) as Decoder<EditionAccountData>;
}

export function getEditionAccountDataCodec(): Codec<
  EditionAccountDataArgs,
  EditionAccountData
> {
  return combineCodec(
    getEditionAccountDataEncoder(),
    getEditionAccountDataDecoder()
  );
}

export function decodeEdition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Edition<TAddress> {
  return decodeAccount(encodedAccount, getEditionAccountDataDecoder());
}

export async function fetchEdition<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<Edition<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeEdition(maybeAccount);
}

export async function safeFetchEdition<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<Edition<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeEdition(maybeAccount) : null;
}

export async function fetchAllEdition(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<Edition[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeEdition(maybeAccount);
  });
}

export async function safeFetchAllEdition(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<Edition[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => decodeEdition(maybeAccount as EncodedAccount));
}

export function getEditionSize(): number {
  return 41;
}
