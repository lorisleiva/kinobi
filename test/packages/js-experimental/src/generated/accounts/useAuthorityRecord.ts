/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from 'umi';
import { Serializer } from 'umiSerializers';
import { Account } from '../shared';
import { TmKey, TmKeyArgs, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type UseAuthorityRecord = Account<UseAuthorityRecordAccountData>;

export type UseAuthorityRecordAccountData = {
  key: TmKey;
  allowedUses: bigint;
  bump: number;
};

export type UseAuthorityRecordAccountDataArgs = {
  allowedUses: number | bigint;
  bump: number;
};

export function getUseAuthorityRecordAccountDataEncoder(): Encoder<UseAuthorityRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<UseAuthorityRecordAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['allowedUses', getU64Encoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'UseAuthorityRecordAccountData' }
    ),
    (value) =>
      ({
        ...value,
        key: TmKey.UseAuthorityRecord,
      } as UseAuthorityRecordAccountData)
  ) as Encoder<UseAuthorityRecordAccountDataArgs>;
}

export function getUseAuthorityRecordAccountDataDecoder(): Decoder<UseAuthorityRecordAccountData> {
  return getStructDecoder<UseAuthorityRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['allowedUses', getU64Decoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'UseAuthorityRecordAccountData' }
  ) as Decoder<UseAuthorityRecordAccountData>;
}

export function getUseAuthorityRecordAccountDataCodec(): Codec<
  UseAuthorityRecordAccountDataArgs,
  UseAuthorityRecordAccountData
> {
  return combineCodec(
    getUseAuthorityRecordAccountDataEncoder(),
    getUseAuthorityRecordAccountDataDecoder()
  );
}
