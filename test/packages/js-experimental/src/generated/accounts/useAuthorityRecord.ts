/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Account,
  Context,
  GpaBuilder,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from 'some-magical-place';
import { gpaBuilder } from 'umi';
import { TmKey, TmKeyArgs, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type UseAuthorityRecord = Account<UseAuthorityRecordAccountData>;

export type UseAuthorityRecordAccountData = {
  key: TmKey;
  allowedUses: bigint;
  bump: number;
};

export type UseAuthorityRecordAccountDataArgs = {
  allowedUses: number | bigint;
  bump: number;
};

export function getUseAuthorityRecordAccountDataEncoder(): Encoder<UseAuthorityRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<UseAuthorityRecordAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['allowedUses', getU64Encoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'UseAuthorityRecordAccountData' }
    ),
    (value) =>
      ({
        ...value,
        key: TmKey.UseAuthorityRecord,
      } as UseAuthorityRecordAccountData)
  ) as Encoder<UseAuthorityRecordAccountDataArgs>;
}

export function getUseAuthorityRecordAccountDataDecoder(): Decoder<UseAuthorityRecordAccountData> {
  return getStructDecoder<UseAuthorityRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['allowedUses', getU64Decoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'UseAuthorityRecordAccountData' }
  ) as Decoder<UseAuthorityRecordAccountData>;
}

export function getUseAuthorityRecordAccountDataCodec(): Codec<
  UseAuthorityRecordAccountDataArgs,
  UseAuthorityRecordAccountData
> {
  return combineCodec(
    getUseAuthorityRecordAccountDataEncoder(),
    getUseAuthorityRecordAccountDataDecoder()
  );
}

export function deserializeUseAuthorityRecord(
  rawAccount: RpcAccount
): UseAuthorityRecord {
  return deserializeAccount(
    rawAccount,
    getUseAuthorityRecordAccountDataEncoder()
  );
}

export async function fetchUseAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<UseAuthorityRecord> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'UseAuthorityRecord');
  return deserializeUseAuthorityRecord(maybeAccount);
}

export async function safeFetchUseAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<UseAuthorityRecord | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists
    ? deserializeUseAuthorityRecord(maybeAccount)
    : null;
}

export async function fetchAllUseAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<UseAuthorityRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'UseAuthorityRecord');
    return deserializeUseAuthorityRecord(maybeAccount);
  });
}

export async function safeFetchAllUseAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<UseAuthorityRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeUseAuthorityRecord(maybeAccount as RpcAccount)
    );
}

export function getUseAuthorityRecordGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: TmKeyArgs;
      allowedUses: number | bigint;
      bump: number;
    }>({
      key: [0, getTmKeyEncoder()],
      allowedUses: [1, getU64Encoder()],
      bump: [9, getU8Encoder()],
    })
    .deserializeUsing<UseAuthorityRecord>((account) =>
      deserializeUseAuthorityRecord(account)
    )
    .whereField('key', TmKey.UseAuthorityRecord);
}
export function getUseAuthorityRecordSize(): number {
  return 10;
}
