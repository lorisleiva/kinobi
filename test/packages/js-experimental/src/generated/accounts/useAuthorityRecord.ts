/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
} from '../shared';
import { TmKey, TmKeyArgs, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type UseAuthorityRecord<TAddress extends string = string> = Account<
  UseAuthorityRecordAccountData,
  TAddress
>;

export type UseAuthorityRecordAccountData = {
  key: TmKey;
  allowedUses: bigint;
  bump: number;
};

export type UseAuthorityRecordAccountDataArgs = {
  allowedUses: number | bigint;
  bump: number;
};

export function getUseAuthorityRecordAccountDataEncoder(): Encoder<UseAuthorityRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<{
      key: TmKeyArgs;
      allowedUses: number | bigint;
      bump: number;
    }>(
      [
        ['key', getTmKeyEncoder()],
        ['allowedUses', getU64Encoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'UseAuthorityRecordAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.UseAuthorityRecord })
  ) as Encoder<UseAuthorityRecordAccountDataArgs>;
}

export function getUseAuthorityRecordAccountDataDecoder(): Decoder<UseAuthorityRecordAccountData> {
  return getStructDecoder<UseAuthorityRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['allowedUses', getU64Decoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'UseAuthorityRecordAccountData' }
  ) as Decoder<UseAuthorityRecordAccountData>;
}

export function getUseAuthorityRecordAccountDataCodec(): Codec<
  UseAuthorityRecordAccountDataArgs,
  UseAuthorityRecordAccountData
> {
  return combineCodec(
    getUseAuthorityRecordAccountDataEncoder(),
    getUseAuthorityRecordAccountDataDecoder()
  );
}

export function decodeUseAuthorityRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): UseAuthorityRecord<TAddress> {
  return decodeAccount(
    encodedAccount,
    getUseAuthorityRecordAccountDataDecoder()
  );
}

export async function fetchUseAuthorityRecord<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<UseAuthorityRecord<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeUseAuthorityRecord(maybeAccount);
}

export async function safeFetchUseAuthorityRecord<
  TAddress extends string = string
>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<UseAuthorityRecord<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeUseAuthorityRecord(maybeAccount) : null;
}

export async function fetchAllUseAuthorityRecord(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchEncodedAccountsOptions
): Promise<UseAuthorityRecord[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeUseAuthorityRecord(maybeAccount);
  });
}

export async function safeFetchAllUseAuthorityRecord(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchEncodedAccountsOptions
): Promise<UseAuthorityRecord[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      decodeUseAuthorityRecord(maybeAccount as EncodedAccount)
    );
}

export function getUseAuthorityRecordSize(): number {
  return 10;
}
