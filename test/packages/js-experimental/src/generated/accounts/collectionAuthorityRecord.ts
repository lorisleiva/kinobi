/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  Account,
  Context,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
} from 'some-magical-place';
import { TmKey, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type CollectionAuthorityRecord =
  Account<CollectionAuthorityRecordAccountData>;

export type CollectionAuthorityRecordAccountData = {
  key: TmKey;
  bump: number;
  updateAuthority: Option<Base58EncodedAddress>;
};

export type CollectionAuthorityRecordAccountDataArgs = {
  bump: number;
  updateAuthority: OptionOrNullable<Base58EncodedAddress>;
};

export function getCollectionAuthorityRecordAccountDataEncoder(): Encoder<CollectionAuthorityRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<CollectionAuthorityRecordAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['bump', getU8Encoder()],
        ['updateAuthority', getOptionEncoder(getAddressEncoder())],
      ],
      { description: 'CollectionAuthorityRecordAccountData' }
    ),
    (value) =>
      ({
        ...value,
        key: TmKey.CollectionAuthorityRecord,
      } as CollectionAuthorityRecordAccountData)
  ) as Encoder<CollectionAuthorityRecordAccountDataArgs>;
}

export function getCollectionAuthorityRecordAccountDataDecoder(): Decoder<CollectionAuthorityRecordAccountData> {
  return getStructDecoder<CollectionAuthorityRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['bump', getU8Decoder()],
      ['updateAuthority', getOptionDecoder(getAddressDecoder())],
    ],
    { description: 'CollectionAuthorityRecordAccountData' }
  ) as Decoder<CollectionAuthorityRecordAccountData>;
}

export function getCollectionAuthorityRecordAccountDataCodec(): Codec<
  CollectionAuthorityRecordAccountDataArgs,
  CollectionAuthorityRecordAccountData
> {
  return combineCodec(
    getCollectionAuthorityRecordAccountDataEncoder(),
    getCollectionAuthorityRecordAccountDataDecoder()
  );
}

export function deserializeCollectionAuthorityRecord(
  rawAccount: RpcAccount
): CollectionAuthorityRecord {
  return deserializeAccount(
    rawAccount,
    getCollectionAuthorityRecordAccountDataEncoder()
  );
}

export async function fetchCollectionAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<CollectionAuthorityRecord> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'CollectionAuthorityRecord');
  return deserializeCollectionAuthorityRecord(maybeAccount);
}

export async function safeFetchCollectionAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<CollectionAuthorityRecord | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists
    ? deserializeCollectionAuthorityRecord(maybeAccount)
    : null;
}

export async function fetchAllCollectionAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<CollectionAuthorityRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CollectionAuthorityRecord');
    return deserializeCollectionAuthorityRecord(maybeAccount);
  });
}

export async function safeFetchAllCollectionAuthorityRecord(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<CollectionAuthorityRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeCollectionAuthorityRecord(maybeAccount as RpcAccount)
    );
}
