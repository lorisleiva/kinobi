/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  Option,
  OptionOrNullable,
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/codecs';
import { TmKey, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type CollectionAuthorityRecord = {
  key: TmKey;
  bump: number;
  updateAuthority: Option<Address>;
};

export type CollectionAuthorityRecordArgs = {
  bump: number;
  updateAuthority: OptionOrNullable<Address>;
};

export function getCollectionAuthorityRecordEncoder(): Encoder<CollectionAuthorityRecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getTmKeyEncoder()],
      ['bump', getU8Encoder()],
      ['updateAuthority', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, key: TmKey.CollectionAuthorityRecord })
  );
}

export function getCollectionAuthorityRecordDecoder(): Decoder<CollectionAuthorityRecord> {
  return getStructDecoder([
    ['key', getTmKeyDecoder()],
    ['bump', getU8Decoder()],
    ['updateAuthority', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getCollectionAuthorityRecordCodec(): Codec<
  CollectionAuthorityRecordArgs,
  CollectionAuthorityRecord
> {
  return combineCodec(
    getCollectionAuthorityRecordEncoder(),
    getCollectionAuthorityRecordDecoder()
  );
}

export function decodeCollectionAuthorityRecord<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CollectionAuthorityRecord, TAddress>;
export function decodeCollectionAuthorityRecord<
  TAddress extends string = string,
>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CollectionAuthorityRecord, TAddress>;
export function decodeCollectionAuthorityRecord<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<CollectionAuthorityRecord, TAddress>
  | MaybeAccount<CollectionAuthorityRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCollectionAuthorityRecordDecoder()
  );
}

export async function fetchCollectionAuthorityRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CollectionAuthorityRecord, TAddress>> {
  const maybeAccount = await fetchMaybeCollectionAuthorityRecord(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCollectionAuthorityRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CollectionAuthorityRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCollectionAuthorityRecord(maybeAccount);
}

export async function fetchAllCollectionAuthorityRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CollectionAuthorityRecord>[]> {
  const maybeAccounts = await fetchAllMaybeCollectionAuthorityRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCollectionAuthorityRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CollectionAuthorityRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCollectionAuthorityRecord(maybeAccount)
  );
}
