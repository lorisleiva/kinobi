/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  Account,
  Context,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from 'some-magical-place';
import {
  Reservation,
  ReservationArgs,
  TmKey,
  TmKeyArgs,
  getReservationDecoder,
  getReservationEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type ReservationListV2 = Account<ReservationListV2AccountData>;

export type ReservationListV2AccountData = {
  key: TmKey;
  masterEdition: Base58EncodedAddress;
  supplySnapshot: Option<bigint>;
  reservations: Array<Reservation>;
  totalReservationSpots: bigint;
  currentReservationSpots: bigint;
};

export type ReservationListV2AccountDataArgs = {
  masterEdition: Base58EncodedAddress;
  supplySnapshot: OptionOrNullable<number | bigint>;
  reservations: Array<ReservationArgs>;
  totalReservationSpots: number | bigint;
  currentReservationSpots: number | bigint;
};

export function getReservationListV2AccountDataEncoder(): Encoder<ReservationListV2AccountDataArgs> {
  return mapEncoder(
    getStructEncoder<ReservationListV2AccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['masterEdition', getAddressEncoder()],
        ['supplySnapshot', getOptionEncoder(getU64Encoder())],
        ['reservations', getArrayEncoder(getReservationEncoder())],
        ['totalReservationSpots', getU64Encoder()],
        ['currentReservationSpots', getU64Encoder()],
      ],
      { description: 'ReservationListV2AccountData' }
    ),
    (value) =>
      ({
        ...value,
        key: TmKey.ReservationListV2,
      } as ReservationListV2AccountData)
  ) as Encoder<ReservationListV2AccountDataArgs>;
}

export function getReservationListV2AccountDataDecoder(): Decoder<ReservationListV2AccountData> {
  return getStructDecoder<ReservationListV2AccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['masterEdition', getAddressDecoder()],
      ['supplySnapshot', getOptionDecoder(getU64Decoder())],
      ['reservations', getArrayDecoder(getReservationDecoder())],
      ['totalReservationSpots', getU64Decoder()],
      ['currentReservationSpots', getU64Decoder()],
    ],
    { description: 'ReservationListV2AccountData' }
  ) as Decoder<ReservationListV2AccountData>;
}

export function getReservationListV2AccountDataCodec(): Codec<
  ReservationListV2AccountDataArgs,
  ReservationListV2AccountData
> {
  return combineCodec(
    getReservationListV2AccountDataEncoder(),
    getReservationListV2AccountDataDecoder()
  );
}

export function deserializeReservationListV2(
  rawAccount: RpcAccount
): ReservationListV2 {
  return deserializeAccount(
    rawAccount,
    getReservationListV2AccountDataEncoder()
  );
}

export async function fetchReservationListV2(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<ReservationListV2> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'ReservationListV2');
  return deserializeReservationListV2(maybeAccount);
}

export async function safeFetchReservationListV2(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<ReservationListV2 | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists
    ? deserializeReservationListV2(maybeAccount)
    : null;
}

export async function fetchAllReservationListV2(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ReservationListV2');
    return deserializeReservationListV2(maybeAccount);
  });
}

export async function safeFetchAllReservationListV2(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeReservationListV2(maybeAccount as RpcAccount)
    );
}

export function getReservationListV2GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: TmKeyArgs;
      masterEdition: Base58EncodedAddress;
      supplySnapshot: OptionOrNullable<number | bigint>;
      reservations: Array<ReservationArgs>;
      totalReservationSpots: number | bigint;
      currentReservationSpots: number | bigint;
    }>({
      key: [0, getTmKeyEncoder()],
      masterEdition: [1, getAddressEncoder()],
      supplySnapshot: [33, getOptionEncoder(getU64Encoder())],
      reservations: [null, getArrayEncoder(getReservationEncoder())],
      totalReservationSpots: [null, getU64Encoder()],
      currentReservationSpots: [null, getU64Encoder()],
    })
    .deserializeUsing<ReservationListV2>((account) =>
      deserializeReservationListV2(account)
    )
    .whereField('key', TmKey.ReservationListV2);
}
