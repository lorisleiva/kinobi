/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import { getStringEncoder } from '@solana/codecs-strings';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from 'umi';
import { Serializer, publicKey as publicKeySerializer } from 'umiSerializers';
import { Account } from '../shared';
import {
  DelegateRoleArgs,
  TmKey,
  TmKeyArgs,
  getDelegateRoleEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type MasterEditionV1 = Account<MasterEditionV1AccountData>;

export type MasterEditionV1AccountData = {
  key: TmKey;
  supply: bigint;
  maxSupply: Option<bigint>;
  printingMint: Base58EncodedAddress;
  oneTimePrintingAuthorizationMint: Base58EncodedAddress;
};

export type MasterEditionV1AccountDataArgs = {
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
  printingMint: Base58EncodedAddress;
  oneTimePrintingAuthorizationMint: Base58EncodedAddress;
};

export function getMasterEditionV1AccountDataEncoder(): Encoder<MasterEditionV1AccountDataArgs> {
  return mapEncoder(
    getStructEncoder<MasterEditionV1AccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['supply', getU64Encoder()],
        ['maxSupply', getOptionEncoder(getU64Encoder())],
        ['printingMint', getAddressEncoder()],
        ['oneTimePrintingAuthorizationMint', getAddressEncoder()],
      ],
      { description: 'MasterEditionV1AccountData' }
    ),
    (value) => ({ ...value, key: TmKey.MasterEditionV1 })
  ) as Encoder<MasterEditionV1AccountDataArgs>;
}

export function getMasterEditionV1AccountDataDecoder(): Decoder<MasterEditionV1AccountData> {
  return getStructDecoder<MasterEditionV1AccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['supply', getU64Decoder()],
      ['maxSupply', getOptionDecoder(getU64Decoder())],
      ['printingMint', getAddressDecoder()],
      ['oneTimePrintingAuthorizationMint', getAddressDecoder()],
    ],
    { description: 'MasterEditionV1AccountData' }
  ) as Decoder<MasterEditionV1AccountData>;
}

export function getMasterEditionV1AccountDataCodec(): Codec<
  MasterEditionV1AccountDataArgs,
  MasterEditionV1AccountData
> {
  return combineCodec(
    getMasterEditionV1AccountDataEncoder(),
    getMasterEditionV1AccountDataDecoder()
  );
}
