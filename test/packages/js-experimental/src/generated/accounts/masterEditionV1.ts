/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  ProgramDerivedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import { getStringEncoder } from '@solana/codecs-strings';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
  getProgramAddress,
  getProgramDerivedAddress,
} from '../shared';
import {
  DelegateRoleArgs,
  TmKey,
  getDelegateRoleEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type MasterEditionV1<TAddress extends string = string> = Account<
  MasterEditionV1AccountData,
  TAddress
>;

export type MasterEditionV1AccountData = {
  key: TmKey;
  supply: bigint;
  maxSupply: Option<bigint>;
  printingMint: Base58EncodedAddress;
  oneTimePrintingAuthorizationMint: Base58EncodedAddress;
};

export type MasterEditionV1AccountDataArgs = {
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
  printingMint: Base58EncodedAddress;
  oneTimePrintingAuthorizationMint: Base58EncodedAddress;
};

export function getMasterEditionV1AccountDataEncoder(): Encoder<MasterEditionV1AccountDataArgs> {
  return mapEncoder(
    getStructEncoder<MasterEditionV1AccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['supply', getU64Encoder()],
        ['maxSupply', getOptionEncoder(getU64Encoder())],
        ['printingMint', getAddressEncoder()],
        ['oneTimePrintingAuthorizationMint', getAddressEncoder()],
      ],
      { description: 'MasterEditionV1AccountData' }
    ),
    (value) =>
      ({ ...value, key: TmKey.MasterEditionV1 } as MasterEditionV1AccountData)
  ) as Encoder<MasterEditionV1AccountDataArgs>;
}

export function getMasterEditionV1AccountDataDecoder(): Decoder<MasterEditionV1AccountData> {
  return getStructDecoder<MasterEditionV1AccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['supply', getU64Decoder()],
      ['maxSupply', getOptionDecoder(getU64Decoder())],
      ['printingMint', getAddressDecoder()],
      ['oneTimePrintingAuthorizationMint', getAddressDecoder()],
    ],
    { description: 'MasterEditionV1AccountData' }
  ) as Decoder<MasterEditionV1AccountData>;
}

export function getMasterEditionV1AccountDataCodec(): Codec<
  MasterEditionV1AccountDataArgs,
  MasterEditionV1AccountData
> {
  return combineCodec(
    getMasterEditionV1AccountDataEncoder(),
    getMasterEditionV1AccountDataDecoder()
  );
}

export function decodeMasterEditionV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): MasterEditionV1<TAddress> {
  return decodeAccount(encodedAccount, getMasterEditionV1AccountDataDecoder());
}

export async function fetchMasterEditionV1<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<MasterEditionV1<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeMasterEditionV1(maybeAccount);
}

export async function safeFetchMasterEditionV1<
  TAddress extends string = string
>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<MasterEditionV1<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeMasterEditionV1(maybeAccount) : null;
}

export async function fetchAllMasterEditionV1(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<MasterEditionV1[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeMasterEditionV1(maybeAccount);
  });
}

export async function safeFetchAllMasterEditionV1(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<MasterEditionV1[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      decodeMasterEditionV1(maybeAccount as EncodedAccount)
    );
}

export async function findMasterEditionV1Pda(
  context: Pick<Context, 'getProgramAddress' | 'getProgramDerivedAddress'>,
  seeds: {
    /** The role of the delegate */
    delegateRole: DelegateRoleArgs;
  }
): ProgramDerivedAddress {
  const programAddress = await getProgramAddress(
    context,
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return getProgramDerivedAddress(context, programAddress, [
    getStringEncoder({ size: 'variable' }).encode('metadata'),
    getAddressEncoder().encode(programAddress),
    getDelegateRoleEncoder().encode(seeds.delegateRole),
  ]);
}

export async function fetchMasterEditionV1FromSeeds(
  context: Pick<
    Context,
    'fetchEncodedAccount' | 'getProgramAddress' | 'getProgramDerivedAddress'
  >,
  seeds: Parameters<typeof findMasterEditionV1Pda>[1],
  options?: FetchEncodedAccountOptions
): Promise<MasterEditionV1> {
  return fetchMasterEditionV1(
    context,
    await findMasterEditionV1Pda(context, seeds)[0],
    options
  );
}

export async function safeFetchMasterEditionV1FromSeeds(
  context: Pick<
    Context,
    'fetchEncodedAccount' | 'getProgramAddress' | 'getProgramDerivedAddress'
  >,
  seeds: Parameters<typeof findMasterEditionV1Pda>[1],
  options?: FetchEncodedAccountOptions
): Promise<MasterEditionV1 | null> {
  return safeFetchMasterEditionV1(
    context,
    await findMasterEditionV1Pda(context, seeds)[0],
    options
  );
}
