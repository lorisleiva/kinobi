/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
} from '../shared';
import {
  TokenState,
  TokenStateArgs,
  getTokenStateDecoder,
  getTokenStateEncoder,
} from '../types';

export type Token<TAddress extends string = string> = Account<
  TokenAccountData,
  TAddress
>;

export type TokenAccountData = {
  mint: Base58EncodedAddress;
  owner: Base58EncodedAddress;
  amount: bigint;
  delegate: Option<Base58EncodedAddress>;
  state: TokenState;
  isNative: Option<bigint>;
  delegatedAmount: bigint;
  closeAuthority: Option<Base58EncodedAddress>;
};

export type TokenAccountDataArgs = {
  mint: Base58EncodedAddress;
  owner: Base58EncodedAddress;
  amount: number | bigint;
  delegate: OptionOrNullable<Base58EncodedAddress>;
  state: TokenStateArgs;
  isNative: OptionOrNullable<number | bigint>;
  delegatedAmount: number | bigint;
  closeAuthority: OptionOrNullable<Base58EncodedAddress>;
};

export function getTokenAccountDataEncoder(): Encoder<TokenAccountDataArgs> {
  return getStructEncoder<TokenAccountDataArgs>(
    [
      ['mint', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['amount', getU64Encoder()],
      [
        'delegate',
        getOptionEncoder(getAddressEncoder(), {
          prefix: getU32Encoder(),
          fixed: true,
        }),
      ],
      ['state', getTokenStateEncoder()],
      [
        'isNative',
        getOptionEncoder(getU64Encoder(), {
          prefix: getU32Encoder(),
          fixed: true,
        }),
      ],
      ['delegatedAmount', getU64Encoder()],
      [
        'closeAuthority',
        getOptionEncoder(getAddressEncoder(), {
          prefix: getU32Encoder(),
          fixed: true,
        }),
      ],
    ],
    { description: 'TokenAccountData' }
  ) as Encoder<TokenAccountDataArgs>;
}

export function getTokenAccountDataDecoder(): Decoder<TokenAccountData> {
  return getStructDecoder<TokenAccountData>(
    [
      ['mint', getAddressDecoder()],
      ['owner', getAddressDecoder()],
      ['amount', getU64Decoder()],
      [
        'delegate',
        getOptionDecoder(getAddressDecoder(), {
          prefix: getU32Decoder(),
          fixed: true,
        }),
      ],
      ['state', getTokenStateDecoder()],
      [
        'isNative',
        getOptionDecoder(getU64Decoder(), {
          prefix: getU32Decoder(),
          fixed: true,
        }),
      ],
      ['delegatedAmount', getU64Decoder()],
      [
        'closeAuthority',
        getOptionDecoder(getAddressDecoder(), {
          prefix: getU32Decoder(),
          fixed: true,
        }),
      ],
    ],
    { description: 'TokenAccountData' }
  ) as Decoder<TokenAccountData>;
}

export function getTokenAccountDataCodec(): Codec<
  TokenAccountDataArgs,
  TokenAccountData
> {
  return combineCodec(
    getTokenAccountDataEncoder(),
    getTokenAccountDataDecoder()
  );
}

export function decodeToken<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Token<TAddress> {
  return decodeAccount(encodedAccount, getTokenAccountDataDecoder());
}

export async function fetchToken<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<Token<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeToken(maybeAccount);
}

export async function safeFetchToken<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<Token<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeToken(maybeAccount) : null;
}

export async function fetchAllToken(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<Token[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeToken(maybeAccount);
  });
}

export async function safeFetchAllToken(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<Token[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => decodeToken(maybeAccount as EncodedAccount));
}

export function getTokenSize(): number {
  return 165;
}
