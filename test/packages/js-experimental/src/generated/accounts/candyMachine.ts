/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataDecoder,
  getCandyMachineDataEncoder,
} from '../types';

export type CandyMachine = {
  discriminator: Array<number>;
  /** Features versioning flags. */
  features: bigint;
  /** Authority address. */
  authority: Address;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: Address;
  /** The collection mint for the candy machine. */
  collectionMint: Address;
  /** Number of assets redeemed. */
  itemsRedeemed: bigint;
  /** Candy machine configuration data. */
  data: CandyMachineData;
};

export type CandyMachineArgs = {
  /** Features versioning flags. */
  features: number | bigint;
  /** Authority address. */
  authority: Address;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: Address;
  /** The collection mint for the candy machine. */
  collectionMint: Address;
  /** Number of assets redeemed. */
  itemsRedeemed: number | bigint;
  /** Candy machine configuration data. */
  data: CandyMachineDataArgs;
};

export function getCandyMachineEncoder(): Encoder<CandyMachineArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['features', getU64Encoder()],
      ['authority', getAddressEncoder()],
      ['mintAuthority', getAddressEncoder()],
      ['collectionMint', getAddressEncoder()],
      ['itemsRedeemed', getU64Encoder()],
      ['data', getCandyMachineDataEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [51, 173, 177, 113, 25, 241, 109, 189],
    })
  );
}

export function getCandyMachineDecoder(): Decoder<CandyMachine> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['features', getU64Decoder()],
    ['authority', getAddressDecoder()],
    ['mintAuthority', getAddressDecoder()],
    ['collectionMint', getAddressDecoder()],
    ['itemsRedeemed', getU64Decoder()],
    ['data', getCandyMachineDataDecoder()],
  ]);
}

export function getCandyMachineCodec(): Codec<CandyMachineArgs, CandyMachine> {
  return combineCodec(getCandyMachineEncoder(), getCandyMachineDecoder());
}

export function decodeCandyMachine<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CandyMachine, TAddress>;
export function decodeCandyMachine<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CandyMachine, TAddress>;
export function decodeCandyMachine<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CandyMachine, TAddress> | MaybeAccount<CandyMachine, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCandyMachineDecoder()
  );
}

export async function fetchCandyMachine<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CandyMachine, TAddress>> {
  const maybeAccount = await fetchMaybeCandyMachine(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCandyMachine<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CandyMachine, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCandyMachine(maybeAccount);
}

export async function fetchAllCandyMachine(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CandyMachine>[]> {
  const maybeAccounts = await fetchAllMaybeCandyMachine(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCandyMachine(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CandyMachine>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCandyMachine(maybeAccount));
}
