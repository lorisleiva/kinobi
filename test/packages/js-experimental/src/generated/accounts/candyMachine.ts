/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Account,
  Context,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from 'some-magical-place';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataDecoder,
  getCandyMachineDataEncoder,
} from '../types';

export type CandyMachine = Account<CandyMachineAccountData>;

export type CandyMachineAccountData = {
  discriminator: Array<number>;
  /** Features versioning flags. */
  features: bigint;
  /** Authority address. */
  authority: Base58EncodedAddress;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: Base58EncodedAddress;
  /** The collection mint for the candy machine. */
  collectionMint: Base58EncodedAddress;
  /** Number of assets redeemed. */
  itemsRedeemed: bigint;
  /** Candy machine configuration data. */
  data: CandyMachineData;
};

export type CandyMachineAccountDataArgs = {
  /** Features versioning flags. */
  features: number | bigint;
  /** Authority address. */
  authority: Base58EncodedAddress;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: Base58EncodedAddress;
  /** The collection mint for the candy machine. */
  collectionMint: Base58EncodedAddress;
  /** Number of assets redeemed. */
  itemsRedeemed: number | bigint;
  /** Candy machine configuration data. */
  data: CandyMachineDataArgs;
};

export function getCandyMachineAccountDataEncoder(): Encoder<CandyMachineAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<CandyMachineAccountData>(
      [
        ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
        ['features', getU64Encoder()],
        ['authority', getAddressEncoder()],
        ['mintAuthority', getAddressEncoder()],
        ['collectionMint', getAddressEncoder()],
        ['itemsRedeemed', getU64Encoder()],
        ['data', getCandyMachineDataEncoder()],
      ],
      { description: 'CandyMachineAccountData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [51, 173, 177, 113, 25, 241, 109, 189],
      } as CandyMachineAccountData)
  ) as Encoder<CandyMachineAccountDataArgs>;
}

export function getCandyMachineAccountDataDecoder(): Decoder<CandyMachineAccountData> {
  return getStructDecoder<CandyMachineAccountData>(
    [
      ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
      ['features', getU64Decoder()],
      ['authority', getAddressDecoder()],
      ['mintAuthority', getAddressDecoder()],
      ['collectionMint', getAddressDecoder()],
      ['itemsRedeemed', getU64Decoder()],
      ['data', getCandyMachineDataDecoder()],
    ],
    { description: 'CandyMachineAccountData' }
  ) as Decoder<CandyMachineAccountData>;
}

export function getCandyMachineAccountDataCodec(): Codec<
  CandyMachineAccountDataArgs,
  CandyMachineAccountData
> {
  return combineCodec(
    getCandyMachineAccountDataEncoder(),
    getCandyMachineAccountDataDecoder()
  );
}

export function deserializeCandyMachine(rawAccount: RpcAccount): CandyMachine {
  return deserializeAccount(rawAccount, getCandyMachineAccountDataEncoder());
}

export async function fetchCandyMachine(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<CandyMachine> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'CandyMachine');
  return deserializeCandyMachine(maybeAccount);
}

export async function safeFetchCandyMachine(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<CandyMachine | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists ? deserializeCandyMachine(maybeAccount) : null;
}

export async function fetchAllCandyMachine(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<CandyMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CandyMachine');
    return deserializeCandyMachine(maybeAccount);
  });
}

export async function safeFetchAllCandyMachine(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<CandyMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCandyMachine(maybeAccount as RpcAccount));
}

export function getCandyMachineGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      features: number | bigint;
      authority: Base58EncodedAddress;
      mintAuthority: Base58EncodedAddress;
      collectionMint: Base58EncodedAddress;
      itemsRedeemed: number | bigint;
      data: CandyMachineDataArgs;
    }>({
      discriminator: [0, getArrayEncoder(getU8Encoder(), { size: 8 })],
      features: [8, getU64Encoder()],
      authority: [16, getAddressEncoder()],
      mintAuthority: [48, getAddressEncoder()],
      collectionMint: [80, getAddressEncoder()],
      itemsRedeemed: [112, getU64Encoder()],
      data: [120, getCandyMachineDataEncoder()],
    })
    .deserializeUsing<CandyMachine>((account) =>
      deserializeCandyMachine(account)
    )
    .whereField('discriminator', [51, 173, 177, 113, 25, 241, 109, 189]);
}
