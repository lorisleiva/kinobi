/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  Account,
  Context,
  GpaBuilder,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from 'some-magical-place';
import { gpaBuilder } from 'umi';

export type Multisig = Account<MultisigAccountData>;

export type MultisigAccountData = {
  m: number;
  n: number;
  isInitialized: boolean;
  signers: Array<Base58EncodedAddress>;
};

export type MultisigAccountDataArgs = MultisigAccountData;

export function getMultisigAccountDataEncoder(): Encoder<MultisigAccountDataArgs> {
  return getStructEncoder<MultisigAccountData>(
    [
      ['m', getU8Encoder()],
      ['n', getU8Encoder()],
      ['isInitialized', getBooleanEncoder()],
      ['signers', getArrayEncoder(getAddressEncoder(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Encoder<MultisigAccountDataArgs>;
}

export function getMultisigAccountDataDecoder(): Decoder<MultisigAccountData> {
  return getStructDecoder<MultisigAccountData>(
    [
      ['m', getU8Decoder()],
      ['n', getU8Decoder()],
      ['isInitialized', getBooleanDecoder()],
      ['signers', getArrayDecoder(getAddressDecoder(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Decoder<MultisigAccountData>;
}

export function getMultisigAccountDataCodec(): Codec<
  MultisigAccountDataArgs,
  MultisigAccountData
> {
  return combineCodec(
    getMultisigAccountDataEncoder(),
    getMultisigAccountDataDecoder()
  );
}

export function deserializeMultisig(rawAccount: RpcAccount): Multisig {
  return deserializeAccount(rawAccount, getMultisigAccountDataEncoder());
}

export async function fetchMultisig(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<Multisig> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'Multisig');
  return deserializeMultisig(maybeAccount);
}

export async function safeFetchMultisig(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<Multisig | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists ? deserializeMultisig(maybeAccount) : null;
}

export async function fetchAllMultisig(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Multisig');
    return deserializeMultisig(maybeAccount);
  });
}

export async function safeFetchAllMultisig(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeMultisig(maybeAccount as RpcAccount));
}

export function getMultisigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      m: number;
      n: number;
      isInitialized: boolean;
      signers: Array<Base58EncodedAddress>;
    }>({
      m: [0, getU8Encoder()],
      n: [1, getU8Encoder()],
      isInitialized: [2, getBooleanEncoder()],
      signers: [3, getArrayEncoder(getAddressEncoder(), { size: 11 })],
    })
    .deserializeUsing<Multisig>((account) => deserializeMultisig(account));
}
export function getMultisigSize(): number {
  return 355;
}
