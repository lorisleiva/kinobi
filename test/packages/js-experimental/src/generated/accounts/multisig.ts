/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from 'umi';
import { Serializer } from 'umiSerializers';
import { Account } from '../shared';

export type Multisig = Account<MultisigAccountData>;

export type MultisigAccountData = {
  m: number;
  n: number;
  isInitialized: boolean;
  signers: Array<Base58EncodedAddress>;
};

export type MultisigAccountDataArgs = MultisigAccountData;

export function getMultisigAccountDataEncoder(): Encoder<MultisigAccountDataArgs> {
  return getStructEncoder<MultisigAccountData>(
    [
      ['m', getU8Encoder()],
      ['n', getU8Encoder()],
      ['isInitialized', getBooleanEncoder()],
      ['signers', getArrayEncoder(getAddressEncoder(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Encoder<MultisigAccountDataArgs>;
}

export function getMultisigAccountDataDecoder(): Decoder<MultisigAccountData> {
  return getStructDecoder<MultisigAccountData>(
    [
      ['m', getU8Decoder()],
      ['n', getU8Decoder()],
      ['isInitialized', getBooleanDecoder()],
      ['signers', getArrayDecoder(getAddressDecoder(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Decoder<MultisigAccountData>;
}

export function getMultisigAccountDataCodec(): Codec<
  MultisigAccountDataArgs,
  MultisigAccountData
> {
  return combineCodec(
    getMultisigAccountDataEncoder(),
    getMultisigAccountDataDecoder()
  );
}
