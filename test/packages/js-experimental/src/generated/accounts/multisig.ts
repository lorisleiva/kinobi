/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
} from '../shared';

export type Multisig<TAddress extends string = string> = Account<
  MultisigAccountData,
  TAddress
>;

export type MultisigAccountData = {
  m: number;
  n: number;
  isInitialized: boolean;
  signers: Array<Base58EncodedAddress>;
};

export type MultisigAccountDataArgs = MultisigAccountData;

export function getMultisigAccountDataEncoder(): Encoder<MultisigAccountDataArgs> {
  return getStructEncoder<MultisigAccountData>(
    [
      ['m', getU8Encoder()],
      ['n', getU8Encoder()],
      ['isInitialized', getBooleanEncoder()],
      ['signers', getArrayEncoder(getAddressEncoder(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Encoder<MultisigAccountDataArgs>;
}

export function getMultisigAccountDataDecoder(): Decoder<MultisigAccountData> {
  return getStructDecoder<MultisigAccountData>(
    [
      ['m', getU8Decoder()],
      ['n', getU8Decoder()],
      ['isInitialized', getBooleanDecoder()],
      ['signers', getArrayDecoder(getAddressDecoder(), { size: 11 })],
    ],
    { description: 'MultisigAccountData' }
  ) as Decoder<MultisigAccountData>;
}

export function getMultisigAccountDataCodec(): Codec<
  MultisigAccountDataArgs,
  MultisigAccountData
> {
  return combineCodec(
    getMultisigAccountDataEncoder(),
    getMultisigAccountDataDecoder()
  );
}

export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Multisig<TAddress> {
  return decodeAccount(encodedAccount, getMultisigAccountDataDecoder());
}

export async function fetchMultisig<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<Multisig<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeMultisig(maybeAccount);
}

export async function safeFetchMultisig<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<Multisig<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeMultisig(maybeAccount) : null;
}

export async function fetchAllMultisig(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeMultisig(maybeAccount);
  });
}

export async function safeFetchAllMultisig(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<Multisig[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => decodeMultisig(maybeAccount as EncodedAccount));
}

export function getMultisigSize(): number {
  return 355;
}
