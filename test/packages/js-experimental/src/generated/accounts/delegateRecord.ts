/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  ProgramDerivedAddress,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import { getStringEncoder } from '@solana/codecs-strings';
import {
  Account,
  Context,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from 'some-magical-place';
import {
  DelegateRole,
  DelegateRoleArgs,
  TmKey,
  TmKeyArgs,
  getDelegateRoleDecoder,
  getDelegateRoleEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type DelegateRecord = Account<DelegateRecordAccountData>;

export type DelegateRecordAccountData = {
  key: TmKey;
  role: DelegateRole;
  bump: number;
};

export type DelegateRecordAccountDataArgs = {
  role: DelegateRoleArgs;
  bump: number;
};

export function getDelegateRecordAccountDataEncoder(): Encoder<DelegateRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<DelegateRecordAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['role', getDelegateRoleEncoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'DelegateRecordAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.Delegate } as DelegateRecordAccountData)
  ) as Encoder<DelegateRecordAccountDataArgs>;
}

export function getDelegateRecordAccountDataDecoder(): Decoder<DelegateRecordAccountData> {
  return getStructDecoder<DelegateRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['role', getDelegateRoleDecoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'DelegateRecordAccountData' }
  ) as Decoder<DelegateRecordAccountData>;
}

export function getDelegateRecordAccountDataCodec(): Codec<
  DelegateRecordAccountDataArgs,
  DelegateRecordAccountData
> {
  return combineCodec(
    getDelegateRecordAccountDataEncoder(),
    getDelegateRecordAccountDataDecoder()
  );
}

export function deserializeDelegateRecord(
  rawAccount: RpcAccount
): DelegateRecord {
  return deserializeAccount(rawAccount, getDelegateRecordAccountDataEncoder());
}

export async function fetchDelegateRecord(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<DelegateRecord> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  assertAccountExists(maybeAccount, 'DelegateRecord');
  return deserializeDelegateRecord(maybeAccount);
}

export async function safeFetchDelegateRecord(
  context: Pick<Context, 'rpc'>,
  address: Base58EncodedAddress,
  options?: RpcGetAccountOptions
): Promise<DelegateRecord | null> {
  const maybeAccount = await context.rpc.getAccount(address, options);
  return maybeAccount.exists ? deserializeDelegateRecord(maybeAccount) : null;
}

export async function fetchAllDelegateRecord(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<DelegateRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'DelegateRecord');
    return deserializeDelegateRecord(maybeAccount);
  });
}

export async function safeFetchAllDelegateRecord(
  context: Pick<Context, 'rpc'>,
  addresses: Array<Base58EncodedAddress>,
  options?: RpcGetAccountsOptions
): Promise<DelegateRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeDelegateRecord(maybeAccount as RpcAccount)
    );
}

export function getDelegateRecordGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ key: TmKeyArgs; role: DelegateRoleArgs; bump: number }>({
      key: [0, getTmKeyEncoder()],
      role: [1, getDelegateRoleEncoder()],
      bump: [2, getU8Encoder()],
    })
    .deserializeUsing<DelegateRecord>((account) =>
      deserializeDelegateRecord(account)
    )
    .whereField('key', TmKey.Delegate);
}

export function getDelegateRecordSize(): number {
  return 282;
}

export function findDelegateRecordPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The delegate role */
    role: DelegateRoleArgs;
  }
): ProgramDerivedAddress {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return context.eddsa.findPda(programId, [
    getStringEncoder({ size: 'variable' }).encode('delegate_record'),
    getAddressEncoder().encode(programId),
    getDelegateRoleEncoder().encode(seeds.role),
  ]);
}

export async function fetchDelegateRecordFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findDelegateRecordPda>[1],
  options?: RpcGetAccountOptions
): Promise<DelegateRecord> {
  return fetchDelegateRecord(
    context,
    findDelegateRecordPda(context, seeds),
    options
  );
}

export async function safeFetchDelegateRecordFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findDelegateRecordPda>[1],
  options?: RpcGetAccountOptions
): Promise<DelegateRecord | null> {
  return safeFetchDelegateRecord(
    context,
    findDelegateRecordPda(context, seeds),
    options
  );
}
