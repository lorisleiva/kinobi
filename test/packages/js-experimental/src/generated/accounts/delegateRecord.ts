/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/codecs';
import { DelegateRecordSeeds, findDelegateRecordPda } from '../pdas';
import {
  DelegateRole,
  DelegateRoleArgs,
  TmKey,
  getDelegateRoleDecoder,
  getDelegateRoleEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type DelegateRecord = { key: TmKey; role: DelegateRole; bump: number };

export type DelegateRecordArgs = { role: DelegateRoleArgs; bump: number };

export function getDelegateRecordEncoder(): Encoder<DelegateRecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getTmKeyEncoder()],
      ['role', getDelegateRoleEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, key: TmKey.Delegate })
  );
}

export function getDelegateRecordDecoder(): Decoder<DelegateRecord> {
  return getStructDecoder([
    ['key', getTmKeyDecoder()],
    ['role', getDelegateRoleDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getDelegateRecordCodec(): Codec<
  DelegateRecordArgs,
  DelegateRecord
> {
  return combineCodec(getDelegateRecordEncoder(), getDelegateRecordDecoder());
}

export function decodeDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DelegateRecord, TAddress>;
export function decodeDelegateRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DelegateRecord, TAddress>;
export function decodeDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<DelegateRecord, TAddress> | MaybeAccount<DelegateRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDelegateRecordDecoder()
  );
}

export async function fetchDelegateRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DelegateRecord, TAddress>> {
  const maybeAccount = await fetchMaybeDelegateRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDelegateRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DelegateRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDelegateRecord(maybeAccount);
}

export async function fetchAllDelegateRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DelegateRecord>[]> {
  const maybeAccounts = await fetchAllMaybeDelegateRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDelegateRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DelegateRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDelegateRecord(maybeAccount)
  );
}

export function getDelegateRecordSize(): number {
  return 282;
}

export async function fetchDelegateRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: DelegateRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<DelegateRecord>> {
  const maybeAccount = await fetchMaybeDelegateRecordFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDelegateRecordFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: DelegateRecordSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<DelegateRecord>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findDelegateRecordPda(seeds, { programAddress });
  return await fetchMaybeDelegateRecord(rpc, address, fetchConfig);
}
