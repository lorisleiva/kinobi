/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  ProgramDerivedAddress,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import { getStringEncoder } from '@solana/codecs-strings';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
  getProgramAddress,
  getProgramDerivedAddress,
} from '../shared';
import {
  DelegateRole,
  DelegateRoleArgs,
  TmKey,
  getDelegateRoleDecoder,
  getDelegateRoleEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type DelegateRecord<TAddress extends string = string> = Account<
  DelegateRecordAccountData,
  TAddress
>;

export type DelegateRecordAccountData = {
  key: TmKey;
  role: DelegateRole;
  bump: number;
};

export type DelegateRecordAccountDataArgs = {
  role: DelegateRoleArgs;
  bump: number;
};

export function getDelegateRecordAccountDataEncoder(): Encoder<DelegateRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<DelegateRecordAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['role', getDelegateRoleEncoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'DelegateRecordAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.Delegate } as DelegateRecordAccountData)
  ) as Encoder<DelegateRecordAccountDataArgs>;
}

export function getDelegateRecordAccountDataDecoder(): Decoder<DelegateRecordAccountData> {
  return getStructDecoder<DelegateRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['role', getDelegateRoleDecoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'DelegateRecordAccountData' }
  ) as Decoder<DelegateRecordAccountData>;
}

export function getDelegateRecordAccountDataCodec(): Codec<
  DelegateRecordAccountDataArgs,
  DelegateRecordAccountData
> {
  return combineCodec(
    getDelegateRecordAccountDataEncoder(),
    getDelegateRecordAccountDataDecoder()
  );
}

export function decodeDelegateRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): DelegateRecord<TAddress> {
  return decodeAccount(encodedAccount, getDelegateRecordAccountDataDecoder());
}

export async function fetchDelegateRecord<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<DelegateRecord<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeDelegateRecord(maybeAccount);
}

export async function safeFetchDelegateRecord<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Base58EncodedAddress<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<DelegateRecord<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeDelegateRecord(maybeAccount) : null;
}

export async function fetchAllDelegateRecord(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<DelegateRecord[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeDelegateRecord(maybeAccount);
  });
}

export async function safeFetchAllDelegateRecord(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Base58EncodedAddress>,
  options?: FetchEncodedAccountsOptions
): Promise<DelegateRecord[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      decodeDelegateRecord(maybeAccount as EncodedAccount)
    );
}

export function getDelegateRecordSize(): number {
  return 282;
}

export async function findDelegateRecordPda(
  context: Pick<Context, 'getProgramAddress' | 'getProgramDerivedAddress'>,
  seeds: {
    /** The delegate role */
    role: DelegateRoleArgs;
  }
): ProgramDerivedAddress {
  const programAddress = await getProgramAddress(
    context,
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return getProgramDerivedAddress(context, programAddress, [
    getStringEncoder({ size: 'variable' }).encode('delegate_record'),
    getAddressEncoder().encode(programAddress),
    getDelegateRoleEncoder().encode(seeds.role),
  ]);
}

export async function fetchDelegateRecordFromSeeds(
  context: Pick<
    Context,
    'fetchEncodedAccount' | 'getProgramAddress' | 'getProgramDerivedAddress'
  >,
  seeds: Parameters<typeof findDelegateRecordPda>[1],
  options?: FetchEncodedAccountOptions
): Promise<DelegateRecord> {
  return fetchDelegateRecord(
    context,
    await findDelegateRecordPda(context, seeds)[0],
    options
  );
}

export async function safeFetchDelegateRecordFromSeeds(
  context: Pick<
    Context,
    'fetchEncodedAccount' | 'getProgramAddress' | 'getProgramDerivedAddress'
  >,
  seeds: Parameters<typeof findDelegateRecordPda>[1],
  options?: FetchEncodedAccountOptions
): Promise<DelegateRecord | null> {
  return safeFetchDelegateRecord(
    context,
    await findDelegateRecordPda(context, seeds)[0],
    options
  );
}
