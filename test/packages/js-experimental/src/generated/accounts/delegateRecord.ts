/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import { getStringEncoder } from '@solana/codecs-strings';
import {
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from 'umi';
import { Serializer, publicKey as publicKeySerializer } from 'umiSerializers';
import { Account } from '../shared';
import {
  DelegateRole,
  DelegateRoleArgs,
  TmKey,
  TmKeyArgs,
  getDelegateRoleDecoder,
  getDelegateRoleEncoder,
  getTmKeyDecoder,
  getTmKeyEncoder,
} from '../types';

export type DelegateRecord = Account<DelegateRecordAccountData>;

export type DelegateRecordAccountData = {
  key: TmKey;
  role: DelegateRole;
  bump: number;
};

export type DelegateRecordAccountDataArgs = {
  role: DelegateRoleArgs;
  bump: number;
};

export function getDelegateRecordAccountDataEncoder(): Encoder<DelegateRecordAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<DelegateRecordAccountData>(
      [
        ['key', getTmKeyEncoder()],
        ['role', getDelegateRoleEncoder()],
        ['bump', getU8Encoder()],
      ],
      { description: 'DelegateRecordAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.Delegate } as DelegateRecordAccountData)
  ) as Encoder<DelegateRecordAccountDataArgs>;
}

export function getDelegateRecordAccountDataDecoder(): Decoder<DelegateRecordAccountData> {
  return getStructDecoder<DelegateRecordAccountData>(
    [
      ['key', getTmKeyDecoder()],
      ['role', getDelegateRoleDecoder()],
      ['bump', getU8Decoder()],
    ],
    { description: 'DelegateRecordAccountData' }
  ) as Decoder<DelegateRecordAccountData>;
}

export function getDelegateRecordAccountDataCodec(): Codec<
  DelegateRecordAccountDataArgs,
  DelegateRecordAccountData
> {
  return combineCodec(
    getDelegateRecordAccountDataEncoder(),
    getDelegateRecordAccountDataDecoder()
  );
}
