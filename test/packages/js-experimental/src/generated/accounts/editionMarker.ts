/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
} from '../shared';
import { TmKey, TmKeyArgs, getTmKeyDecoder, getTmKeyEncoder } from '../types';

export type EditionMarker<TAddress extends string = string> = Account<
  EditionMarkerAccountData,
  TAddress
>;

export type EditionMarkerAccountData = { key: TmKey; ledger: Array<number> };

export type EditionMarkerAccountDataArgs = { ledger: Array<number> };

export function getEditionMarkerAccountDataEncoder(): Encoder<EditionMarkerAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<{ key: TmKeyArgs; ledger: Array<number> }>([
      ['key', getTmKeyEncoder()],
      ['ledger', getArrayEncoder(getU8Encoder(), { size: 31 })],
    ]),
    (value) => ({ ...value, key: TmKey.EditionMarker })
  ) as Encoder<EditionMarkerAccountDataArgs>;
}

export function getEditionMarkerAccountDataDecoder(): Decoder<EditionMarkerAccountData> {
  return getStructDecoder<EditionMarkerAccountData>([
    ['key', getTmKeyDecoder()],
    ['ledger', getArrayDecoder(getU8Decoder(), { size: 31 })],
  ]) as Decoder<EditionMarkerAccountData>;
}

export function getEditionMarkerAccountDataCodec(): Codec<
  EditionMarkerAccountDataArgs,
  EditionMarkerAccountData
> {
  return combineCodec(
    getEditionMarkerAccountDataEncoder(),
    getEditionMarkerAccountDataDecoder()
  );
}

export function decodeEditionMarker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): EditionMarker<TAddress> {
  return decodeAccount(encodedAccount, getEditionMarkerAccountDataDecoder());
}

export async function fetchEditionMarker<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<EditionMarker<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeEditionMarker(maybeAccount);
}

export async function safeFetchEditionMarker<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<EditionMarker<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeEditionMarker(maybeAccount) : null;
}

export async function fetchAllEditionMarker(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchEncodedAccountsOptions
): Promise<EditionMarker[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeEditionMarker(maybeAccount);
  });
}

export async function safeFetchAllEditionMarker(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchEncodedAccountsOptions
): Promise<EditionMarker[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => decodeEditionMarker(maybeAccount as EncodedAccount));
}

export function getEditionMarkerSize(): number {
  return 32;
}
