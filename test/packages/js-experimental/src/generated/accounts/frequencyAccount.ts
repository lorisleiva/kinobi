/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { findFrequencyAccountPda } from '../pdas';
import { TaKey } from '../types';

export type FrequencyAccount = {
  /** Test with only one line. */
  key: bigint;
  /**
   * Test with multiple lines
   * and this is the second line.
   */
  lastUpdate: bigint;
  period: bigint;
};

export type FrequencyAccountArgs = {
  /**
   * Test with multiple lines
   * and this is the second line.
   */
  lastUpdate: number | bigint;
  period: number | bigint;
};

export function getFrequencyAccountEncoder(): Encoder<FrequencyAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getU64Encoder()],
      ['lastUpdate', getI64Encoder()],
      ['period', getI64Encoder()],
    ]),
    (value) => ({ ...value, key: TaKey.Frequency })
  );
}

export function getFrequencyAccountDecoder(): Decoder<FrequencyAccount> {
  return getStructDecoder([
    ['key', getU64Decoder()],
    ['lastUpdate', getI64Decoder()],
    ['period', getI64Decoder()],
  ]);
}

export function getFrequencyAccountCodec(): Codec<
  FrequencyAccountArgs,
  FrequencyAccount
> {
  return combineCodec(
    getFrequencyAccountEncoder(),
    getFrequencyAccountDecoder()
  );
}

export function decodeFrequencyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<FrequencyAccount, TAddress>;
export function decodeFrequencyAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<FrequencyAccount, TAddress>;
export function decodeFrequencyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<FrequencyAccount, TAddress>
  | MaybeAccount<FrequencyAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFrequencyAccountDecoder()
  );
}

export async function fetchFrequencyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<FrequencyAccount, TAddress>> {
  const maybeAccount = await fetchMaybeFrequencyAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFrequencyAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<FrequencyAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFrequencyAccount(maybeAccount);
}

export async function fetchAllFrequencyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<FrequencyAccount>[]> {
  const maybeAccounts = await fetchAllMaybeFrequencyAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFrequencyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<FrequencyAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeFrequencyAccount(maybeAccount)
  );
}

export function getFrequencyAccountSize(): number {
  return 24;
}

export async function fetchFrequencyAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<FrequencyAccount>> {
  const maybeAccount = await fetchMaybeFrequencyAccountFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFrequencyAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<FrequencyAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findFrequencyAccountPda({ programAddress });
  return await fetchMaybeFrequencyAccount(rpc, address, fetchConfig);
}
