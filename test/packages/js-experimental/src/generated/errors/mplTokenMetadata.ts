/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum MplTokenMetadataProgramErrorCode {
  /** InstructionUnpackError: Failed to unpack instruction data */
  INSTRUCTION_UNPACK_ERROR = 0x0, // 0
  /** InstructionPackError: Failed to pack instruction data */
  INSTRUCTION_PACK_ERROR = 0x1, // 1
  /** NotRentExempt: Lamport balance below rent-exempt threshold */
  NOT_RENT_EXEMPT = 0x2, // 2
  /** AlreadyInitialized: Already initialized */
  ALREADY_INITIALIZED = 0x3, // 3
  /** Uninitialized: Uninitialized */
  UNINITIALIZED = 0x4, // 4
  /** InvalidMetadataKey:  Metadata's key must match seed of ['metadata', program id, mint] provided */
  INVALID_METADATA_KEY = 0x5, // 5
  /** InvalidEditionKey: Edition's key must match seed of ['metadata', program id, name, 'edition'] provided */
  INVALID_EDITION_KEY = 0x6, // 6
  /** UpdateAuthorityIncorrect: Update Authority given does not match */
  UPDATE_AUTHORITY_INCORRECT = 0x7, // 7
  /** UpdateAuthorityIsNotSigner: Update Authority needs to be signer to update metadata */
  UPDATE_AUTHORITY_IS_NOT_SIGNER = 0x8, // 8
  /** NotMintAuthority: You must be the mint authority and signer on this transaction */
  NOT_MINT_AUTHORITY = 0x9, // 9
  /** InvalidMintAuthority: Mint authority provided does not match the authority on the mint */
  INVALID_MINT_AUTHORITY = 0xa, // 10
  /** NameTooLong: Name too long */
  NAME_TOO_LONG = 0xb, // 11
  /** SymbolTooLong: Symbol too long */
  SYMBOL_TOO_LONG = 0xc, // 12
  /** UriTooLong: URI too long */
  URI_TOO_LONG = 0xd, // 13
  /** UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner: Update authority must be equivalent to the metadata's authority and also signer of this transaction */
  UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER = 0xe, // 14
  /** MintMismatch: Mint given does not match mint on Metadata */
  MINT_MISMATCH = 0xf, // 15
  /** EditionsMustHaveExactlyOneToken: Editions must have exactly one token */
  EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN = 0x10, // 16
  /** MaxEditionsMintedAlready: Maximum editions printed already */
  MAX_EDITIONS_MINTED_ALREADY = 0x11, // 17
  /** TokenMintToFailed: Token mint to failed */
  TOKEN_MINT_TO_FAILED = 0x12, // 18
  /** MasterRecordMismatch: The master edition record passed must match the master record on the edition given */
  MASTER_RECORD_MISMATCH = 0x13, // 19
  /** DestinationMintMismatch: The destination account does not have the right mint */
  DESTINATION_MINT_MISMATCH = 0x14, // 20
  /** EditionAlreadyMinted: An edition can only mint one of its kind! */
  EDITION_ALREADY_MINTED = 0x15, // 21
  /** PrintingMintDecimalsShouldBeZero: Printing mint decimals should be zero */
  PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO = 0x16, // 22
  /** OneTimePrintingAuthorizationMintDecimalsShouldBeZero: OneTimePrintingAuthorization mint decimals should be zero */
  ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO = 0x17, // 23
  /** EditionMintDecimalsShouldBeZero: EditionMintDecimalsShouldBeZero */
  EDITION_MINT_DECIMALS_SHOULD_BE_ZERO = 0x18, // 24
  /** TokenBurnFailed: Token burn failed */
  TOKEN_BURN_FAILED = 0x19, // 25
  /** TokenAccountOneTimeAuthMintMismatch: The One Time authorization mint does not match that on the token account! */
  TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH = 0x1a, // 26
  /** DerivedKeyInvalid: Derived key invalid */
  DERIVED_KEY_INVALID = 0x1b, // 27
  /** PrintingMintMismatch: The Printing mint does not match that on the master edition! */
  PRINTING_MINT_MISMATCH = 0x1c, // 28
  /** OneTimePrintingAuthMintMismatch: The One Time Printing Auth mint does not match that on the master edition! */
  ONE_TIME_PRINTING_AUTH_MINT_MISMATCH = 0x1d, // 29
  /** TokenAccountMintMismatch: The mint of the token account does not match the Printing mint! */
  TOKEN_ACCOUNT_MINT_MISMATCH = 0x1e, // 30
  /** TokenAccountMintMismatchV2: The mint of the token account does not match the master metadata mint! */
  TOKEN_ACCOUNT_MINT_MISMATCH_V2 = 0x1f, // 31
  /** NotEnoughTokens: Not enough tokens to mint a limited edition */
  NOT_ENOUGH_TOKENS = 0x20, // 32
  /** PrintingMintAuthorizationAccountMismatch: The mint on your authorization token holding account does not match your Printing mint! */
  PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH = 0x21, // 33
  /** AuthorizationTokenAccountOwnerMismatch: The authorization token account has a different owner than the update authority for the master edition! */
  AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH = 0x22, // 34
  /** Disabled: This feature is currently disabled. */
  DISABLED = 0x23, // 35
  /** CreatorsTooLong: Creators list too long */
  CREATORS_TOO_LONG = 0x24, // 36
  /** CreatorsMustBeAtleastOne: Creators must be at least one if set */
  CREATORS_MUST_BE_ATLEAST_ONE = 0x25, // 37
  /** MustBeOneOfCreators: If using a creators array, you must be one of the creators listed */
  MUST_BE_ONE_OF_CREATORS = 0x26, // 38
  /** NoCreatorsPresentOnMetadata: This metadata does not have creators */
  NO_CREATORS_PRESENT_ON_METADATA = 0x27, // 39
  /** CreatorNotFound: This creator address was not found */
  CREATOR_NOT_FOUND = 0x28, // 40
  /** InvalidBasisPoints: Basis points cannot be more than 10000 */
  INVALID_BASIS_POINTS = 0x29, // 41
  /** PrimarySaleCanOnlyBeFlippedToTrue: Primary sale can only be flipped to true and is immutable */
  PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE = 0x2a, // 42
  /** OwnerMismatch: Owner does not match that on the account given */
  OWNER_MISMATCH = 0x2b, // 43
  /** NoBalanceInAccountForAuthorization: This account has no tokens to be used for authorization */
  NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION = 0x2c, // 44
  /** ShareTotalMustBe100: Share total must equal 100 for creator array */
  SHARE_TOTAL_MUST_BE100 = 0x2d, // 45
  /** ReservationExists: This reservation list already exists! */
  RESERVATION_EXISTS = 0x2e, // 46
  /** ReservationDoesNotExist: This reservation list does not exist! */
  RESERVATION_DOES_NOT_EXIST = 0x2f, // 47
  /** ReservationNotSet: This reservation list exists but was never set with reservations */
  RESERVATION_NOT_SET = 0x30, // 48
  /** ReservationAlreadyMade: This reservation list has already been set! */
  RESERVATION_ALREADY_MADE = 0x31, // 49
  /** BeyondMaxAddressSize: Provided more addresses than max allowed in single reservation */
  BEYOND_MAX_ADDRESS_SIZE = 0x32, // 50
  /** NumericalOverflowError: NumericalOverflowError */
  NUMERICAL_OVERFLOW_ERROR = 0x33, // 51
  /** ReservationBreachesMaximumSupply: This reservation would go beyond the maximum supply of the master edition! */
  RESERVATION_BREACHES_MAXIMUM_SUPPLY = 0x34, // 52
  /** AddressNotInReservation: Address not in reservation! */
  ADDRESS_NOT_IN_RESERVATION = 0x35, // 53
  /** CannotVerifyAnotherCreator: You cannot unilaterally verify another creator, they must sign */
  CANNOT_VERIFY_ANOTHER_CREATOR = 0x36, // 54
  /** CannotUnverifyAnotherCreator: You cannot unilaterally unverify another creator */
  CANNOT_UNVERIFY_ANOTHER_CREATOR = 0x37, // 55
  /** SpotMismatch: In initial reservation setting, spots remaining should equal total spots */
  SPOT_MISMATCH = 0x38, // 56
  /** IncorrectOwner: Incorrect account owner */
  INCORRECT_OWNER = 0x39, // 57
  /** PrintingWouldBreachMaximumSupply: printing these tokens would breach the maximum supply limit of the master edition */
  PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY = 0x3a, // 58
  /** DataIsImmutable: Data is immutable */
  DATA_IS_IMMUTABLE = 0x3b, // 59
  /** DuplicateCreatorAddress: No duplicate creator addresses */
  DUPLICATE_CREATOR_ADDRESS = 0x3c, // 60
  /** ReservationSpotsRemainingShouldMatchTotalSpotsAtStart: Reservation spots remaining should match total spots when first being created */
  RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START = 0x3d, // 61
  /** InvalidTokenProgram: Invalid token program */
  INVALID_TOKEN_PROGRAM = 0x3e, // 62
  /** DataTypeMismatch: Data type mismatch */
  DATA_TYPE_MISMATCH = 0x3f, // 63
  /** BeyondAlottedAddressSize: Beyond alotted address size in reservation! */
  BEYOND_ALOTTED_ADDRESS_SIZE = 0x40, // 64
  /** ReservationNotComplete: The reservation has only been partially alotted */
  RESERVATION_NOT_COMPLETE = 0x41, // 65
  /** TriedToReplaceAnExistingReservation: You cannot splice over an existing reservation! */
  TRIED_TO_REPLACE_AN_EXISTING_RESERVATION = 0x42, // 66
  /** InvalidOperation: Invalid operation */
  INVALID_OPERATION = 0x43, // 67
  /** InvalidOwner: Invalid Owner */
  INVALID_OWNER = 0x44, // 68
  /** PrintingMintSupplyMustBeZeroForConversion: Printing mint supply must be zero for conversion */
  PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION = 0x45, // 69
  /** OneTimeAuthMintSupplyMustBeZeroForConversion: One Time Auth mint supply must be zero for conversion */
  ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION = 0x46, // 70
  /** InvalidEditionIndex: You tried to insert one edition too many into an edition mark pda */
  INVALID_EDITION_INDEX = 0x47, // 71
  /** ReservationArrayShouldBeSizeOne: In the legacy system the reservation needs to be of size one for cpu limit reasons */
  RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE = 0x48, // 72
  /** IsMutableCanOnlyBeFlippedToFalse: Is Mutable can only be flipped to false */
  IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE = 0x49, // 73
  /** CollectionCannotBeVerifiedInThisInstruction: Collection cannot be verified in this instruction */
  COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION = 0x4a, // 74
  /** Removed: This instruction was deprecated in a previous release and is now removed */
  REMOVED = 0x4b, // 75
  /** MustBeBurned: This token use method is burn and there are no remaining uses, it must be burned */
  MUST_BE_BURNED = 0x4c, // 76
  /** InvalidUseMethod: This use method is invalid */
  INVALID_USE_METHOD = 0x4d, // 77
  /** CannotChangeUseMethodAfterFirstUse: Cannot Change Use Method after the first use */
  CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE = 0x4e, // 78
  /** CannotChangeUsesAfterFirstUse: Cannot Change Remaining or Available uses after the first use */
  CANNOT_CHANGE_USES_AFTER_FIRST_USE = 0x4f, // 79
  /** CollectionNotFound: Collection Not Found on Metadata */
  COLLECTION_NOT_FOUND = 0x50, // 80
  /** InvalidCollectionUpdateAuthority: Collection Update Authority is invalid */
  INVALID_COLLECTION_UPDATE_AUTHORITY = 0x51, // 81
  /** CollectionMustBeAUniqueMasterEdition: Collection Must Be a Unique Master Edition v2 */
  COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION = 0x52, // 82
  /** UseAuthorityRecordAlreadyExists: The Use Authority Record Already Exists, to modify it Revoke, then Approve */
  USE_AUTHORITY_RECORD_ALREADY_EXISTS = 0x53, // 83
  /** UseAuthorityRecordAlreadyRevoked: The Use Authority Record is empty or already revoked */
  USE_AUTHORITY_RECORD_ALREADY_REVOKED = 0x54, // 84
  /** Unusable: This token has no uses */
  UNUSABLE = 0x55, // 85
  /** NotEnoughUses: There are not enough Uses left on this token. */
  NOT_ENOUGH_USES = 0x56, // 86
  /** CollectionAuthorityRecordAlreadyExists: This Collection Authority Record Already Exists. */
  COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS = 0x57, // 87
  /** CollectionAuthorityDoesNotExist: This Collection Authority Record Does Not Exist. */
  COLLECTION_AUTHORITY_DOES_NOT_EXIST = 0x58, // 88
  /** InvalidUseAuthorityRecord: This Use Authority Record is invalid. */
  INVALID_USE_AUTHORITY_RECORD = 0x59, // 89
  /** InvalidCollectionAuthorityRecord: This Collection Authority Record is invalid. */
  INVALID_COLLECTION_AUTHORITY_RECORD = 0x5a, // 90
  /** InvalidFreezeAuthority: Metadata does not match the freeze authority on the mint */
  INVALID_FREEZE_AUTHORITY = 0x5b, // 91
  /** InvalidDelegate: All tokens in this account have not been delegated to this user. */
  INVALID_DELEGATE = 0x5c, // 92
  /** CannotAdjustVerifiedCreator: Creator can not be adjusted once they are verified. */
  CANNOT_ADJUST_VERIFIED_CREATOR = 0x5d, // 93
  /** CannotRemoveVerifiedCreator: Verified creators cannot be removed. */
  CANNOT_REMOVE_VERIFIED_CREATOR = 0x5e, // 94
  /** CannotWipeVerifiedCreators: Can not wipe verified creators. */
  CANNOT_WIPE_VERIFIED_CREATORS = 0x5f, // 95
  /** NotAllowedToChangeSellerFeeBasisPoints: Not allowed to change seller fee basis points. */
  NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS = 0x60, // 96
  /** EditionOverrideCannotBeZero: Edition override cannot be zero */
  EDITION_OVERRIDE_CANNOT_BE_ZERO = 0x61, // 97
  /** InvalidUser: Invalid User */
  INVALID_USER = 0x62, // 98
  /** RevokeCollectionAuthoritySignerIncorrect: Revoke Collection Authority signer is incorrect */
  REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT = 0x63, // 99
  /** TokenCloseFailed: Token close failed */
  TOKEN_CLOSE_FAILED = 0x64, // 100
  /** UnsizedCollection: Can't use this function on unsized collection */
  UNSIZED_COLLECTION = 0x65, // 101
  /** SizedCollection: Can't use this function on a sized collection */
  SIZED_COLLECTION = 0x66, // 102
  /** MissingCollectionMetadata: Can't burn a verified member of a collection w/o providing collection metadata account */
  MISSING_COLLECTION_METADATA = 0x67, // 103
  /** NotAMemberOfCollection: This NFT is not a member of the specified collection. */
  NOT_A_MEMBER_OF_COLLECTION = 0x68, // 104
  /** NotVerifiedMemberOfCollection: This NFT is not a verified member of the specified collection. */
  NOT_VERIFIED_MEMBER_OF_COLLECTION = 0x69, // 105
  /** NotACollectionParent: This NFT is not a collection parent NFT. */
  NOT_A_COLLECTION_PARENT = 0x6a, // 106
  /** CouldNotDetermineTokenStandard: Could not determine a TokenStandard type. */
  COULD_NOT_DETERMINE_TOKEN_STANDARD = 0x6b, // 107
  /** MissingEditionAccount: This mint account has an edition but none was provided. */
  MISSING_EDITION_ACCOUNT = 0x6c, // 108
  /** NotAMasterEdition: This edition is not a Master Edition */
  NOT_A_MASTER_EDITION = 0x6d, // 109
  /** MasterEditionHasPrints: This Master Edition has existing prints */
  MASTER_EDITION_HAS_PRINTS = 0x6e, // 110
  /** BorshDeserializationError: Borsh Deserialization Error */
  BORSH_DESERIALIZATION_ERROR = 0x6f, // 111
  /** CannotUpdateVerifiedCollection: Cannot update a verified collection in this command */
  CANNOT_UPDATE_VERIFIED_COLLECTION = 0x70, // 112
  /** CollectionMasterEditionAccountInvalid: Edition account doesnt match collection  */
  COLLECTION_MASTER_EDITION_ACCOUNT_INVALID = 0x71, // 113
  /** AlreadyVerified: Item is already verified. */
  ALREADY_VERIFIED = 0x72, // 114
  /** AlreadyUnverified: Item is already unverified. */
  ALREADY_UNVERIFIED = 0x73, // 115
  /** NotAPrintEdition: This edition is not a Print Edition */
  NOT_A_PRINT_EDITION = 0x74, // 116
  /** InvalidMasterEdition: Invalid Master Edition */
  INVALID_MASTER_EDITION = 0x75, // 117
  /** InvalidPrintEdition: Invalid Print Edition */
  INVALID_PRINT_EDITION = 0x76, // 118
  /** InvalidEditionMarker: Invalid Edition Marker */
  INVALID_EDITION_MARKER = 0x77, // 119
  /** ReservationListDeprecated: Reservation List is Deprecated */
  RESERVATION_LIST_DEPRECATED = 0x78, // 120
  /** PrintEditionDoesNotMatchMasterEdition: Print Edition does not match Master Edition */
  PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION = 0x79, // 121
  /** EditionNumberGreaterThanMaxSupply: Edition Number greater than max supply */
  EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY = 0x7a, // 122
  /** MustUnverify: Must unverify before migrating collections. */
  MUST_UNVERIFY = 0x7b, // 123
  /** InvalidEscrowBumpSeed: Invalid Escrow Account Bump Seed */
  INVALID_ESCROW_BUMP_SEED = 0x7c, // 124
  /** MustBeEscrowAuthority: Must Escrow Authority */
  MUST_BE_ESCROW_AUTHORITY = 0x7d, // 125
  /** InvalidSystemProgram: Invalid System Program */
  INVALID_SYSTEM_PROGRAM = 0x7e, // 126
  /** MustBeNonFungible: Must be a Non Fungible Token */
  MUST_BE_NON_FUNGIBLE = 0x7f, // 127
  /** InsufficientTokens: Insufficient tokens for transfer */
  INSUFFICIENT_TOKENS = 0x80, // 128
  /** BorshSerializationError: Borsh Serialization Error */
  BORSH_SERIALIZATION_ERROR = 0x81, // 129
  /** NoFreezeAuthoritySet: Cannot create NFT with no Freeze Authority. */
  NO_FREEZE_AUTHORITY_SET = 0x82, // 130
  /** InvalidCollectionSizeChange: Invalid collection size change */
  INVALID_COLLECTION_SIZE_CHANGE = 0x83, // 131
  /** InvalidBubblegumSigner: Invalid bubblegum signer */
  INVALID_BUBBLEGUM_SIGNER = 0x84, // 132
  /** MintIsNotSigner: Mint needs to be signer to initialize the account */
  MINT_IS_NOT_SIGNER = 0x85, // 133
  /** InvalidTokenStandard: Invalid token standard */
  INVALID_TOKEN_STANDARD = 0x86, // 134
  /** InvalidMintForTokenStandard: Invalid mint account for specified token standard */
  INVALID_MINT_FOR_TOKEN_STANDARD = 0x87, // 135
  /** InvalidAuthorizationRules: Invalid authorization rules account */
  INVALID_AUTHORIZATION_RULES = 0x88, // 136
  /** MissingAuthorizationRules: Missing authorization rules account */
  MISSING_AUTHORIZATION_RULES = 0x89, // 137
  /** MissingProgrammableConfig: Missing programmable configuration */
  MISSING_PROGRAMMABLE_CONFIG = 0x8a, // 138
  /** InvalidProgrammableConfig: Invalid programmable configuration */
  INVALID_PROGRAMMABLE_CONFIG = 0x8b, // 139
  /** DelegateAlreadyExists: Delegate already exists */
  DELEGATE_ALREADY_EXISTS = 0x8c, // 140
  /** DelegateNotFound: Delegate not found */
  DELEGATE_NOT_FOUND = 0x8d, // 141
  /** MissingAccountInBuilder: Required account not set in instruction builder */
  MISSING_ACCOUNT_IN_BUILDER = 0x8e, // 142
  /** MissingArgumentInBuilder: Required argument not set in instruction builder */
  MISSING_ARGUMENT_IN_BUILDER = 0x8f, // 143
  /** FeatureNotSupported: Feature not supported currently */
  FEATURE_NOT_SUPPORTED = 0x90, // 144
  /** InvalidSystemWallet: Invalid system wallet */
  INVALID_SYSTEM_WALLET = 0x91, // 145
  /** OnlySaleDelegateCanTransfer: Only the sale delegate can transfer while its set */
  ONLY_SALE_DELEGATE_CAN_TRANSFER = 0x92, // 146
  /** MissingTokenAccount: Missing token account */
  MISSING_TOKEN_ACCOUNT = 0x93, // 147
  /** MissingSplTokenProgram: Missing SPL token program */
  MISSING_SPL_TOKEN_PROGRAM = 0x94, // 148
  /** MissingAuthorizationRulesProgram: Missing SPL token program */
  MISSING_AUTHORIZATION_RULES_PROGRAM = 0x95, // 149
  /** InvalidDelegateRoleForTransfer: Invalid delegate role for transfer */
  INVALID_DELEGATE_ROLE_FOR_TRANSFER = 0x96, // 150
}

const mplTokenMetadataProgramErrorCodeMap: Record<
  MplTokenMetadataProgramErrorCode,
  [string, string]
> = {
  [MplTokenMetadataProgramErrorCode.INSTRUCTION_UNPACK_ERROR]: [
    'InstructionUnpackError',
    `Failed to unpack instruction data`,
  ],
  [MplTokenMetadataProgramErrorCode.INSTRUCTION_PACK_ERROR]: [
    'InstructionPackError',
    `Failed to pack instruction data`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_RENT_EXEMPT]: [
    'NotRentExempt',
    `Lamport balance below rent-exempt threshold`,
  ],
  [MplTokenMetadataProgramErrorCode.ALREADY_INITIALIZED]: [
    'AlreadyInitialized',
    `Already initialized`,
  ],
  [MplTokenMetadataProgramErrorCode.UNINITIALIZED]: [
    'Uninitialized',
    `Uninitialized`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_METADATA_KEY]: [
    'InvalidMetadataKey',
    ` Metadata's key must match seed of ['metadata', program id, mint] provided`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_EDITION_KEY]: [
    'InvalidEditionKey',
    `Edition's key must match seed of ['metadata', program id, name, 'edition'] provided`,
  ],
  [MplTokenMetadataProgramErrorCode.UPDATE_AUTHORITY_INCORRECT]: [
    'UpdateAuthorityIncorrect',
    `Update Authority given does not match`,
  ],
  [MplTokenMetadataProgramErrorCode.UPDATE_AUTHORITY_IS_NOT_SIGNER]: [
    'UpdateAuthorityIsNotSigner',
    `Update Authority needs to be signer to update metadata`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_MINT_AUTHORITY]: [
    'NotMintAuthority',
    `You must be the mint authority and signer on this transaction`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_MINT_AUTHORITY]: [
    'InvalidMintAuthority',
    `Mint authority provided does not match the authority on the mint`,
  ],
  [MplTokenMetadataProgramErrorCode.NAME_TOO_LONG]: [
    'NameTooLong',
    `Name too long`,
  ],
  [MplTokenMetadataProgramErrorCode.SYMBOL_TOO_LONG]: [
    'SymbolTooLong',
    `Symbol too long`,
  ],
  [MplTokenMetadataProgramErrorCode.URI_TOO_LONG]: [
    'UriTooLong',
    `URI too long`,
  ],
  [MplTokenMetadataProgramErrorCode.UPDATE_AUTHORITY_MUST_BE_EQUAL_TO_METADATA_AUTHORITY_AND_SIGNER]:
    [
      'UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner',
      `Update authority must be equivalent to the metadata's authority and also signer of this transaction`,
    ],
  [MplTokenMetadataProgramErrorCode.MINT_MISMATCH]: [
    'MintMismatch',
    `Mint given does not match mint on Metadata`,
  ],
  [MplTokenMetadataProgramErrorCode.EDITIONS_MUST_HAVE_EXACTLY_ONE_TOKEN]: [
    'EditionsMustHaveExactlyOneToken',
    `Editions must have exactly one token`,
  ],
  [MplTokenMetadataProgramErrorCode.MAX_EDITIONS_MINTED_ALREADY]: [
    'MaxEditionsMintedAlready',
    `Maximum editions printed already`,
  ],
  [MplTokenMetadataProgramErrorCode.TOKEN_MINT_TO_FAILED]: [
    'TokenMintToFailed',
    `Token mint to failed`,
  ],
  [MplTokenMetadataProgramErrorCode.MASTER_RECORD_MISMATCH]: [
    'MasterRecordMismatch',
    `The master edition record passed must match the master record on the edition given`,
  ],
  [MplTokenMetadataProgramErrorCode.DESTINATION_MINT_MISMATCH]: [
    'DestinationMintMismatch',
    `The destination account does not have the right mint`,
  ],
  [MplTokenMetadataProgramErrorCode.EDITION_ALREADY_MINTED]: [
    'EditionAlreadyMinted',
    `An edition can only mint one of its kind!`,
  ],
  [MplTokenMetadataProgramErrorCode.PRINTING_MINT_DECIMALS_SHOULD_BE_ZERO]: [
    'PrintingMintDecimalsShouldBeZero',
    `Printing mint decimals should be zero`,
  ],
  [MplTokenMetadataProgramErrorCode.ONE_TIME_PRINTING_AUTHORIZATION_MINT_DECIMALS_SHOULD_BE_ZERO]:
    [
      'OneTimePrintingAuthorizationMintDecimalsShouldBeZero',
      `OneTimePrintingAuthorization mint decimals should be zero`,
    ],
  [MplTokenMetadataProgramErrorCode.EDITION_MINT_DECIMALS_SHOULD_BE_ZERO]: [
    'EditionMintDecimalsShouldBeZero',
    `EditionMintDecimalsShouldBeZero`,
  ],
  [MplTokenMetadataProgramErrorCode.TOKEN_BURN_FAILED]: [
    'TokenBurnFailed',
    `Token burn failed`,
  ],
  [MplTokenMetadataProgramErrorCode.TOKEN_ACCOUNT_ONE_TIME_AUTH_MINT_MISMATCH]:
    [
      'TokenAccountOneTimeAuthMintMismatch',
      `The One Time authorization mint does not match that on the token account!`,
    ],
  [MplTokenMetadataProgramErrorCode.DERIVED_KEY_INVALID]: [
    'DerivedKeyInvalid',
    `Derived key invalid`,
  ],
  [MplTokenMetadataProgramErrorCode.PRINTING_MINT_MISMATCH]: [
    'PrintingMintMismatch',
    `The Printing mint does not match that on the master edition!`,
  ],
  [MplTokenMetadataProgramErrorCode.ONE_TIME_PRINTING_AUTH_MINT_MISMATCH]: [
    'OneTimePrintingAuthMintMismatch',
    `The One Time Printing Auth mint does not match that on the master edition!`,
  ],
  [MplTokenMetadataProgramErrorCode.TOKEN_ACCOUNT_MINT_MISMATCH]: [
    'TokenAccountMintMismatch',
    `The mint of the token account does not match the Printing mint!`,
  ],
  [MplTokenMetadataProgramErrorCode.TOKEN_ACCOUNT_MINT_MISMATCH_V2]: [
    'TokenAccountMintMismatchV2',
    `The mint of the token account does not match the master metadata mint!`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_ENOUGH_TOKENS]: [
    'NotEnoughTokens',
    `Not enough tokens to mint a limited edition`,
  ],
  [MplTokenMetadataProgramErrorCode.PRINTING_MINT_AUTHORIZATION_ACCOUNT_MISMATCH]:
    [
      'PrintingMintAuthorizationAccountMismatch',
      `The mint on your authorization token holding account does not match your Printing mint!`,
    ],
  [MplTokenMetadataProgramErrorCode.AUTHORIZATION_TOKEN_ACCOUNT_OWNER_MISMATCH]:
    [
      'AuthorizationTokenAccountOwnerMismatch',
      `The authorization token account has a different owner than the update authority for the master edition!`,
    ],
  [MplTokenMetadataProgramErrorCode.DISABLED]: [
    'Disabled',
    `This feature is currently disabled.`,
  ],
  [MplTokenMetadataProgramErrorCode.CREATORS_TOO_LONG]: [
    'CreatorsTooLong',
    `Creators list too long`,
  ],
  [MplTokenMetadataProgramErrorCode.CREATORS_MUST_BE_ATLEAST_ONE]: [
    'CreatorsMustBeAtleastOne',
    `Creators must be at least one if set`,
  ],
  [MplTokenMetadataProgramErrorCode.MUST_BE_ONE_OF_CREATORS]: [
    'MustBeOneOfCreators',
    `If using a creators array, you must be one of the creators listed`,
  ],
  [MplTokenMetadataProgramErrorCode.NO_CREATORS_PRESENT_ON_METADATA]: [
    'NoCreatorsPresentOnMetadata',
    `This metadata does not have creators`,
  ],
  [MplTokenMetadataProgramErrorCode.CREATOR_NOT_FOUND]: [
    'CreatorNotFound',
    `This creator address was not found`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_BASIS_POINTS]: [
    'InvalidBasisPoints',
    `Basis points cannot be more than 10000`,
  ],
  [MplTokenMetadataProgramErrorCode.PRIMARY_SALE_CAN_ONLY_BE_FLIPPED_TO_TRUE]: [
    'PrimarySaleCanOnlyBeFlippedToTrue',
    `Primary sale can only be flipped to true and is immutable`,
  ],
  [MplTokenMetadataProgramErrorCode.OWNER_MISMATCH]: [
    'OwnerMismatch',
    `Owner does not match that on the account given`,
  ],
  [MplTokenMetadataProgramErrorCode.NO_BALANCE_IN_ACCOUNT_FOR_AUTHORIZATION]: [
    'NoBalanceInAccountForAuthorization',
    `This account has no tokens to be used for authorization`,
  ],
  [MplTokenMetadataProgramErrorCode.SHARE_TOTAL_MUST_BE100]: [
    'ShareTotalMustBe100',
    `Share total must equal 100 for creator array`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_EXISTS]: [
    'ReservationExists',
    `This reservation list already exists!`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_DOES_NOT_EXIST]: [
    'ReservationDoesNotExist',
    `This reservation list does not exist!`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_NOT_SET]: [
    'ReservationNotSet',
    `This reservation list exists but was never set with reservations`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_ALREADY_MADE]: [
    'ReservationAlreadyMade',
    `This reservation list has already been set!`,
  ],
  [MplTokenMetadataProgramErrorCode.BEYOND_MAX_ADDRESS_SIZE]: [
    'BeyondMaxAddressSize',
    `Provided more addresses than max allowed in single reservation`,
  ],
  [MplTokenMetadataProgramErrorCode.NUMERICAL_OVERFLOW_ERROR]: [
    'NumericalOverflowError',
    `NumericalOverflowError`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_BREACHES_MAXIMUM_SUPPLY]: [
    'ReservationBreachesMaximumSupply',
    `This reservation would go beyond the maximum supply of the master edition!`,
  ],
  [MplTokenMetadataProgramErrorCode.ADDRESS_NOT_IN_RESERVATION]: [
    'AddressNotInReservation',
    `Address not in reservation!`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_VERIFY_ANOTHER_CREATOR]: [
    'CannotVerifyAnotherCreator',
    `You cannot unilaterally verify another creator, they must sign`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_UNVERIFY_ANOTHER_CREATOR]: [
    'CannotUnverifyAnotherCreator',
    `You cannot unilaterally unverify another creator`,
  ],
  [MplTokenMetadataProgramErrorCode.SPOT_MISMATCH]: [
    'SpotMismatch',
    `In initial reservation setting, spots remaining should equal total spots`,
  ],
  [MplTokenMetadataProgramErrorCode.INCORRECT_OWNER]: [
    'IncorrectOwner',
    `Incorrect account owner`,
  ],
  [MplTokenMetadataProgramErrorCode.PRINTING_WOULD_BREACH_MAXIMUM_SUPPLY]: [
    'PrintingWouldBreachMaximumSupply',
    `printing these tokens would breach the maximum supply limit of the master edition`,
  ],
  [MplTokenMetadataProgramErrorCode.DATA_IS_IMMUTABLE]: [
    'DataIsImmutable',
    `Data is immutable`,
  ],
  [MplTokenMetadataProgramErrorCode.DUPLICATE_CREATOR_ADDRESS]: [
    'DuplicateCreatorAddress',
    `No duplicate creator addresses`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_SPOTS_REMAINING_SHOULD_MATCH_TOTAL_SPOTS_AT_START]:
    [
      'ReservationSpotsRemainingShouldMatchTotalSpotsAtStart',
      `Reservation spots remaining should match total spots when first being created`,
    ],
  [MplTokenMetadataProgramErrorCode.INVALID_TOKEN_PROGRAM]: [
    'InvalidTokenProgram',
    `Invalid token program`,
  ],
  [MplTokenMetadataProgramErrorCode.DATA_TYPE_MISMATCH]: [
    'DataTypeMismatch',
    `Data type mismatch`,
  ],
  [MplTokenMetadataProgramErrorCode.BEYOND_ALOTTED_ADDRESS_SIZE]: [
    'BeyondAlottedAddressSize',
    `Beyond alotted address size in reservation!`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_NOT_COMPLETE]: [
    'ReservationNotComplete',
    `The reservation has only been partially alotted`,
  ],
  [MplTokenMetadataProgramErrorCode.TRIED_TO_REPLACE_AN_EXISTING_RESERVATION]: [
    'TriedToReplaceAnExistingReservation',
    `You cannot splice over an existing reservation!`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_OPERATION]: [
    'InvalidOperation',
    `Invalid operation`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_OWNER]: [
    'InvalidOwner',
    `Invalid Owner`,
  ],
  [MplTokenMetadataProgramErrorCode.PRINTING_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION]:
    [
      'PrintingMintSupplyMustBeZeroForConversion',
      `Printing mint supply must be zero for conversion`,
    ],
  [MplTokenMetadataProgramErrorCode.ONE_TIME_AUTH_MINT_SUPPLY_MUST_BE_ZERO_FOR_CONVERSION]:
    [
      'OneTimeAuthMintSupplyMustBeZeroForConversion',
      `One Time Auth mint supply must be zero for conversion`,
    ],
  [MplTokenMetadataProgramErrorCode.INVALID_EDITION_INDEX]: [
    'InvalidEditionIndex',
    `You tried to insert one edition too many into an edition mark pda`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_ARRAY_SHOULD_BE_SIZE_ONE]: [
    'ReservationArrayShouldBeSizeOne',
    `In the legacy system the reservation needs to be of size one for cpu limit reasons`,
  ],
  [MplTokenMetadataProgramErrorCode.IS_MUTABLE_CAN_ONLY_BE_FLIPPED_TO_FALSE]: [
    'IsMutableCanOnlyBeFlippedToFalse',
    `Is Mutable can only be flipped to false`,
  ],
  [MplTokenMetadataProgramErrorCode.COLLECTION_CANNOT_BE_VERIFIED_IN_THIS_INSTRUCTION]:
    [
      'CollectionCannotBeVerifiedInThisInstruction',
      `Collection cannot be verified in this instruction`,
    ],
  [MplTokenMetadataProgramErrorCode.REMOVED]: [
    'Removed',
    `This instruction was deprecated in a previous release and is now removed`,
  ],
  [MplTokenMetadataProgramErrorCode.MUST_BE_BURNED]: [
    'MustBeBurned',
    `This token use method is burn and there are no remaining uses, it must be burned`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_USE_METHOD]: [
    'InvalidUseMethod',
    `This use method is invalid`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_CHANGE_USE_METHOD_AFTER_FIRST_USE]: [
    'CannotChangeUseMethodAfterFirstUse',
    `Cannot Change Use Method after the first use`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_CHANGE_USES_AFTER_FIRST_USE]: [
    'CannotChangeUsesAfterFirstUse',
    `Cannot Change Remaining or Available uses after the first use`,
  ],
  [MplTokenMetadataProgramErrorCode.COLLECTION_NOT_FOUND]: [
    'CollectionNotFound',
    `Collection Not Found on Metadata`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_COLLECTION_UPDATE_AUTHORITY]: [
    'InvalidCollectionUpdateAuthority',
    `Collection Update Authority is invalid`,
  ],
  [MplTokenMetadataProgramErrorCode.COLLECTION_MUST_BE_A_UNIQUE_MASTER_EDITION]:
    [
      'CollectionMustBeAUniqueMasterEdition',
      `Collection Must Be a Unique Master Edition v2`,
    ],
  [MplTokenMetadataProgramErrorCode.USE_AUTHORITY_RECORD_ALREADY_EXISTS]: [
    'UseAuthorityRecordAlreadyExists',
    `The Use Authority Record Already Exists, to modify it Revoke, then Approve`,
  ],
  [MplTokenMetadataProgramErrorCode.USE_AUTHORITY_RECORD_ALREADY_REVOKED]: [
    'UseAuthorityRecordAlreadyRevoked',
    `The Use Authority Record is empty or already revoked`,
  ],
  [MplTokenMetadataProgramErrorCode.UNUSABLE]: [
    'Unusable',
    `This token has no uses`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_ENOUGH_USES]: [
    'NotEnoughUses',
    `There are not enough Uses left on this token.`,
  ],
  [MplTokenMetadataProgramErrorCode.COLLECTION_AUTHORITY_RECORD_ALREADY_EXISTS]:
    [
      'CollectionAuthorityRecordAlreadyExists',
      `This Collection Authority Record Already Exists.`,
    ],
  [MplTokenMetadataProgramErrorCode.COLLECTION_AUTHORITY_DOES_NOT_EXIST]: [
    'CollectionAuthorityDoesNotExist',
    `This Collection Authority Record Does Not Exist.`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_USE_AUTHORITY_RECORD]: [
    'InvalidUseAuthorityRecord',
    `This Use Authority Record is invalid.`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_COLLECTION_AUTHORITY_RECORD]: [
    'InvalidCollectionAuthorityRecord',
    `This Collection Authority Record is invalid.`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_FREEZE_AUTHORITY]: [
    'InvalidFreezeAuthority',
    `Metadata does not match the freeze authority on the mint`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_DELEGATE]: [
    'InvalidDelegate',
    `All tokens in this account have not been delegated to this user.`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_ADJUST_VERIFIED_CREATOR]: [
    'CannotAdjustVerifiedCreator',
    `Creator can not be adjusted once they are verified.`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_REMOVE_VERIFIED_CREATOR]: [
    'CannotRemoveVerifiedCreator',
    `Verified creators cannot be removed.`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_WIPE_VERIFIED_CREATORS]: [
    'CannotWipeVerifiedCreators',
    `Can not wipe verified creators.`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_ALLOWED_TO_CHANGE_SELLER_FEE_BASIS_POINTS]:
    [
      'NotAllowedToChangeSellerFeeBasisPoints',
      `Not allowed to change seller fee basis points.`,
    ],
  [MplTokenMetadataProgramErrorCode.EDITION_OVERRIDE_CANNOT_BE_ZERO]: [
    'EditionOverrideCannotBeZero',
    `Edition override cannot be zero`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_USER]: [
    'InvalidUser',
    `Invalid User`,
  ],
  [MplTokenMetadataProgramErrorCode.REVOKE_COLLECTION_AUTHORITY_SIGNER_INCORRECT]:
    [
      'RevokeCollectionAuthoritySignerIncorrect',
      `Revoke Collection Authority signer is incorrect`,
    ],
  [MplTokenMetadataProgramErrorCode.TOKEN_CLOSE_FAILED]: [
    'TokenCloseFailed',
    `Token close failed`,
  ],
  [MplTokenMetadataProgramErrorCode.UNSIZED_COLLECTION]: [
    'UnsizedCollection',
    `Can't use this function on unsized collection`,
  ],
  [MplTokenMetadataProgramErrorCode.SIZED_COLLECTION]: [
    'SizedCollection',
    `Can't use this function on a sized collection`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_COLLECTION_METADATA]: [
    'MissingCollectionMetadata',
    `Can't burn a verified member of a collection w/o providing collection metadata account`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_A_MEMBER_OF_COLLECTION]: [
    'NotAMemberOfCollection',
    `This NFT is not a member of the specified collection.`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_VERIFIED_MEMBER_OF_COLLECTION]: [
    'NotVerifiedMemberOfCollection',
    `This NFT is not a verified member of the specified collection.`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_A_COLLECTION_PARENT]: [
    'NotACollectionParent',
    `This NFT is not a collection parent NFT.`,
  ],
  [MplTokenMetadataProgramErrorCode.COULD_NOT_DETERMINE_TOKEN_STANDARD]: [
    'CouldNotDetermineTokenStandard',
    `Could not determine a TokenStandard type.`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_EDITION_ACCOUNT]: [
    'MissingEditionAccount',
    `This mint account has an edition but none was provided.`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_A_MASTER_EDITION]: [
    'NotAMasterEdition',
    `This edition is not a Master Edition`,
  ],
  [MplTokenMetadataProgramErrorCode.MASTER_EDITION_HAS_PRINTS]: [
    'MasterEditionHasPrints',
    `This Master Edition has existing prints`,
  ],
  [MplTokenMetadataProgramErrorCode.BORSH_DESERIALIZATION_ERROR]: [
    'BorshDeserializationError',
    `Borsh Deserialization Error`,
  ],
  [MplTokenMetadataProgramErrorCode.CANNOT_UPDATE_VERIFIED_COLLECTION]: [
    'CannotUpdateVerifiedCollection',
    `Cannot update a verified collection in this command`,
  ],
  [MplTokenMetadataProgramErrorCode.COLLECTION_MASTER_EDITION_ACCOUNT_INVALID]:
    [
      'CollectionMasterEditionAccountInvalid',
      `Edition account doesnt match collection `,
    ],
  [MplTokenMetadataProgramErrorCode.ALREADY_VERIFIED]: [
    'AlreadyVerified',
    `Item is already verified.`,
  ],
  [MplTokenMetadataProgramErrorCode.ALREADY_UNVERIFIED]: [
    'AlreadyUnverified',
    `Item is already unverified.`,
  ],
  [MplTokenMetadataProgramErrorCode.NOT_A_PRINT_EDITION]: [
    'NotAPrintEdition',
    `This edition is not a Print Edition`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_MASTER_EDITION]: [
    'InvalidMasterEdition',
    `Invalid Master Edition`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_PRINT_EDITION]: [
    'InvalidPrintEdition',
    `Invalid Print Edition`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_EDITION_MARKER]: [
    'InvalidEditionMarker',
    `Invalid Edition Marker`,
  ],
  [MplTokenMetadataProgramErrorCode.RESERVATION_LIST_DEPRECATED]: [
    'ReservationListDeprecated',
    `Reservation List is Deprecated`,
  ],
  [MplTokenMetadataProgramErrorCode.PRINT_EDITION_DOES_NOT_MATCH_MASTER_EDITION]:
    [
      'PrintEditionDoesNotMatchMasterEdition',
      `Print Edition does not match Master Edition`,
    ],
  [MplTokenMetadataProgramErrorCode.EDITION_NUMBER_GREATER_THAN_MAX_SUPPLY]: [
    'EditionNumberGreaterThanMaxSupply',
    `Edition Number greater than max supply`,
  ],
  [MplTokenMetadataProgramErrorCode.MUST_UNVERIFY]: [
    'MustUnverify',
    `Must unverify before migrating collections.`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_ESCROW_BUMP_SEED]: [
    'InvalidEscrowBumpSeed',
    `Invalid Escrow Account Bump Seed`,
  ],
  [MplTokenMetadataProgramErrorCode.MUST_BE_ESCROW_AUTHORITY]: [
    'MustBeEscrowAuthority',
    `Must Escrow Authority`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_SYSTEM_PROGRAM]: [
    'InvalidSystemProgram',
    `Invalid System Program`,
  ],
  [MplTokenMetadataProgramErrorCode.MUST_BE_NON_FUNGIBLE]: [
    'MustBeNonFungible',
    `Must be a Non Fungible Token`,
  ],
  [MplTokenMetadataProgramErrorCode.INSUFFICIENT_TOKENS]: [
    'InsufficientTokens',
    `Insufficient tokens for transfer`,
  ],
  [MplTokenMetadataProgramErrorCode.BORSH_SERIALIZATION_ERROR]: [
    'BorshSerializationError',
    `Borsh Serialization Error`,
  ],
  [MplTokenMetadataProgramErrorCode.NO_FREEZE_AUTHORITY_SET]: [
    'NoFreezeAuthoritySet',
    `Cannot create NFT with no Freeze Authority.`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_COLLECTION_SIZE_CHANGE]: [
    'InvalidCollectionSizeChange',
    `Invalid collection size change`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_BUBBLEGUM_SIGNER]: [
    'InvalidBubblegumSigner',
    `Invalid bubblegum signer`,
  ],
  [MplTokenMetadataProgramErrorCode.MINT_IS_NOT_SIGNER]: [
    'MintIsNotSigner',
    `Mint needs to be signer to initialize the account`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_TOKEN_STANDARD]: [
    'InvalidTokenStandard',
    `Invalid token standard`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_MINT_FOR_TOKEN_STANDARD]: [
    'InvalidMintForTokenStandard',
    `Invalid mint account for specified token standard`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_AUTHORIZATION_RULES]: [
    'InvalidAuthorizationRules',
    `Invalid authorization rules account`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_AUTHORIZATION_RULES]: [
    'MissingAuthorizationRules',
    `Missing authorization rules account`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_PROGRAMMABLE_CONFIG]: [
    'MissingProgrammableConfig',
    `Missing programmable configuration`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_PROGRAMMABLE_CONFIG]: [
    'InvalidProgrammableConfig',
    `Invalid programmable configuration`,
  ],
  [MplTokenMetadataProgramErrorCode.DELEGATE_ALREADY_EXISTS]: [
    'DelegateAlreadyExists',
    `Delegate already exists`,
  ],
  [MplTokenMetadataProgramErrorCode.DELEGATE_NOT_FOUND]: [
    'DelegateNotFound',
    `Delegate not found`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_ACCOUNT_IN_BUILDER]: [
    'MissingAccountInBuilder',
    `Required account not set in instruction builder`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_ARGUMENT_IN_BUILDER]: [
    'MissingArgumentInBuilder',
    `Required argument not set in instruction builder`,
  ],
  [MplTokenMetadataProgramErrorCode.FEATURE_NOT_SUPPORTED]: [
    'FeatureNotSupported',
    `Feature not supported currently`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_SYSTEM_WALLET]: [
    'InvalidSystemWallet',
    `Invalid system wallet`,
  ],
  [MplTokenMetadataProgramErrorCode.ONLY_SALE_DELEGATE_CAN_TRANSFER]: [
    'OnlySaleDelegateCanTransfer',
    `Only the sale delegate can transfer while its set`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_TOKEN_ACCOUNT]: [
    'MissingTokenAccount',
    `Missing token account`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_SPL_TOKEN_PROGRAM]: [
    'MissingSplTokenProgram',
    `Missing SPL token program`,
  ],
  [MplTokenMetadataProgramErrorCode.MISSING_AUTHORIZATION_RULES_PROGRAM]: [
    'MissingAuthorizationRulesProgram',
    `Missing SPL token program`,
  ],
  [MplTokenMetadataProgramErrorCode.INVALID_DELEGATE_ROLE_FOR_TRANSFER]: [
    'InvalidDelegateRoleForTransfer',
    `Invalid delegate role for transfer`,
  ],
};

export class MplTokenMetadataProgramError extends Error {
  override readonly name = 'MplTokenMetadataProgramError';
  readonly code: MplTokenMetadataProgramErrorCode;
  readonly cause: Error | undefined;

  constructor(
    code: MplTokenMetadataProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    Error.captureStackTrace(this, this.constructor);
    this.code = code;
    this.cause = cause;
  }
}

export function getMplTokenMetadataProgramErrorFromCode(
  code: MplTokenMetadataProgramErrorCode,
  cause?: Error
): MplTokenMetadataProgramError {
  return new MplTokenMetadataProgramError(
    code,
    ...mplTokenMetadataProgramErrorCodeMap[code],
    cause
  );
}
