/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Base58EncodedAddress,
  address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type InitializeToken2Instruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string = string,
  TAccountMint extends string = string,
  TAccountRent extends string = 'SysvarRent111111111111111111111111111111111'
> = IInstruction<TProgram> &
  IInstructionWithData<InitializeToken2InstructionData> &
  IInstructionWithAccounts<
    [
      WritableAccount<TAccountAccount>,
      ReadonlyAccount<TAccountMint>,
      ReadonlyAccount<TAccountRent>
    ]
  >;

export type InitializeToken2InstructionData = {
  discriminator: number;
  owner: Base58EncodedAddress;
};

export type InitializeToken2InstructionDataArgs = {
  owner: Base58EncodedAddress;
};

export function getInitializeToken2InstructionDataEncoder(): Encoder<InitializeToken2InstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<InitializeToken2InstructionData>(
      [
        ['discriminator', getU8Encoder()],
        ['owner', getAddressEncoder()],
      ],
      { description: 'InitializeToken2InstructionData' }
    ),
    (value) =>
      ({ ...value, discriminator: 16 } as InitializeToken2InstructionData)
  ) as Encoder<InitializeToken2InstructionDataArgs>;
}

export function getInitializeToken2InstructionDataDecoder(): Decoder<InitializeToken2InstructionData> {
  return getStructDecoder<InitializeToken2InstructionData>(
    [
      ['discriminator', getU8Decoder()],
      ['owner', getAddressDecoder()],
    ],
    { description: 'InitializeToken2InstructionData' }
  ) as Decoder<InitializeToken2InstructionData>;
}

export function getInitializeToken2InstructionDataCodec(): Codec<
  InitializeToken2InstructionDataArgs,
  InitializeToken2InstructionData
> {
  return combineCodec(
    getInitializeToken2InstructionDataEncoder(),
    getInitializeToken2InstructionDataDecoder()
  );
}

export function initializeToken2Instruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string = string,
  TAccountMint extends string = string,
  TAccountRent extends string = 'SysvarRent111111111111111111111111111111111'
>(
  accounts: {
    account: Base58EncodedAddress<TAccountAccount>;
    mint: Base58EncodedAddress<TAccountMint>;
    rent: Base58EncodedAddress<TAccountRent>;
  },
  args: InitializeToken2InstructionDataArgs,
  programAddress: Base58EncodedAddress<TProgram> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<TProgram>
): InitializeToken2Instruction<
  TProgram,
  TAccountAccount,
  TAccountMint,
  TAccountRent
> {
  return {
    accounts: [
      { address: accounts.account, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.mint, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.rent, role: AccountRole.WRITABLE_SIGNER },
    ],
    data: getInitializeToken2InstructionDataEncoder().encode(args),
    programAddress,
  };
}
