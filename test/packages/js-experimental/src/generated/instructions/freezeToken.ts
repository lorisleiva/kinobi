/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  CustomGeneratedInstruction,
  ResolvedAccount,
  Signer,
  WrappedInstruction,
  accountMetaWithDefault,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type FreezeTokenInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccount extends string
        ? WritableAccount<TAccountAccount>
        : TAccountAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner>
        : TAccountOwner,
      ...TRemainingAccounts
    ]
  >;

export type FreezeTokenInstructionData = { discriminator: number };

export type FreezeTokenInstructionDataArgs = {};

export function getFreezeTokenInstructionDataEncoder(): Encoder<FreezeTokenInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<{ discriminator: number }>(
      [['discriminator', getU8Encoder()]],
      { description: 'FreezeTokenInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 10 })
  ) as Encoder<FreezeTokenInstructionDataArgs>;
}

export function getFreezeTokenInstructionDataDecoder(): Decoder<FreezeTokenInstructionData> {
  return getStructDecoder<FreezeTokenInstructionData>(
    [['discriminator', getU8Decoder()]],
    { description: 'FreezeTokenInstructionData' }
  ) as Decoder<FreezeTokenInstructionData>;
}

export function getFreezeTokenInstructionDataCodec(): Codec<
  FreezeTokenInstructionDataArgs,
  FreezeTokenInstructionData
> {
  return combineCodec(
    getFreezeTokenInstructionDataEncoder(),
    getFreezeTokenInstructionDataDecoder()
  );
}

export function freezeTokenInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    account: TAccountAccount extends string
      ? Base58EncodedAddress<TAccountAccount>
      : TAccountAccount;
    mint: TAccountMint extends string
      ? Base58EncodedAddress<TAccountMint>
      : TAccountMint;
    owner: TAccountOwner extends string
      ? Base58EncodedAddress<TAccountOwner>
      : TAccountOwner;
  },
  programAddress: Base58EncodedAddress<TProgram> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.account, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.mint, AccountRole.READONLY),
      accountMetaWithDefault(accounts.owner, AccountRole.READONLY_SIGNER),
      ...(remainingAccounts ?? []),
    ],
    data: getFreezeTokenInstructionDataEncoder().encode({}),
    programAddress,
  } as FreezeTokenInstruction<
    TProgram,
    TAccountAccount,
    TAccountMint,
    TAccountOwner,
    TRemainingAccounts
  >;
}

// Input.
export type FreezeTokenInput<
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountOwner extends string
> = {
  account: Base58EncodedAddress<TAccountAccount>;
  mint: Base58EncodedAddress<TAccountMint>;
  owner: Signer<TAccountOwner>;
};

export async function freezeToken<
  TReturn,
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  context: Pick<Context, 'getProgramAddress'> &
    CustomGeneratedInstruction<
      FreezeTokenInstruction<
        TProgram,
        TAccountAccount,
        TAccountMint,
        TAccountOwner
      >,
      TReturn
    >,
  input: FreezeTokenInput<TAccountAccount, TAccountMint, TAccountOwner>
): Promise<TReturn>;
export async function freezeToken<
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  context: Pick<Context, 'getProgramAddress'>,
  input: FreezeTokenInput<TAccountAccount, TAccountMint, TAccountOwner>
): Promise<
  WrappedInstruction<
    FreezeTokenInstruction<
      TProgram,
      TAccountAccount,
      TAccountMint,
      TAccountOwner
    >
  >
>;
export async function freezeToken<
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  input: FreezeTokenInput<TAccountAccount, TAccountMint, TAccountOwner>
): Promise<
  WrappedInstruction<
    FreezeTokenInstruction<
      TProgram,
      TAccountAccount,
      TAccountMint,
      TAccountOwner
    >
  >
>;
export async function freezeToken<
  TReturn,
  TAccountAccount extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  rawContext:
    | Pick<Context, 'getProgramAddress'>
    | (Pick<Context, 'getProgramAddress'> &
        CustomGeneratedInstruction<IInstruction, TReturn>)
    | FreezeTokenInput<TAccountAccount, TAccountMint, TAccountOwner>,
  rawInput?: FreezeTokenInput<TAccountAccount, TAccountMint, TAccountOwner>
): Promise<TReturn | WrappedInstruction<IInstruction>> {
  // Resolve context and input arguments.
  const context = (rawInput === undefined ? {} : rawInput) as
    | Pick<Context, 'getProgramAddress'>
    | (Pick<Context, 'getProgramAddress'> &
        CustomGeneratedInstruction<IInstruction, TReturn>);
  const input = (
    rawInput === undefined ? rawContext : rawInput
  ) as FreezeTokenInput<TAccountAccount, TAccountMint, TAccountOwner>;

  // Program address.
  const defaultProgramAddress =
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  const programAddress = (
    context.getProgramAddress
      ? await context.getProgramAddress({
          name: 'splToken',
          address: defaultProgramAddress,
        })
      : defaultProgramAddress
  ) as Base58EncodedAddress<TProgram>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof freezeTokenInstruction<
      TProgram,
      TAccountAccount,
      TAccountMint,
      TAccountOwner
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    account: { value: input.account ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
  };

  // Get account metas and signers.
  const [accountMetas, signers] = getAccountMetasAndSigners(
    accounts,
    'programId',
    programAddress
  );

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = [];

  // Bytes created on chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: freezeTokenInstruction(
      accountMetas as Record<keyof AccountMetas, IAccountMeta>,
      programAddress,
      remainingAccounts
    ),
    signers,
    bytesCreatedOnChain,
  };
}
