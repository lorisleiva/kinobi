/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import { resolveTokenOrAta } from '../../hooked';
import { findDelegateRecordPda } from '../accounts';
import {
  PickPartial,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type DummyInstruction<
  TProgram extends string = 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR',
  TAccountEdition extends string = string,
  TAccountMint extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountFoo extends string = string,
  TAccountBar extends string = 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR',
  TAccountDelegate extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountTokenOrAtaProgram extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<DummyInstructionData> &
  IInstructionWithAccounts<
    [
      WritableSignerAccount<TAccountEdition>,
      WritableAccount<TAccountMint>,
      ReadonlySignerAccount<TAccountUpdateAuthority>,
      WritableSignerAccount<TAccountMintAuthority>,
      WritableSignerAccount<TAccountPayer>,
      WritableAccount<TAccountFoo>,
      ReadonlySignerAccount<TAccountBar>,
      ReadonlySignerAccount<TAccountDelegate>,
      WritableAccount<TAccountDelegateRecord>,
      ReadonlyAccount<TAccountTokenOrAtaProgram>
    ]
  >;

export type DummyInstructionData = { discriminator: Array<number> };

export type DummyInstructionDataArgs = {};

export function getDummyInstructionDataEncoder(): Encoder<DummyInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<DummyInstructionData>(
      [['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })]],
      { description: 'DummyInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [167, 117, 211, 79, 251, 254, 47, 135],
      } as DummyInstructionData)
  ) as Encoder<DummyInstructionDataArgs>;
}

export function getDummyInstructionDataDecoder(): Decoder<DummyInstructionData> {
  return getStructDecoder<DummyInstructionData>(
    [['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })]],
    { description: 'DummyInstructionData' }
  ) as Decoder<DummyInstructionData>;
}

export function getDummyInstructionDataCodec(): Codec<
  DummyInstructionDataArgs,
  DummyInstructionData
> {
  return combineCodec(
    getDummyInstructionDataEncoder(),
    getDummyInstructionDataDecoder()
  );
}
