/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  BurnArgs,
  BurnArgsArgs,
  getBurnArgsDecoder,
  getBurnArgsEncoder,
} from '../types';

// Output.
export type BurnInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetadata extends string = string,
  TAccountOwner extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMasterEditionAccount extends string = string,
  TAccountSplTokenProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountCollectionMetadata extends string = string,
  TAccountAuthorizationRules extends string = string,
  TAccountAuthorizationRulesProgram extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<BurnInstructionData> &
  IInstructionWithAccounts<
    [
      WritableAccount<TAccountMetadata>,
      WritableSignerAccount<TAccountOwner>,
      WritableAccount<TAccountMint>,
      WritableAccount<TAccountTokenAccount>,
      WritableAccount<TAccountMasterEditionAccount>,
      ReadonlyAccount<TAccountSplTokenProgram>,
      WritableAccount<TAccountCollectionMetadata>,
      ReadonlyAccount<TAccountAuthorizationRules>,
      ReadonlyAccount<TAccountAuthorizationRulesProgram>
    ]
  >;

export type BurnInstructionData = { discriminator: number; burnArgs: BurnArgs };

export type BurnInstructionDataArgs = { burnArgs: BurnArgsArgs };

export function getBurnInstructionDataEncoder(): Encoder<BurnInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<BurnInstructionData>(
      [
        ['discriminator', getU8Encoder()],
        ['burnArgs', getBurnArgsEncoder()],
      ],
      { description: 'BurnInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 44 } as BurnInstructionData)
  ) as Encoder<BurnInstructionDataArgs>;
}

export function getBurnInstructionDataDecoder(): Decoder<BurnInstructionData> {
  return getStructDecoder<BurnInstructionData>(
    [
      ['discriminator', getU8Decoder()],
      ['burnArgs', getBurnArgsDecoder()],
    ],
    { description: 'BurnInstructionData' }
  ) as Decoder<BurnInstructionData>;
}

export function getBurnInstructionDataCodec(): Codec<
  BurnInstructionDataArgs,
  BurnInstructionData
> {
  return combineCodec(
    getBurnInstructionDataEncoder(),
    getBurnInstructionDataDecoder()
  );
}

export function burnInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetadata extends string = string,
  TAccountOwner extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMasterEditionAccount extends string = string,
  TAccountSplTokenProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountCollectionMetadata extends string = string,
  TAccountAuthorizationRules extends string = string,
  TAccountAuthorizationRulesProgram extends string = string
>(
  accounts: {
    metadata: Base58EncodedAddress<TAccountMetadata>;
    owner: Base58EncodedAddress<TAccountOwner>;
    mint: Base58EncodedAddress<TAccountMint>;
    tokenAccount: Base58EncodedAddress<TAccountTokenAccount>;
    masterEditionAccount: Base58EncodedAddress<TAccountMasterEditionAccount>;
    splTokenProgram: Base58EncodedAddress<TAccountSplTokenProgram>;
    collectionMetadata: Base58EncodedAddress<TAccountCollectionMetadata>;
    authorizationRules: Base58EncodedAddress<TAccountAuthorizationRules>;
    authorizationRulesProgram: Base58EncodedAddress<TAccountAuthorizationRulesProgram>;
  },
  args: BurnInstructionDataArgs,
  programAddress: Base58EncodedAddress<TProgram> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Base58EncodedAddress<TProgram>
): BurnInstruction<
  TProgram,
  TAccountMetadata,
  TAccountOwner,
  TAccountMint,
  TAccountTokenAccount,
  TAccountMasterEditionAccount,
  TAccountSplTokenProgram,
  TAccountCollectionMetadata,
  TAccountAuthorizationRules,
  TAccountAuthorizationRulesProgram
> {
  return {
    accounts: [
      { address: accounts.metadata, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.owner, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.mint, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.tokenAccount, role: AccountRole.WRITABLE_SIGNER },
      {
        address: accounts.masterEditionAccount,
        role: AccountRole.WRITABLE_SIGNER,
      },
      { address: accounts.splTokenProgram, role: AccountRole.WRITABLE_SIGNER },
      {
        address: accounts.collectionMetadata,
        role: AccountRole.WRITABLE_SIGNER,
      },
      {
        address: accounts.authorizationRules,
        role: AccountRole.WRITABLE_SIGNER,
      },
      {
        address: accounts.authorizationRulesProgram,
        role: AccountRole.WRITABLE_SIGNER,
      },
    ],
    data: getBurnInstructionDataEncoder().encode(args),
    programAddress,
  };
}
