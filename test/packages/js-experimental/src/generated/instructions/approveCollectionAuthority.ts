/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type ApproveCollectionAuthorityInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountNewCollectionAuthority extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountRent extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<ApproveCollectionAuthorityInstructionData> &
  IInstructionWithAccounts<
    [
      WritableAccount<TAccountCollectionAuthorityRecord>,
      ReadonlyAccount<TAccountNewCollectionAuthority>,
      WritableSignerAccount<TAccountUpdateAuthority>,
      WritableSignerAccount<TAccountPayer>,
      ReadonlyAccount<TAccountMetadata>,
      ReadonlyAccount<TAccountMint>,
      ReadonlyAccount<TAccountSystemProgram>,
      ReadonlyAccount<TAccountRent>
    ]
  >;

export type ApproveCollectionAuthorityInstructionData = {
  discriminator: number;
};

export type ApproveCollectionAuthorityInstructionDataArgs = {};

export function getApproveCollectionAuthorityInstructionDataEncoder(): Encoder<ApproveCollectionAuthorityInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<ApproveCollectionAuthorityInstructionData>(
      [['discriminator', getU8Encoder()]],
      { description: 'ApproveCollectionAuthorityInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: 23,
      } as ApproveCollectionAuthorityInstructionData)
  ) as Encoder<ApproveCollectionAuthorityInstructionDataArgs>;
}

export function getApproveCollectionAuthorityInstructionDataDecoder(): Decoder<ApproveCollectionAuthorityInstructionData> {
  return getStructDecoder<ApproveCollectionAuthorityInstructionData>(
    [['discriminator', getU8Decoder()]],
    { description: 'ApproveCollectionAuthorityInstructionData' }
  ) as Decoder<ApproveCollectionAuthorityInstructionData>;
}

export function getApproveCollectionAuthorityInstructionDataCodec(): Codec<
  ApproveCollectionAuthorityInstructionDataArgs,
  ApproveCollectionAuthorityInstructionData
> {
  return combineCodec(
    getApproveCollectionAuthorityInstructionDataEncoder(),
    getApproveCollectionAuthorityInstructionDataDecoder()
  );
}

export function approveCollectionAuthorityInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountNewCollectionAuthority extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountMetadata extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountRent extends string = string
>(
  accounts: {
    collectionAuthorityRecord: Base58EncodedAddress<TAccountCollectionAuthorityRecord>;
    newCollectionAuthority: Base58EncodedAddress<TAccountNewCollectionAuthority>;
    updateAuthority: Base58EncodedAddress<TAccountUpdateAuthority>;
    payer: Base58EncodedAddress<TAccountPayer>;
    metadata: Base58EncodedAddress<TAccountMetadata>;
    mint: Base58EncodedAddress<TAccountMint>;
    systemProgram: Base58EncodedAddress<TAccountSystemProgram>;
    rent: Base58EncodedAddress<TAccountRent>;
  },
  programAddress: Base58EncodedAddress<TProgram> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Base58EncodedAddress<TProgram>
): ApproveCollectionAuthorityInstruction<
  TProgram,
  TAccountCollectionAuthorityRecord,
  TAccountNewCollectionAuthority,
  TAccountUpdateAuthority,
  TAccountPayer,
  TAccountMetadata,
  TAccountMint,
  TAccountSystemProgram,
  TAccountRent
> {
  return {
    accounts: [
      {
        address: accounts.collectionAuthorityRecord,
        role: AccountRole.WRITABLE_SIGNER,
      },
      {
        address: accounts.newCollectionAuthority,
        role: AccountRole.WRITABLE_SIGNER,
      },
      { address: accounts.updateAuthority, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.payer, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.metadata, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.mint, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.systemProgram, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.rent, role: AccountRole.WRITABLE_SIGNER },
    ],
    data: getApproveCollectionAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  };
}
