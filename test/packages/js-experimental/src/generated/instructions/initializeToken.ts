/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress, address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type InitializeTokenInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string = string,
  TAccountMint extends string = string,
  TAccountOwner extends string = string,
  TAccountRent extends string = 'SysvarRent111111111111111111111111111111111'
> = IInstruction<TProgram> &
  IInstructionWithData<InitializeTokenInstructionData> &
  IInstructionWithAccounts<
    [
      WritableAccount<TAccountAccount>,
      ReadonlyAccount<TAccountMint>,
      ReadonlyAccount<TAccountOwner>,
      ReadonlyAccount<TAccountRent>
    ]
  >;

export type InitializeTokenInstructionData = { discriminator: number };

export type InitializeTokenInstructionDataArgs = {};

export function getInitializeTokenInstructionDataEncoder(): Encoder<InitializeTokenInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<InitializeTokenInstructionData>(
      [['discriminator', getU8Encoder()]],
      { description: 'InitializeTokenInstructionData' }
    ),
    (value) =>
      ({ ...value, discriminator: 1 } as InitializeTokenInstructionData)
  ) as Encoder<InitializeTokenInstructionDataArgs>;
}

export function getInitializeTokenInstructionDataDecoder(): Decoder<InitializeTokenInstructionData> {
  return getStructDecoder<InitializeTokenInstructionData>(
    [['discriminator', getU8Decoder()]],
    { description: 'InitializeTokenInstructionData' }
  ) as Decoder<InitializeTokenInstructionData>;
}

export function getInitializeTokenInstructionDataCodec(): Codec<
  InitializeTokenInstructionDataArgs,
  InitializeTokenInstructionData
> {
  return combineCodec(
    getInitializeTokenInstructionDataEncoder(),
    getInitializeTokenInstructionDataDecoder()
  );
}

export function initializeTokenInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string = string,
  TAccountMint extends string = string,
  TAccountOwner extends string = string,
  TAccountRent extends string = 'SysvarRent111111111111111111111111111111111'
>(
  accounts: {
    account: Base58EncodedAddress<TAccountAccount>;
    mint: Base58EncodedAddress<TAccountMint>;
    owner: Base58EncodedAddress<TAccountOwner>;
    rent: Base58EncodedAddress<TAccountRent>;
  },
  programId: Base58EncodedAddress<TProgram> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<TProgram>
): InitializeTokenInstruction<
  TProgram,
  TAccountAccount,
  TAccountMint,
  TAccountOwner,
  TAccountRent
> {
  // ...
}
