/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import { resolveMasterEditionFromTokenStandard } from '../../hooked';
import {
  PickPartial,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  TokenStandard,
  TokenStandardArgs,
  TransferArgs,
  TransferArgsArgs,
  getTransferArgsDecoder,
  getTransferArgsEncoder,
} from '../types';

// Output.
export type TransferInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountAuthority extends string = string,
  TAccountDelegateRecord extends string = string,
  TAccountToken extends string = string,
  TAccountTokenOwner extends string = string,
  TAccountDestination extends string = string,
  TAccountDestinationOwner extends string = string,
  TAccountMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountSplTokenProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSplAtaProgram extends string = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountSysvarInstructions extends string = 'Sysvar1nstructions1111111111111111111111111',
  TAccountAuthorizationRulesProgram extends string = string,
  TAccountAuthorizationRules extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<TransferInstructionData> &
  IInstructionWithAccounts<
    [
      WritableSignerAccount<TAccountAuthority>,
      WritableAccount<TAccountDelegateRecord>,
      WritableAccount<TAccountToken>,
      ReadonlyAccount<TAccountTokenOwner>,
      WritableAccount<TAccountDestination>,
      ReadonlyAccount<TAccountDestinationOwner>,
      ReadonlyAccount<TAccountMint>,
      WritableAccount<TAccountMetadata>,
      ReadonlyAccount<TAccountMasterEdition>,
      ReadonlyAccount<TAccountSplTokenProgram>,
      ReadonlyAccount<TAccountSplAtaProgram>,
      ReadonlyAccount<TAccountSystemProgram>,
      ReadonlyAccount<TAccountSysvarInstructions>,
      ReadonlyAccount<TAccountAuthorizationRulesProgram>,
      ReadonlyAccount<TAccountAuthorizationRules>
    ]
  >;

export type TransferInstructionData = {
  discriminator: number;
  transferArgs: TransferArgs;
};

export type TransferInstructionDataArgs = { transferArgs: TransferArgsArgs };

export function getTransferInstructionDataEncoder(): Encoder<TransferInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<TransferInstructionData>(
      [
        ['discriminator', getU8Encoder()],
        ['transferArgs', getTransferArgsEncoder()],
      ],
      { description: 'TransferInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 46 } as TransferInstructionData)
  ) as Encoder<TransferInstructionDataArgs>;
}

export function getTransferInstructionDataDecoder(): Decoder<TransferInstructionData> {
  return getStructDecoder<TransferInstructionData>(
    [
      ['discriminator', getU8Decoder()],
      ['transferArgs', getTransferArgsDecoder()],
    ],
    { description: 'TransferInstructionData' }
  ) as Decoder<TransferInstructionData>;
}

export function getTransferInstructionDataCodec(): Codec<
  TransferInstructionDataArgs,
  TransferInstructionData
> {
  return combineCodec(
    getTransferInstructionDataEncoder(),
    getTransferInstructionDataDecoder()
  );
}
