/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  MintNewEditionFromMasterEditionViaTokenArgs,
  MintNewEditionFromMasterEditionViaTokenArgsArgs,
  getMintNewEditionFromMasterEditionViaTokenArgsDecoder,
  getMintNewEditionFromMasterEditionViaTokenArgsEncoder,
} from '../types';

// Output.
export type MintNewEditionFromMasterEditionViaTokenInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountNewMetadata extends string = string,
  TAccountNewEdition extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountNewMint extends string = string,
  TAccountEditionMarkPda extends string = string,
  TAccountNewMintAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenAccountOwner extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountNewMetadataUpdateAuthority extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountRent extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<MintNewEditionFromMasterEditionViaTokenInstructionData> &
  IInstructionWithAccounts<
    [
      WritableAccount<TAccountNewMetadata>,
      WritableAccount<TAccountNewEdition>,
      WritableAccount<TAccountMasterEdition>,
      WritableAccount<TAccountNewMint>,
      WritableAccount<TAccountEditionMarkPda>,
      ReadonlySignerAccount<TAccountNewMintAuthority>,
      WritableSignerAccount<TAccountPayer>,
      ReadonlySignerAccount<TAccountTokenAccountOwner>,
      ReadonlyAccount<TAccountTokenAccount>,
      ReadonlyAccount<TAccountNewMetadataUpdateAuthority>,
      ReadonlyAccount<TAccountMetadata>,
      ReadonlyAccount<TAccountTokenProgram>,
      ReadonlyAccount<TAccountSystemProgram>,
      ReadonlyAccount<TAccountRent>
    ]
  >;

export type MintNewEditionFromMasterEditionViaTokenInstructionData = {
  discriminator: number;
  mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgs;
};

export type MintNewEditionFromMasterEditionViaTokenInstructionDataArgs = {
  mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgsArgs;
};

export function getMintNewEditionFromMasterEditionViaTokenInstructionDataEncoder(): Encoder<MintNewEditionFromMasterEditionViaTokenInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<MintNewEditionFromMasterEditionViaTokenInstructionData>(
      [
        ['discriminator', getU8Encoder()],
        [
          'mintNewEditionFromMasterEditionViaTokenArgs',
          getMintNewEditionFromMasterEditionViaTokenArgsEncoder(),
        ],
      ],
      { description: 'MintNewEditionFromMasterEditionViaTokenInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: 11,
      } as MintNewEditionFromMasterEditionViaTokenInstructionData)
  ) as Encoder<MintNewEditionFromMasterEditionViaTokenInstructionDataArgs>;
}

export function getMintNewEditionFromMasterEditionViaTokenInstructionDataDecoder(): Decoder<MintNewEditionFromMasterEditionViaTokenInstructionData> {
  return getStructDecoder<MintNewEditionFromMasterEditionViaTokenInstructionData>(
    [
      ['discriminator', getU8Decoder()],
      [
        'mintNewEditionFromMasterEditionViaTokenArgs',
        getMintNewEditionFromMasterEditionViaTokenArgsDecoder(),
      ],
    ],
    { description: 'MintNewEditionFromMasterEditionViaTokenInstructionData' }
  ) as Decoder<MintNewEditionFromMasterEditionViaTokenInstructionData>;
}

export function getMintNewEditionFromMasterEditionViaTokenInstructionDataCodec(): Codec<
  MintNewEditionFromMasterEditionViaTokenInstructionDataArgs,
  MintNewEditionFromMasterEditionViaTokenInstructionData
> {
  return combineCodec(
    getMintNewEditionFromMasterEditionViaTokenInstructionDataEncoder(),
    getMintNewEditionFromMasterEditionViaTokenInstructionDataDecoder()
  );
}

export function mintNewEditionFromMasterEditionViaTokenInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountNewMetadata extends string = string,
  TAccountNewEdition extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountNewMint extends string = string,
  TAccountEditionMarkPda extends string = string,
  TAccountNewMintAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountTokenAccountOwner extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountNewMetadataUpdateAuthority extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountRent extends string = string
>(
  accounts: {
    newMetadata: Base58EncodedAddress<TAccountNewMetadata>;
    newEdition: Base58EncodedAddress<TAccountNewEdition>;
    masterEdition: Base58EncodedAddress<TAccountMasterEdition>;
    newMint: Base58EncodedAddress<TAccountNewMint>;
    editionMarkPda: Base58EncodedAddress<TAccountEditionMarkPda>;
    newMintAuthority: Base58EncodedAddress<TAccountNewMintAuthority>;
    payer: Base58EncodedAddress<TAccountPayer>;
    tokenAccountOwner: Base58EncodedAddress<TAccountTokenAccountOwner>;
    tokenAccount: Base58EncodedAddress<TAccountTokenAccount>;
    newMetadataUpdateAuthority: Base58EncodedAddress<TAccountNewMetadataUpdateAuthority>;
    metadata: Base58EncodedAddress<TAccountMetadata>;
    tokenProgram: Base58EncodedAddress<TAccountTokenProgram>;
    systemProgram: Base58EncodedAddress<TAccountSystemProgram>;
    rent: Base58EncodedAddress<TAccountRent>;
  },
  args: MintNewEditionFromMasterEditionViaTokenInstructionDataArgs,
  programId: Base58EncodedAddress<TProgram> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Base58EncodedAddress<TProgram>
): MintNewEditionFromMasterEditionViaTokenInstruction<
  TProgram,
  TAccountNewMetadata,
  TAccountNewEdition,
  TAccountMasterEdition,
  TAccountNewMint,
  TAccountEditionMarkPda,
  TAccountNewMintAuthority,
  TAccountPayer,
  TAccountTokenAccountOwner,
  TAccountTokenAccount,
  TAccountNewMetadataUpdateAuthority,
  TAccountMetadata,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // ...
}
