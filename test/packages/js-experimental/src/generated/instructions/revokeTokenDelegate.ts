/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  CustomGeneratedInstruction,
  ResolvedAccount,
  Signer,
  WrappedInstruction,
  accountMetaWithDefault,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type RevokeTokenDelegateInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSource extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSource extends string
        ? WritableAccount<TAccountSource>
        : TAccountSource,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner>
        : TAccountOwner,
      ...TRemainingAccounts
    ]
  >;

export type RevokeTokenDelegateInstructionData = { discriminator: number };

export type RevokeTokenDelegateInstructionDataArgs = {};

export function getRevokeTokenDelegateInstructionDataEncoder(): Encoder<RevokeTokenDelegateInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<{ discriminator: number }>(
      [['discriminator', getU8Encoder()]],
      { description: 'RevokeTokenDelegateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 5 })
  ) as Encoder<RevokeTokenDelegateInstructionDataArgs>;
}

export function getRevokeTokenDelegateInstructionDataDecoder(): Decoder<RevokeTokenDelegateInstructionData> {
  return getStructDecoder<RevokeTokenDelegateInstructionData>(
    [['discriminator', getU8Decoder()]],
    { description: 'RevokeTokenDelegateInstructionData' }
  ) as Decoder<RevokeTokenDelegateInstructionData>;
}

export function getRevokeTokenDelegateInstructionDataCodec(): Codec<
  RevokeTokenDelegateInstructionDataArgs,
  RevokeTokenDelegateInstructionData
> {
  return combineCodec(
    getRevokeTokenDelegateInstructionDataEncoder(),
    getRevokeTokenDelegateInstructionDataDecoder()
  );
}

export function revokeTokenDelegateInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSource extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    source: TAccountSource extends string
      ? Base58EncodedAddress<TAccountSource>
      : TAccountSource;
    owner: TAccountOwner extends string
      ? Base58EncodedAddress<TAccountOwner>
      : TAccountOwner;
  },
  programAddress: Base58EncodedAddress<TProgram> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.source, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.owner, AccountRole.READONLY_SIGNER),
      ...(remainingAccounts ?? []),
    ],
    data: getRevokeTokenDelegateInstructionDataEncoder().encode({}),
    programAddress,
  } as RevokeTokenDelegateInstruction<
    TProgram,
    TAccountSource,
    TAccountOwner,
    TRemainingAccounts
  >;
}

// Input.
export type RevokeTokenDelegateInput<
  TAccountSource extends string,
  TAccountOwner extends string
> = {
  source: Base58EncodedAddress<TAccountSource>;
  owner: Signer<TAccountOwner>;
};

export async function revokeTokenDelegate<
  TReturn,
  TAccountSource extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  context: Pick<Context, 'getProgramAddress'> &
    CustomGeneratedInstruction<
      RevokeTokenDelegateInstruction<TProgram, TAccountSource, TAccountOwner>,
      TReturn
    >,
  input: RevokeTokenDelegateInput<TAccountSource, TAccountOwner>
): Promise<TReturn>;
export async function revokeTokenDelegate<
  TAccountSource extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  context: Pick<Context, 'getProgramAddress'>,
  input: RevokeTokenDelegateInput<TAccountSource, TAccountOwner>
): Promise<
  WrappedInstruction<
    RevokeTokenDelegateInstruction<TProgram, TAccountSource, TAccountOwner>
  >
>;
export async function revokeTokenDelegate<
  TAccountSource extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  input: RevokeTokenDelegateInput<TAccountSource, TAccountOwner>
): Promise<
  WrappedInstruction<
    RevokeTokenDelegateInstruction<TProgram, TAccountSource, TAccountOwner>
  >
>;
export async function revokeTokenDelegate<
  TReturn,
  TAccountSource extends string,
  TAccountOwner extends string,
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
>(
  rawContext:
    | Pick<Context, 'getProgramAddress'>
    | (Pick<Context, 'getProgramAddress'> &
        CustomGeneratedInstruction<IInstruction, TReturn>)
    | RevokeTokenDelegateInput<TAccountSource, TAccountOwner>,
  rawInput?: RevokeTokenDelegateInput<TAccountSource, TAccountOwner>
): Promise<TReturn | WrappedInstruction<IInstruction>> {
  // Resolve context and input arguments.
  const context = (rawInput === undefined ? {} : rawInput) as
    | Pick<Context, 'getProgramAddress'>
    | (Pick<Context, 'getProgramAddress'> &
        CustomGeneratedInstruction<IInstruction, TReturn>);
  const input = (
    rawInput === undefined ? rawContext : rawInput
  ) as RevokeTokenDelegateInput<TAccountSource, TAccountOwner>;

  // Program address.
  const defaultProgramAddress =
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  const programAddress = (
    context.getProgramAddress
      ? await context.getProgramAddress({
          name: 'splToken',
          address: defaultProgramAddress,
        })
      : defaultProgramAddress
  ) as Base58EncodedAddress<TProgram>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof revokeTokenDelegateInstruction<
      TProgram,
      TAccountSource,
      TAccountOwner
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    source: { value: input.source ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
  };

  // Get account metas and signers.
  const [accountMetas, signers] = getAccountMetasAndSigners(
    accounts,
    'programId',
    programAddress
  );

  // Remaining accounts.
  // TODO

  // Bytes created on chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: revokeTokenDelegateInstruction(
      accountMetas as Record<keyof AccountMetas, IAccountMeta>,
      programAddress
    ),
    signers,
    bytesCreatedOnChain,
  };
}
