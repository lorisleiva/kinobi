/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type SyncNativeInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<SyncNativeInstructionData> &
  IInstructionWithAccounts<[WritableAccount<TAccountAccount>]>;

export type SyncNativeInstructionData = { discriminator: number };

export type SyncNativeInstructionDataArgs = {};

export function getSyncNativeInstructionDataEncoder(): Encoder<SyncNativeInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<SyncNativeInstructionData>(
      [['discriminator', getU8Encoder()]],
      { description: 'SyncNativeInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 17 } as SyncNativeInstructionData)
  ) as Encoder<SyncNativeInstructionDataArgs>;
}

export function getSyncNativeInstructionDataDecoder(): Decoder<SyncNativeInstructionData> {
  return getStructDecoder<SyncNativeInstructionData>(
    [['discriminator', getU8Decoder()]],
    { description: 'SyncNativeInstructionData' }
  ) as Decoder<SyncNativeInstructionData>;
}

export function getSyncNativeInstructionDataCodec(): Codec<
  SyncNativeInstructionDataArgs,
  SyncNativeInstructionData
> {
  return combineCodec(
    getSyncNativeInstructionDataEncoder(),
    getSyncNativeInstructionDataDecoder()
  );
}

export function syncNativeInstruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAccount extends string = string
>(
  accounts: {
    account: Base58EncodedAddress<TAccountAccount>;
  },
  programAddress: Base58EncodedAddress<TProgram> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Base58EncodedAddress<TProgram>
): SyncNativeInstruction<TProgram, TAccountAccount> {
  return {
    accounts: [
      { address: accounts.account, role: AccountRole.WRITABLE_SIGNER },
    ],
    data: getSyncNativeInstructionDataEncoder().encode({}),
    programAddress,
  };
}
