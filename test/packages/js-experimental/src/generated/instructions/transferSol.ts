/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type TransferSolInstruction<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountSource extends string = string,
  TAccountDestination extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<TransferSolInstructionData> &
  IInstructionWithAccounts<
    [
      WritableSignerAccount<TAccountSource>,
      WritableAccount<TAccountDestination>
    ]
  >;

export type TransferSolInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type TransferSolInstructionDataArgs = { amount: number | bigint };

export function getTransferSolInstructionDataEncoder(): Encoder<TransferSolInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<TransferSolInstructionData>(
      [
        ['discriminator', getU32Encoder()],
        ['amount', getU64Encoder()],
      ],
      { description: 'TransferSolInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 2 } as TransferSolInstructionData)
  ) as Encoder<TransferSolInstructionDataArgs>;
}

export function getTransferSolInstructionDataDecoder(): Decoder<TransferSolInstructionData> {
  return getStructDecoder<TransferSolInstructionData>(
    [
      ['discriminator', getU32Decoder()],
      ['amount', getU64Decoder()],
    ],
    { description: 'TransferSolInstructionData' }
  ) as Decoder<TransferSolInstructionData>;
}

export function getTransferSolInstructionDataCodec(): Codec<
  TransferSolInstructionDataArgs,
  TransferSolInstructionData
> {
  return combineCodec(
    getTransferSolInstructionDataEncoder(),
    getTransferSolInstructionDataDecoder()
  );
}

export function transferSolInstruction<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountSource extends string = string,
  TAccountDestination extends string = string
>(
  accounts: {
    source: Base58EncodedAddress<TAccountSource>;
    destination: Base58EncodedAddress<TAccountDestination>;
  },
  args: TransferSolInstructionDataArgs,
  programAddress: Base58EncodedAddress<TProgram> = '11111111111111111111111111111111' as Base58EncodedAddress<TProgram>
): TransferSolInstruction<TProgram, TAccountSource, TAccountDestination> {
  return {
    accounts: [
      { address: accounts.source, role: AccountRole.WRITABLE_SIGNER },
      { address: accounts.destination, role: AccountRole.WRITABLE_SIGNER },
    ],
    data: getTransferSolInstructionDataEncoder().encode(args),
    programAddress,
  };
}
