/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import { getStringDecoder, getStringEncoder } from '@solana/codecs-strings';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  Context,
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  Creator,
  CreatorArgs,
  getCreatorDecoder,
  getCreatorEncoder,
} from '../types';

// Output.
export type UpdateMetadataAccountInstruction<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountUpdateAuthority extends string
        ? ReadonlySignerAccount<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      ...TRemainingAccounts
    ]
  >;

// Output.
export type UpdateMetadataAccountInstructionWithSigners<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountUpdateAuthority extends string
        ? ReadonlySignerAccount<TAccountUpdateAuthority> &
            IAccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      ...TRemainingAccounts
    ]
  >;

export type UpdateMetadataAccountInstructionData = {
  discriminator: number;
  data: Option<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<Creator>>;
  }>;
  updateAuthority: Option<Address>;
  primarySaleHappened: Option<boolean>;
};

export type UpdateMetadataAccountInstructionDataArgs = {
  data: OptionOrNullable<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: OptionOrNullable<Array<CreatorArgs>>;
  }>;
  updateAuthority: OptionOrNullable<Address>;
  primarySaleHappened: OptionOrNullable<boolean>;
};

export function getUpdateMetadataAccountInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: number;
      data: OptionOrNullable<{
        name: string;
        symbol: string;
        uri: string;
        sellerFeeBasisPoints: number;
        creators: OptionOrNullable<Array<CreatorArgs>>;
      }>;
      updateAuthority: OptionOrNullable<Address>;
      primarySaleHappened: OptionOrNullable<boolean>;
    }>([
      ['discriminator', getU8Encoder()],
      [
        'data',
        getOptionEncoder(
          getStructEncoder<{
            name: string;
            symbol: string;
            uri: string;
            sellerFeeBasisPoints: number;
            creators: OptionOrNullable<Array<CreatorArgs>>;
          }>([
            ['name', getStringEncoder()],
            ['symbol', getStringEncoder()],
            ['uri', getStringEncoder()],
            ['sellerFeeBasisPoints', getU16Encoder()],
            [
              'creators',
              getOptionEncoder(getArrayEncoder(getCreatorEncoder())),
            ],
          ])
        ),
      ],
      ['updateAuthority', getOptionEncoder(getAddressEncoder())],
      ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  ) satisfies Encoder<UpdateMetadataAccountInstructionDataArgs>;
}

export function getUpdateMetadataAccountInstructionDataDecoder() {
  return getStructDecoder<UpdateMetadataAccountInstructionData>([
    ['discriminator', getU8Decoder()],
    [
      'data',
      getOptionDecoder(
        getStructDecoder<{
          name: string;
          symbol: string;
          uri: string;
          sellerFeeBasisPoints: number;
          creators: Option<Array<Creator>>;
        }>([
          ['name', getStringDecoder()],
          ['symbol', getStringDecoder()],
          ['uri', getStringDecoder()],
          ['sellerFeeBasisPoints', getU16Decoder()],
          ['creators', getOptionDecoder(getArrayDecoder(getCreatorDecoder()))],
        ])
      ),
    ],
    ['updateAuthority', getOptionDecoder(getAddressDecoder())],
    ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
  ]) satisfies Decoder<UpdateMetadataAccountInstructionData>;
}

export function getUpdateMetadataAccountInstructionDataCodec(): Codec<
  UpdateMetadataAccountInstructionDataArgs,
  UpdateMetadataAccountInstructionData
> {
  return combineCodec(
    getUpdateMetadataAccountInstructionDataEncoder(),
    getUpdateMetadataAccountInstructionDataDecoder()
  );
}

function getUpdateMetadataAccountInstructionRaw<
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountMetadata extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    metadata: TAccountMetadata extends string
      ? Address<TAccountMetadata>
      : TAccountMetadata;
    updateAuthority: TAccountUpdateAuthority extends string
      ? Address<TAccountUpdateAuthority>
      : TAccountUpdateAuthority;
  },
  args: UpdateMetadataAccountInstructionDataArgs,
  programAddress: Address<TProgram> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.metadata, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.updateAuthority,
        AccountRole.READONLY_SIGNER
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getUpdateMetadataAccountInstructionDataEncoder().encode(args),
    programAddress,
  } as UpdateMetadataAccountInstruction<
    TProgram,
    TAccountMetadata,
    TAccountUpdateAuthority,
    TRemainingAccounts
  >;
}

// Input.
export type UpdateMetadataAccountInput<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string
> = {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Update authority key */
  updateAuthority: Address<TAccountUpdateAuthority>;
  data: UpdateMetadataAccountInstructionDataArgs['data'];
  updateAuthorityArg: UpdateMetadataAccountInstructionDataArgs['updateAuthority'];
  primarySaleHappened: UpdateMetadataAccountInstructionDataArgs['primarySaleHappened'];
};

// Input.
export type UpdateMetadataAccountInputWithSigners<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string
> = {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Update authority key */
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  data: UpdateMetadataAccountInstructionDataArgs['data'];
  updateAuthorityArg: UpdateMetadataAccountInstructionDataArgs['updateAuthority'];
  primarySaleHappened: UpdateMetadataAccountInstructionDataArgs['primarySaleHappened'];
};

// Input.
export type UpdateMetadataAccountAsyncInput<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string
> = {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Update authority key */
  updateAuthority: Address<TAccountUpdateAuthority>;
  data: UpdateMetadataAccountInstructionDataArgs['data'];
  updateAuthorityArg: UpdateMetadataAccountInstructionDataArgs['updateAuthority'];
  primarySaleHappened: UpdateMetadataAccountInstructionDataArgs['primarySaleHappened'];
};

// Input.
export type UpdateMetadataAccountAsyncInputWithSigners<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string
> = {
  /** Metadata account */
  metadata: Address<TAccountMetadata>;
  /** Update authority key */
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  data: UpdateMetadataAccountInstructionDataArgs['data'];
  updateAuthorityArg: UpdateMetadataAccountInstructionDataArgs['updateAuthority'];
  primarySaleHappened: UpdateMetadataAccountInstructionDataArgs['primarySaleHappened'];
};

export async function getUpdateMetadataAccountInstructionAsync<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
>(
  context: Pick<Context, 'getProgramAddress'>,
  input: UpdateMetadataAccountAsyncInputWithSigners<
    TAccountMetadata,
    TAccountUpdateAuthority
  >
): Promise<
  UpdateMetadataAccountInstructionWithSigners<
    TProgram,
    TAccountMetadata,
    ReadonlySignerAccount<TAccountUpdateAuthority> &
      IAccountSignerMeta<TAccountUpdateAuthority>
  >
>;
export async function getUpdateMetadataAccountInstructionAsync<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
>(
  context: Pick<Context, 'getProgramAddress'>,
  input: UpdateMetadataAccountAsyncInput<
    TAccountMetadata,
    TAccountUpdateAuthority
  >
): Promise<
  UpdateMetadataAccountInstruction<
    TProgram,
    TAccountMetadata,
    ReadonlySignerAccount<TAccountUpdateAuthority> &
      IAccountSignerMeta<TAccountUpdateAuthority>
  >
>;
export async function getUpdateMetadataAccountInstructionAsync<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
>(
  input: UpdateMetadataAccountAsyncInputWithSigners<
    TAccountMetadata,
    TAccountUpdateAuthority
  >
): Promise<
  UpdateMetadataAccountInstructionWithSigners<
    TProgram,
    TAccountMetadata,
    ReadonlySignerAccount<TAccountUpdateAuthority> &
      IAccountSignerMeta<TAccountUpdateAuthority>
  >
>;
export async function getUpdateMetadataAccountInstructionAsync<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
>(
  input: UpdateMetadataAccountAsyncInput<
    TAccountMetadata,
    TAccountUpdateAuthority
  >
): Promise<
  UpdateMetadataAccountInstruction<
    TProgram,
    TAccountMetadata,
    ReadonlySignerAccount<TAccountUpdateAuthority> &
      IAccountSignerMeta<TAccountUpdateAuthority>
  >
>;
export async function getUpdateMetadataAccountInstructionAsync<
  TAccountMetadata extends string,
  TAccountUpdateAuthority extends string,
  TProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
>(
  rawContext:
    | Pick<Context, 'getProgramAddress'>
    | UpdateMetadataAccountAsyncInput<
        TAccountMetadata,
        TAccountUpdateAuthority
      >,
  rawInput?: UpdateMetadataAccountAsyncInput<
    TAccountMetadata,
    TAccountUpdateAuthority
  >
): Promise<IInstruction> {
  // Resolve context and input arguments.
  const context = (rawInput === undefined ? {} : rawContext) as Pick<
    Context,
    'getProgramAddress'
  >;
  const input = (
    rawInput === undefined ? rawContext : rawInput
  ) as UpdateMetadataAccountAsyncInput<
    TAccountMetadata,
    TAccountUpdateAuthority
  >;

  // Program address.
  const defaultProgramAddress =
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  const programAddress = (
    context.getProgramAddress
      ? await context.getProgramAddress({
          name: 'mplTokenMetadata',
          address: defaultProgramAddress,
        })
      : defaultProgramAddress
  ) as Address<TProgram>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getUpdateMetadataAccountInstructionRaw<
      TProgram,
      TAccountMetadata,
      TAccountUpdateAuthority
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    metadata: { value: input.metadata ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false,
    },
  };

  // Original args.
  const args = { ...input, updateAuthority: input.updateAuthorityArg };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = [];

  // Bytes created on chain.
  const bytesCreatedOnChain = 0;

  return Object.freeze({
    ...getUpdateMetadataAccountInstructionRaw(
      accountMetas as Record<keyof AccountMetas, IAccountMeta>,
      args as UpdateMetadataAccountInstructionDataArgs,
      programAddress,
      remainingAccounts
    ),
    bytesCreatedOnChain,
  });
}
