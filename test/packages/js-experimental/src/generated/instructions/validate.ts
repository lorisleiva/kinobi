/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import { getStringDecoder, getStringEncoder } from '@solana/codecs-strings';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  Operation,
  OperationArgs,
  Payload,
  PayloadArgs,
  getOperationDecoder,
  getOperationEncoder,
  getPayloadDecoder,
  getPayloadEncoder,
} from '../types';

// Output.
export type ValidateInstruction<
  TProgram extends string = 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg',
  TAccountPayer extends string = string,
  TAccountRuleSet extends string = string,
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountOptRuleSigner1 extends string = string,
  TAccountOptRuleSigner2 extends string = string,
  TAccountOptRuleSigner3 extends string = string,
  TAccountOptRuleSigner4 extends string = string,
  TAccountOptRuleSigner5 extends string = string,
  TAccountOptRuleNonsigner1 extends string = string,
  TAccountOptRuleNonsigner2 extends string = string,
  TAccountOptRuleNonsigner3 extends string = string,
  TAccountOptRuleNonsigner4 extends string = string,
  TAccountOptRuleNonsigner5 extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<ValidateInstructionData> &
  IInstructionWithAccounts<
    [
      WritableSignerAccount<TAccountPayer>,
      WritableAccount<TAccountRuleSet>,
      ReadonlyAccount<TAccountSystemProgram>,
      (
        | ReadonlySignerAccount<TAccountOptRuleSigner1>
        | ReadonlyAccount<TAccountOptRuleSigner1>
      ),
      ReadonlySignerAccount<TAccountOptRuleSigner2>,
      ReadonlySignerAccount<TAccountOptRuleSigner3>,
      ReadonlySignerAccount<TAccountOptRuleSigner4>,
      ReadonlySignerAccount<TAccountOptRuleSigner5>,
      ReadonlyAccount<TAccountOptRuleNonsigner1>,
      ReadonlyAccount<TAccountOptRuleNonsigner2>,
      ReadonlyAccount<TAccountOptRuleNonsigner3>,
      ReadonlyAccount<TAccountOptRuleNonsigner4>,
      ReadonlyAccount<TAccountOptRuleNonsigner5>
    ]
  >;

export type ValidateInstructionData = {
  discriminator: number;
  ruleSetName: string;
  operation: Operation;
  payload: Payload;
};

export type ValidateInstructionDataArgs = {
  ruleSetName: string;
  operation: OperationArgs;
  payload: PayloadArgs;
};

export function getValidateInstructionDataEncoder(): Encoder<ValidateInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<ValidateInstructionData>(
      [
        ['discriminator', getU8Encoder()],
        ['ruleSetName', getStringEncoder()],
        ['operation', getOperationEncoder()],
        ['payload', getPayloadEncoder()],
      ],
      { description: 'ValidateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 } as ValidateInstructionData)
  ) as Encoder<ValidateInstructionDataArgs>;
}

export function getValidateInstructionDataDecoder(): Decoder<ValidateInstructionData> {
  return getStructDecoder<ValidateInstructionData>(
    [
      ['discriminator', getU8Decoder()],
      ['ruleSetName', getStringDecoder()],
      ['operation', getOperationDecoder()],
      ['payload', getPayloadDecoder()],
    ],
    { description: 'ValidateInstructionData' }
  ) as Decoder<ValidateInstructionData>;
}

export function getValidateInstructionDataCodec(): Codec<
  ValidateInstructionDataArgs,
  ValidateInstructionData
> {
  return combineCodec(
    getValidateInstructionDataEncoder(),
    getValidateInstructionDataDecoder()
  );
}

export function validateInstruction<
  TProgram extends string = 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg',
  TAccountPayer extends string = string,
  TAccountRuleSet extends string = string,
  TAccountSystemProgram extends string = '11111111111111111111111111111111',
  TAccountOptRuleSigner1 extends string = string,
  TAccountOptRuleSigner2 extends string = string,
  TAccountOptRuleSigner3 extends string = string,
  TAccountOptRuleSigner4 extends string = string,
  TAccountOptRuleSigner5 extends string = string,
  TAccountOptRuleNonsigner1 extends string = string,
  TAccountOptRuleNonsigner2 extends string = string,
  TAccountOptRuleNonsigner3 extends string = string,
  TAccountOptRuleNonsigner4 extends string = string,
  TAccountOptRuleNonsigner5 extends string = string
>(
  accounts: {
    payer: Base58EncodedAddress<TAccountPayer>;
    ruleSet: Base58EncodedAddress<TAccountRuleSet>;
    systemProgram: Base58EncodedAddress<TAccountSystemProgram>;
    optRuleSigner1: Base58EncodedAddress<TAccountOptRuleSigner1>;
    optRuleSigner2: Base58EncodedAddress<TAccountOptRuleSigner2>;
    optRuleSigner3: Base58EncodedAddress<TAccountOptRuleSigner3>;
    optRuleSigner4: Base58EncodedAddress<TAccountOptRuleSigner4>;
    optRuleSigner5: Base58EncodedAddress<TAccountOptRuleSigner5>;
    optRuleNonsigner1: Base58EncodedAddress<TAccountOptRuleNonsigner1>;
    optRuleNonsigner2: Base58EncodedAddress<TAccountOptRuleNonsigner2>;
    optRuleNonsigner3: Base58EncodedAddress<TAccountOptRuleNonsigner3>;
    optRuleNonsigner4: Base58EncodedAddress<TAccountOptRuleNonsigner4>;
    optRuleNonsigner5: Base58EncodedAddress<TAccountOptRuleNonsigner5>;
  },
  args: ValidateInstructionDataArgs,
  programId: Base58EncodedAddress<TProgram> = 'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg' as Base58EncodedAddress<TProgram>
): ValidateInstruction<
  TProgram,
  TAccountPayer,
  TAccountRuleSet,
  TAccountSystemProgram,
  TAccountOptRuleSigner1,
  TAccountOptRuleSigner2,
  TAccountOptRuleSigner3,
  TAccountOptRuleSigner4,
  TAccountOptRuleSigner5,
  TAccountOptRuleNonsigner1,
  TAccountOptRuleNonsigner2,
  TAccountOptRuleNonsigner3,
  TAccountOptRuleNonsigner4,
  TAccountOptRuleNonsigner5
> {
  // ...
}
