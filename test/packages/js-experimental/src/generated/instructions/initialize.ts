/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataDecoder,
  getCandyMachineDataEncoder,
} from '../types';

// Output.
export type InitializeInstruction<
  TProgram extends string = 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR',
  TAccountCandyMachine extends string = string,
  TAccountAuthorityPda extends string = string,
  TAccountAuthority extends string = string,
  TAccountPayer extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountCollectionMasterEdition extends string = string,
  TAccountCollectionUpdateAuthority extends string = string,
  TAccountCollectionAuthorityRecord extends string = string,
  TAccountTokenMetadataProgram extends string = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends string = '11111111111111111111111111111111'
> = IInstruction<TProgram> &
  IInstructionWithData<InitializeInstructionData> &
  IInstructionWithAccounts<
    [
      WritableAccount<TAccountCandyMachine>,
      WritableAccount<TAccountAuthorityPda>,
      ReadonlyAccount<TAccountAuthority>,
      ReadonlySignerAccount<TAccountPayer>,
      ReadonlyAccount<TAccountCollectionMetadata>,
      ReadonlyAccount<TAccountCollectionMint>,
      ReadonlyAccount<TAccountCollectionMasterEdition>,
      WritableSignerAccount<TAccountCollectionUpdateAuthority>,
      WritableAccount<TAccountCollectionAuthorityRecord>,
      ReadonlyAccount<TAccountTokenMetadataProgram>,
      ReadonlyAccount<TAccountSystemProgram>
    ]
  >;

export type InitializeInstructionData = {
  discriminator: Array<number>;
  data: CandyMachineData;
};

export type InitializeInstructionDataArgs = { data: CandyMachineDataArgs };

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<InitializeInstructionData>(
      [
        ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
        ['data', getCandyMachineDataEncoder()],
      ],
      { description: 'InitializeInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
      } as InitializeInstructionData)
  ) as Encoder<InitializeInstructionDataArgs>;
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder<InitializeInstructionData>(
    [
      ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
      ['data', getCandyMachineDataDecoder()],
    ],
    { description: 'InitializeInstructionData' }
  ) as Decoder<InitializeInstructionData>;
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}
