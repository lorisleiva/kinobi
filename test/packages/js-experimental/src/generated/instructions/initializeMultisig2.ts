/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from 'umi';
import { Serializer } from 'umiSerializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type InitializeMultisig2Instruction<
  TProgram extends string = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMultisig extends string = string,
  TAccountSigner extends string = string
> = IInstruction<TProgram> &
  IInstructionWithData<InitializeMultisig2InstructionData> &
  IInstructionWithAccounts<
    [WritableAccount<TAccountMultisig>, ReadonlyAccount<TAccountSigner>]
  >;

export type InitializeMultisig2InstructionData = {
  discriminator: number;
  m: number;
};

export type InitializeMultisig2InstructionDataArgs = { m: number };

export function getInitializeMultisig2InstructionDataEncoder(): Encoder<InitializeMultisig2InstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<InitializeMultisig2InstructionData>(
      [
        ['discriminator', getU8Encoder()],
        ['m', getU8Encoder()],
      ],
      { description: 'InitializeMultisig2InstructionData' }
    ),
    (value) =>
      ({ ...value, discriminator: 19 } as InitializeMultisig2InstructionData)
  ) as Encoder<InitializeMultisig2InstructionDataArgs>;
}

export function getInitializeMultisig2InstructionDataDecoder(): Decoder<InitializeMultisig2InstructionData> {
  return getStructDecoder<InitializeMultisig2InstructionData>(
    [
      ['discriminator', getU8Decoder()],
      ['m', getU8Decoder()],
    ],
    { description: 'InitializeMultisig2InstructionData' }
  ) as Decoder<InitializeMultisig2InstructionData>;
}

export function getInitializeMultisig2InstructionDataCodec(): Codec<
  InitializeMultisig2InstructionDataArgs,
  InitializeMultisig2InstructionData
> {
  return combineCodec(
    getInitializeMultisig2InstructionDataEncoder(),
    getInitializeMultisig2InstructionDataDecoder()
  );
}
