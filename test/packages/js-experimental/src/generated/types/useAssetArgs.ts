/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/web3.js';

export type UseAssetArgs = { __kind: 'V1'; useCount: bigint };

export type UseAssetArgsArgs = { __kind: 'V1'; useCount: number | bigint };

export function getUseAssetArgsEncoder(): Encoder<UseAssetArgsArgs> {
  return getDiscriminatedUnionEncoder([
    ['V1', getStructEncoder([['useCount', getU64Encoder()]])],
  ]);
}

export function getUseAssetArgsDecoder(): Decoder<UseAssetArgs> {
  return getDiscriminatedUnionDecoder([
    ['V1', getStructDecoder([['useCount', getU64Decoder()]])],
  ]);
}

export function getUseAssetArgsCodec(): Codec<UseAssetArgsArgs, UseAssetArgs> {
  return combineCodec(getUseAssetArgsEncoder(), getUseAssetArgsDecoder());
}

// Data Enum Helpers.
export function useAssetArgs(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<UseAssetArgsArgs, '__kind', 'V1'>
): GetDiscriminatedUnionVariant<UseAssetArgsArgs, '__kind', 'V1'>;
export function useAssetArgs<K extends UseAssetArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUseAssetArgs<K extends UseAssetArgs['__kind']>(
  kind: K,
  value: UseAssetArgs
): value is UseAssetArgs & { __kind: K } {
  return value.__kind === kind;
}
