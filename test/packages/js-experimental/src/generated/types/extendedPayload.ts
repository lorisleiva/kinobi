/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  getMapDecoder,
  getMapEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import { getStringDecoder, getStringEncoder } from 'solanaCodecsStrings';
import {
  PayloadKey,
  PayloadKeyArgs,
  PayloadType,
  PayloadTypeArgs,
  getPayloadKeyDecoder,
  getPayloadKeyEncoder,
  getPayloadTypeDecoder,
  getPayloadTypeEncoder,
} from '.';

export type ExtendedPayload = {
  map: Map<PayloadKey, PayloadType>;
  args: [number, string];
};

export type ExtendedPayloadArgs = {
  map: Map<PayloadKeyArgs, PayloadTypeArgs>;
  args: [number, string];
};

export function getExtendedPayloadEncoder(): Encoder<ExtendedPayloadArgs> {
  return getStructEncoder<ExtendedPayload>(
    [
      ['map', getMapEncoder(getPayloadKeyEncoder(), getPayloadTypeEncoder())],
      ['args', getTupleEncoder([[getU8Encoder(), getStringEncoder()]])],
    ],
    { description: 'ExtendedPayload' }
  ) as Encoder<ExtendedPayloadArgs>;
}

export function getExtendedPayloadDecoder(): Decoder<ExtendedPayload> {
  return getStructDecoder<ExtendedPayload>(
    [
      ['map', getMapDecoder(getPayloadKeyDecoder(), getPayloadTypeDecoder())],
      ['args', getTupleDecoder([[getU8Decoder(), getStringDecoder()]])],
    ],
    { description: 'ExtendedPayload' }
  ) as Decoder<ExtendedPayload>;
}

export function getExtendedPayloadCodec(): Codec<
  ExtendedPayloadArgs,
  ExtendedPayload
> {
  return combineCodec(getExtendedPayloadEncoder(), getExtendedPayloadDecoder());
}
