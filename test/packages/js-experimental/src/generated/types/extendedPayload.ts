/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getMapDecoder,
  getMapEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/web3.js';
import {
  getPayloadKeyDecoder,
  getPayloadKeyEncoder,
  getPayloadTypeDecoder,
  getPayloadTypeEncoder,
  type PayloadKey,
  type PayloadKeyArgs,
  type PayloadType,
  type PayloadTypeArgs,
} from '.';

export type ExtendedPayload = {
  map: Map<PayloadKey, PayloadType>;
  args: readonly [number, string];
};

export type ExtendedPayloadArgs = {
  map: Map<PayloadKeyArgs, PayloadTypeArgs>;
  args: readonly [number, string];
};

export function getExtendedPayloadEncoder(): Encoder<ExtendedPayloadArgs> {
  return getStructEncoder([
    ['map', getMapEncoder(getPayloadKeyEncoder(), getPayloadTypeEncoder())],
    [
      'args',
      getTupleEncoder([
        getU8Encoder(),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ]),
    ],
  ]);
}

export function getExtendedPayloadDecoder(): Decoder<ExtendedPayload> {
  return getStructDecoder([
    ['map', getMapDecoder(getPayloadKeyDecoder(), getPayloadTypeDecoder())],
    [
      'args',
      getTupleDecoder([
        getU8Decoder(),
        addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
      ]),
    ],
  ]);
}

export function getExtendedPayloadCodec(): Codec<
  ExtendedPayloadArgs,
  ExtendedPayload
> {
  return combineCodec(getExtendedPayloadEncoder(), getExtendedPayloadDecoder());
}
