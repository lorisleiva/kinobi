/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  some,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type Option,
  type OptionOrNullable,
} from '@solana/web3.js';
import {
  TokenStandard,
  getAuthorityTypeDecoder,
  getAuthorityTypeEncoder,
  getAuthorizationDataDecoder,
  getAuthorizationDataEncoder,
  getCollectionDecoder,
  getCollectionDetailsDecoder,
  getCollectionDetailsEncoder,
  getCollectionEncoder,
  getCreatorDecoder,
  getCreatorEncoder,
  getDelegateStateDecoder,
  getDelegateStateEncoder,
  getProgrammableConfigDecoder,
  getProgrammableConfigEncoder,
  getTokenStandardDecoder,
  getTokenStandardEncoder,
  getUsesDecoder,
  getUsesEncoder,
  type AuthorityType,
  type AuthorityTypeArgs,
  type AuthorizationData,
  type AuthorizationDataArgs,
  type Collection,
  type CollectionArgs,
  type CollectionDetails,
  type CollectionDetailsArgs,
  type Creator,
  type CreatorArgs,
  type DelegateState,
  type DelegateStateArgs,
  type ProgrammableConfig,
  type ProgrammableConfigArgs,
  type TokenStandard,
  type TokenStandardArgs,
  type Uses,
  type UsesArgs,
} from '.';

export type UpdateArgs = {
  __kind: 'V1';
  authorizationData: Option<AuthorizationData>;
  newUpdateAuthority: Option<Address>;
  data: Option<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<Creator>>;
  }>;
  primarySaleHappened: Option<boolean>;
  isMutable: Option<boolean>;
  tokenStandard: Option<TokenStandard>;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  programmableConfig: Option<ProgrammableConfig>;
  delegateState: Option<DelegateState>;
  authorityType: AuthorityType;
};

export type UpdateArgsArgs = {
  __kind: 'V1';
  authorizationData: OptionOrNullable<AuthorizationDataArgs>;
  newUpdateAuthority: OptionOrNullable<Address>;
  data: OptionOrNullable<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: OptionOrNullable<Array<CreatorArgs>>;
  }>;
  primarySaleHappened: OptionOrNullable<boolean>;
  isMutable: OptionOrNullable<boolean>;
  tokenStandard?: OptionOrNullable<TokenStandardArgs>;
  collection: OptionOrNullable<CollectionArgs>;
  uses: OptionOrNullable<UsesArgs>;
  collectionDetails: OptionOrNullable<CollectionDetailsArgs>;
  programmableConfig: OptionOrNullable<ProgrammableConfigArgs>;
  delegateState: OptionOrNullable<DelegateStateArgs>;
  authorityType: AuthorityTypeArgs;
};

export function getUpdateArgsEncoder(): Encoder<UpdateArgsArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'V1',
      transformEncoder(
        getStructEncoder([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
          ['newUpdateAuthority', getOptionEncoder(getAddressEncoder())],
          [
            'data',
            getOptionEncoder(
              getStructEncoder([
                [
                  'name',
                  addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
                ],
                [
                  'symbol',
                  addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
                ],
                [
                  'uri',
                  addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
                ],
                ['sellerFeeBasisPoints', getU16Encoder()],
                [
                  'creators',
                  getOptionEncoder(getArrayEncoder(getCreatorEncoder())),
                ],
              ])
            ),
          ],
          ['primarySaleHappened', getOptionEncoder(getBooleanEncoder())],
          ['isMutable', getOptionEncoder(getBooleanEncoder())],
          ['tokenStandard', getOptionEncoder(getTokenStandardEncoder())],
          ['collection', getOptionEncoder(getCollectionEncoder())],
          ['uses', getOptionEncoder(getUsesEncoder())],
          [
            'collectionDetails',
            getOptionEncoder(getCollectionDetailsEncoder()),
          ],
          [
            'programmableConfig',
            getOptionEncoder(getProgrammableConfigEncoder()),
          ],
          ['delegateState', getOptionEncoder(getDelegateStateEncoder())],
          ['authorityType', getAuthorityTypeEncoder()],
        ]),
        (value) => ({
          ...value,
          tokenStandard: value.tokenStandard ?? some(TokenStandard.NonFungible),
        })
      ),
    ],
  ]);
}

export function getUpdateArgsDecoder(): Decoder<UpdateArgs> {
  return getDiscriminatedUnionDecoder([
    [
      'V1',
      getStructDecoder([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
        ['newUpdateAuthority', getOptionDecoder(getAddressDecoder())],
        [
          'data',
          getOptionDecoder(
            getStructDecoder([
              ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
              [
                'symbol',
                addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
              ],
              ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
              ['sellerFeeBasisPoints', getU16Decoder()],
              [
                'creators',
                getOptionDecoder(getArrayDecoder(getCreatorDecoder())),
              ],
            ])
          ),
        ],
        ['primarySaleHappened', getOptionDecoder(getBooleanDecoder())],
        ['isMutable', getOptionDecoder(getBooleanDecoder())],
        ['tokenStandard', getOptionDecoder(getTokenStandardDecoder())],
        ['collection', getOptionDecoder(getCollectionDecoder())],
        ['uses', getOptionDecoder(getUsesDecoder())],
        ['collectionDetails', getOptionDecoder(getCollectionDetailsDecoder())],
        [
          'programmableConfig',
          getOptionDecoder(getProgrammableConfigDecoder()),
        ],
        ['delegateState', getOptionDecoder(getDelegateStateDecoder())],
        ['authorityType', getAuthorityTypeDecoder()],
      ]),
    ],
  ]);
}

export function getUpdateArgsCodec(): Codec<UpdateArgsArgs, UpdateArgs> {
  return combineCodec(getUpdateArgsEncoder(), getUpdateArgsDecoder());
}

// Data Enum Helpers.
export function updateArgs(
  kind: 'V1',
  data: GetDiscriminatedUnionVariantContent<UpdateArgsArgs, '__kind', 'V1'>
): GetDiscriminatedUnionVariant<UpdateArgsArgs, '__kind', 'V1'>;
export function updateArgs<K extends UpdateArgsArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUpdateArgs<K extends UpdateArgs['__kind']>(
  kind: K,
  value: UpdateArgs
): value is UpdateArgs & { __kind: K } {
  return value.__kind === kind;
}
