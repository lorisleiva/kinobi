/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from 'umi';
import {
  Serializer,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from 'umiSerializers';

export type Collection = { verified: boolean; key: PublicKey };

export type CollectionArgs = { verified?: boolean; key: PublicKey };

export function getCollectionSerializer(): Serializer<
  CollectionArgs,
  Collection
> {
  return mapSerializer<CollectionArgs, any, Collection>(
    struct<Collection>(
      [
        ['verified', bool()],
        ['key', publicKeySerializer()],
      ],
      { description: 'Collection' }
    ),
    (value) => ({ ...value, verified: value.verified ?? false })
  ) as Serializer<CollectionArgs, Collection>;
}
