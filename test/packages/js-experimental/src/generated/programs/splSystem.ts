/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { containsBytes, getU32Encoder } from '@solana/codecs';
import {
  ParsedCreateAccountInstruction,
  ParsedTransferSolInstruction,
} from '../instructions';

export const SPL_SYSTEM_PROGRAM_ADDRESS =
  '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;

export enum SplSystemInstruction {
  CreateAccount,
  TransferSol,
}

export function identifySplSystemInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): SplSystemInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU32Encoder().encode(0), 0)) {
    return SplSystemInstruction.CreateAccount;
  }
  if (containsBytes(data, getU32Encoder().encode(2), 0)) {
    return SplSystemInstruction.TransferSol;
  }
  throw new Error(
    'The provided instruction could not be identified as a splSystem instruction.'
  );
}

export type ParsedSplSystemInstruction<
  TProgram extends string = '11111111111111111111111111111111',
> =
  | ({
      instructionType: SplSystemInstruction.CreateAccount;
    } & ParsedCreateAccountInstruction<TProgram>)
  | ({
      instructionType: SplSystemInstruction.TransferSol;
    } & ParsedTransferSolInstruction<TProgram>);
