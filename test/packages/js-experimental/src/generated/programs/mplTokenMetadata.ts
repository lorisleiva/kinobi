/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs-numbers';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  MplTokenMetadataProgramError,
  MplTokenMetadataProgramErrorCode,
  getMplTokenMetadataProgramErrorFromCode,
} from '../errors';
import { memcmp } from '../shared';
import { TmKey, getTmKeyEncoder } from '../types';

export const MPL_TOKEN_METADATA_PROGRAM_ADDRESS =
  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;

export type MplTokenMetadataProgram =
  Program<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'> &
    ProgramWithErrors<
      MplTokenMetadataProgramErrorCode,
      MplTokenMetadataProgramError
    >;

export function createMplTokenMetadataProgram(): MplTokenMetadataProgram {
  return {
    name: 'mplTokenMetadata',
    address: MPL_TOKEN_METADATA_PROGRAM_ADDRESS,
    getErrorFromCode(code: MplTokenMetadataProgramErrorCode, cause?: Error) {
      return getMplTokenMetadataProgramErrorFromCode(code, cause);
    },
  };
}

export enum MplTokenMetadataAccount {
  CollectionAuthorityRecord,
  DelegateRecord,
  Edition,
  EditionMarker,
  TokenOwnedEscrow,
  MasterEditionV2,
  MasterEditionV1,
  Metadata,
  ReservationListV2,
  ReservationListV1,
  UseAuthorityRecord,
}

export function identifyMplTokenMetadataAccount(
  account: { data: Uint8Array } | Uint8Array
): MplTokenMetadataAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (
    memcmp(data, getTmKeyEncoder().encode(TmKey.CollectionAuthorityRecord), 0)
  ) {
    return MplTokenMetadataAccount.CollectionAuthorityRecord;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.Delegate), 0)) {
    return MplTokenMetadataAccount.DelegateRecord;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.EditionV1), 0)) {
    return MplTokenMetadataAccount.Edition;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.EditionMarker), 0)) {
    return MplTokenMetadataAccount.EditionMarker;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.TokenOwnedEscrow), 0)) {
    return MplTokenMetadataAccount.TokenOwnedEscrow;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.MasterEditionV2), 0)) {
    return MplTokenMetadataAccount.MasterEditionV2;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.MasterEditionV1), 0)) {
    return MplTokenMetadataAccount.MasterEditionV1;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.MetadataV1), 0)) {
    return MplTokenMetadataAccount.Metadata;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.ReservationListV2), 0)) {
    return MplTokenMetadataAccount.ReservationListV2;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.ReservationListV1), 0)) {
    return MplTokenMetadataAccount.ReservationListV1;
  }
  if (memcmp(data, getTmKeyEncoder().encode(TmKey.UseAuthorityRecord), 0)) {
    return MplTokenMetadataAccount.UseAuthorityRecord;
  }
  throw new Error(
    'The provided account could not be identified as a mplTokenMetadata account.'
  );
}

export enum MplTokenMetadataInstruction {
  CreateMetadataAccount,
  UpdateMetadataAccount,
  DeprecatedCreateMasterEdition,
  DeprecatedMintNewEditionFromMasterEditionViaPrintingToken,
  UpdatePrimarySaleHappenedViaToken,
  DeprecatedSetReservationList,
  CreateReservationList,
  SignMetadata,
  DeprecatedMintPrintingTokensViaToken,
  DeprecatedMintPrintingTokens,
  CreateMasterEdition,
  MintNewEditionFromMasterEditionViaToken,
  ConvertMasterEditionV1ToV2,
  MintNewEditionFromMasterEditionViaVaultProxy,
  PuffMetadata,
  UpdateMetadataAccountV2,
  CreateMetadataAccountV2,
  CreateMasterEditionV3,
  VerifyCollection,
  Utilize,
  ApproveUseAuthority,
  RevokeUseAuthority,
  UnverifyCollection,
  ApproveCollectionAuthority,
  RevokeCollectionAuthority,
  SetAndVerifyCollection,
  FreezeDelegatedAccount,
  ThawDelegatedAccount,
  RemoveCreatorVerification,
  BurnNft,
  VerifySizedCollectionItem,
  UnverifySizedCollectionItem,
  SetAndVerifySizedCollectionItem,
  CreateMetadataAccountV3,
  SetCollectionSize,
  SetTokenStandard,
  BubblegumSetCollectionSize,
  BurnEditionNft,
  CreateEscrowAccount,
  CloseEscrowAccount,
  TransferOutOfEscrow,
  CreateV1,
  CreateV2,
  Mint,
  UpdateV1,
  Burn,
  UseAsset,
  Transfer,
  Verify,
  Delegate,
  Revoke,
  Migrate,
}

export function identifyMplTokenMetadataInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): MplTokenMetadataInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return MplTokenMetadataInstruction.CreateMetadataAccount;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return MplTokenMetadataInstruction.UpdateMetadataAccount;
  }
  if (memcmp(data, getU8Encoder().encode(2), 0)) {
    return MplTokenMetadataInstruction.DeprecatedCreateMasterEdition;
  }
  if (memcmp(data, getU8Encoder().encode(3), 0)) {
    return MplTokenMetadataInstruction.DeprecatedMintNewEditionFromMasterEditionViaPrintingToken;
  }
  if (memcmp(data, getU8Encoder().encode(4), 0)) {
    return MplTokenMetadataInstruction.UpdatePrimarySaleHappenedViaToken;
  }
  if (memcmp(data, getU8Encoder().encode(5), 0)) {
    return MplTokenMetadataInstruction.DeprecatedSetReservationList;
  }
  if (memcmp(data, getU8Encoder().encode(6), 0)) {
    return MplTokenMetadataInstruction.CreateReservationList;
  }
  if (memcmp(data, getU8Encoder().encode(7), 0)) {
    return MplTokenMetadataInstruction.SignMetadata;
  }
  if (memcmp(data, getU8Encoder().encode(8), 0)) {
    return MplTokenMetadataInstruction.DeprecatedMintPrintingTokensViaToken;
  }
  if (memcmp(data, getU8Encoder().encode(9), 0)) {
    return MplTokenMetadataInstruction.DeprecatedMintPrintingTokens;
  }
  if (memcmp(data, getU8Encoder().encode(10), 0)) {
    return MplTokenMetadataInstruction.CreateMasterEdition;
  }
  if (memcmp(data, getU8Encoder().encode(11), 0)) {
    return MplTokenMetadataInstruction.MintNewEditionFromMasterEditionViaToken;
  }
  if (memcmp(data, getU8Encoder().encode(12), 0)) {
    return MplTokenMetadataInstruction.ConvertMasterEditionV1ToV2;
  }
  if (memcmp(data, getU8Encoder().encode(13), 0)) {
    return MplTokenMetadataInstruction.MintNewEditionFromMasterEditionViaVaultProxy;
  }
  if (memcmp(data, getU8Encoder().encode(14), 0)) {
    return MplTokenMetadataInstruction.PuffMetadata;
  }
  if (memcmp(data, getU8Encoder().encode(15), 0)) {
    return MplTokenMetadataInstruction.UpdateMetadataAccountV2;
  }
  if (memcmp(data, getU8Encoder().encode(16), 0)) {
    return MplTokenMetadataInstruction.CreateMetadataAccountV2;
  }
  if (memcmp(data, getU8Encoder().encode(17), 0)) {
    return MplTokenMetadataInstruction.CreateMasterEditionV3;
  }
  if (memcmp(data, getU8Encoder().encode(18), 0)) {
    return MplTokenMetadataInstruction.VerifyCollection;
  }
  if (memcmp(data, getU8Encoder().encode(19), 0)) {
    return MplTokenMetadataInstruction.Utilize;
  }
  if (memcmp(data, getU8Encoder().encode(20), 0)) {
    return MplTokenMetadataInstruction.ApproveUseAuthority;
  }
  if (memcmp(data, getU8Encoder().encode(21), 0)) {
    return MplTokenMetadataInstruction.RevokeUseAuthority;
  }
  if (memcmp(data, getU8Encoder().encode(22), 0)) {
    return MplTokenMetadataInstruction.UnverifyCollection;
  }
  if (memcmp(data, getU8Encoder().encode(23), 0)) {
    return MplTokenMetadataInstruction.ApproveCollectionAuthority;
  }
  if (memcmp(data, getU8Encoder().encode(24), 0)) {
    return MplTokenMetadataInstruction.RevokeCollectionAuthority;
  }
  if (memcmp(data, getU8Encoder().encode(25), 0)) {
    return MplTokenMetadataInstruction.SetAndVerifyCollection;
  }
  if (memcmp(data, getU8Encoder().encode(26), 0)) {
    return MplTokenMetadataInstruction.FreezeDelegatedAccount;
  }
  if (memcmp(data, getU8Encoder().encode(27), 0)) {
    return MplTokenMetadataInstruction.ThawDelegatedAccount;
  }
  if (memcmp(data, getU8Encoder().encode(28), 0)) {
    return MplTokenMetadataInstruction.RemoveCreatorVerification;
  }
  if (memcmp(data, getU8Encoder().encode(29), 0)) {
    return MplTokenMetadataInstruction.BurnNft;
  }
  if (memcmp(data, getU8Encoder().encode(30), 0)) {
    return MplTokenMetadataInstruction.VerifySizedCollectionItem;
  }
  if (memcmp(data, getU8Encoder().encode(31), 0)) {
    return MplTokenMetadataInstruction.UnverifySizedCollectionItem;
  }
  if (memcmp(data, getU8Encoder().encode(32), 0)) {
    return MplTokenMetadataInstruction.SetAndVerifySizedCollectionItem;
  }
  if (memcmp(data, getU8Encoder().encode(33), 0)) {
    return MplTokenMetadataInstruction.CreateMetadataAccountV3;
  }
  if (memcmp(data, getU8Encoder().encode(34), 0)) {
    return MplTokenMetadataInstruction.SetCollectionSize;
  }
  if (memcmp(data, getU8Encoder().encode(35), 0)) {
    return MplTokenMetadataInstruction.SetTokenStandard;
  }
  if (memcmp(data, getU8Encoder().encode(36), 0)) {
    return MplTokenMetadataInstruction.BubblegumSetCollectionSize;
  }
  if (memcmp(data, getU8Encoder().encode(37), 0)) {
    return MplTokenMetadataInstruction.BurnEditionNft;
  }
  if (memcmp(data, getU8Encoder().encode(38), 0)) {
    return MplTokenMetadataInstruction.CreateEscrowAccount;
  }
  if (memcmp(data, getU8Encoder().encode(39), 0)) {
    return MplTokenMetadataInstruction.CloseEscrowAccount;
  }
  if (memcmp(data, getU8Encoder().encode(40), 0)) {
    return MplTokenMetadataInstruction.TransferOutOfEscrow;
  }
  if (memcmp(data, getU8Encoder().encode(41), 0)) {
    return MplTokenMetadataInstruction.CreateV1;
  }
  if (memcmp(data, getU8Encoder().encode(41), 0)) {
    return MplTokenMetadataInstruction.CreateV2;
  }
  if (memcmp(data, getU8Encoder().encode(42), 0)) {
    return MplTokenMetadataInstruction.Mint;
  }
  if (memcmp(data, getU8Encoder().encode(43), 0)) {
    return MplTokenMetadataInstruction.UpdateV1;
  }
  if (memcmp(data, getU8Encoder().encode(44), 0)) {
    return MplTokenMetadataInstruction.Burn;
  }
  if (memcmp(data, getU8Encoder().encode(45), 0)) {
    return MplTokenMetadataInstruction.UseAsset;
  }
  if (memcmp(data, getU8Encoder().encode(46), 0)) {
    return MplTokenMetadataInstruction.Transfer;
  }
  if (memcmp(data, getU8Encoder().encode(47), 0)) {
    return MplTokenMetadataInstruction.Verify;
  }
  if (memcmp(data, getU8Encoder().encode(48), 0)) {
    return MplTokenMetadataInstruction.Delegate;
  }
  if (memcmp(data, getU8Encoder().encode(49), 0)) {
    return MplTokenMetadataInstruction.Revoke;
  }
  if (memcmp(data, getU8Encoder().encode(50), 0)) {
    return MplTokenMetadataInstruction.Migrate;
  }
  throw new Error(
    'The provided instruction could not be identified as a mplTokenMetadata instruction.'
  );
}
