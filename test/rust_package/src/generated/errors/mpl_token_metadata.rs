//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, PartialEq)]
pub enum MplTokenMetadataError {
    /// 0x0 - Failed to unpack instruction data
    #[error("Failed to unpack instruction data")]
    InstructionUnpackError,
    /// 0x1 - Failed to pack instruction data
    #[error("Failed to pack instruction data")]
    InstructionPackError,
    /// 0x2 - Lamport balance below rent-exempt threshold
    #[error("Lamport balance below rent-exempt threshold")]
    NotRentExempt,
    /// 0x3 - Already initialized
    #[error("Already initialized")]
    AlreadyInitialized,
    /// 0x4 - Uninitialized
    #[error("Uninitialized")]
    Uninitialized,
    /// 0x5 -  Metadata's key must match seed of ['metadata', program id, mint] provided
    #[error(" Metadata's key must match seed of ['metadata', program id, mint] provided")]
    InvalidMetadataKey,
    /// 0x6 - Edition's key must match seed of ['metadata', program id, name, 'edition'] provided
    #[error("Edition's key must match seed of ['metadata', program id, name, 'edition'] provided")]
    InvalidEditionKey,
    /// 0x7 - Update Authority given does not match
    #[error("Update Authority given does not match")]
    UpdateAuthorityIncorrect,
    /// 0x8 - Update Authority needs to be signer to update metadata
    #[error("Update Authority needs to be signer to update metadata")]
    UpdateAuthorityIsNotSigner,
    /// 0x9 - You must be the mint authority and signer on this transaction
    #[error("You must be the mint authority and signer on this transaction")]
    NotMintAuthority,
    /// 0xa - Mint authority provided does not match the authority on the mint
    #[error("Mint authority provided does not match the authority on the mint")]
    InvalidMintAuthority,
    /// 0xb - Name too long
    #[error("Name too long")]
    NameTooLong,
    /// 0xc - Symbol too long
    #[error("Symbol too long")]
    SymbolTooLong,
    /// 0xd - URI too long
    #[error("URI too long")]
    UriTooLong,
    /// 0xe - Update authority must be equivalent to the metadata's authority and also signer of this transaction
    #[error("Update authority must be equivalent to the metadata's authority and also signer of this transaction")]
    UpdateAuthorityMustBeEqualToMetadataAuthorityAndSigner,
    /// 0xf - Mint given does not match mint on Metadata
    #[error("Mint given does not match mint on Metadata")]
    MintMismatch,
    /// 0x10 - Editions must have exactly one token
    #[error("Editions must have exactly one token")]
    EditionsMustHaveExactlyOneToken,
    /// 0x11 - Maximum editions printed already
    #[error("Maximum editions printed already")]
    MaxEditionsMintedAlready,
    /// 0x12 - Token mint to failed
    #[error("Token mint to failed")]
    TokenMintToFailed,
    /// 0x13 - The master edition record passed must match the master record on the edition given
    #[error("The master edition record passed must match the master record on the edition given")]
    MasterRecordMismatch,
    /// 0x14 - The destination account does not have the right mint
    #[error("The destination account does not have the right mint")]
    DestinationMintMismatch,
    /// 0x15 - An edition can only mint one of its kind!
    #[error("An edition can only mint one of its kind!")]
    EditionAlreadyMinted,
    /// 0x16 - Printing mint decimals should be zero
    #[error("Printing mint decimals should be zero")]
    PrintingMintDecimalsShouldBeZero,
    /// 0x17 - OneTimePrintingAuthorization mint decimals should be zero
    #[error("OneTimePrintingAuthorization mint decimals should be zero")]
    OneTimePrintingAuthorizationMintDecimalsShouldBeZero,
    /// 0x18 - EditionMintDecimalsShouldBeZero
    #[error("EditionMintDecimalsShouldBeZero")]
    EditionMintDecimalsShouldBeZero,
    /// 0x19 - Token burn failed
    #[error("Token burn failed")]
    TokenBurnFailed,
    /// 0x1a - The One Time authorization mint does not match that on the token account!
    #[error("The One Time authorization mint does not match that on the token account!")]
    TokenAccountOneTimeAuthMintMismatch,
    /// 0x1b - Derived key invalid
    #[error("Derived key invalid")]
    DerivedKeyInvalid,
    /// 0x1c - The Printing mint does not match that on the master edition!
    #[error("The Printing mint does not match that on the master edition!")]
    PrintingMintMismatch,
    /// 0x1d - The One Time Printing Auth mint does not match that on the master edition!
    #[error("The One Time Printing Auth mint does not match that on the master edition!")]
    OneTimePrintingAuthMintMismatch,
    /// 0x1e - The mint of the token account does not match the Printing mint!
    #[error("The mint of the token account does not match the Printing mint!")]
    TokenAccountMintMismatch,
    /// 0x1f - The mint of the token account does not match the master metadata mint!
    #[error("The mint of the token account does not match the master metadata mint!")]
    TokenAccountMintMismatchV2,
    /// 0x20 - Not enough tokens to mint a limited edition
    #[error("Not enough tokens to mint a limited edition")]
    NotEnoughTokens,
    /// 0x21 - The mint on your authorization token holding account does not match your Printing mint!
    #[error(
        "The mint on your authorization token holding account does not match your Printing mint!"
    )]
    PrintingMintAuthorizationAccountMismatch,
    /// 0x22 - The authorization token account has a different owner than the update authority for the master edition!
    #[error("The authorization token account has a different owner than the update authority for the master edition!")]
    AuthorizationTokenAccountOwnerMismatch,
    /// 0x23 - This feature is currently disabled.
    #[error("This feature is currently disabled.")]
    Disabled,
    /// 0x24 - Creators list too long
    #[error("Creators list too long")]
    CreatorsTooLong,
    /// 0x25 - Creators must be at least one if set
    #[error("Creators must be at least one if set")]
    CreatorsMustBeAtleastOne,
    /// 0x26 - If using a creators array, you must be one of the creators listed
    #[error("If using a creators array, you must be one of the creators listed")]
    MustBeOneOfCreators,
    /// 0x27 - This metadata does not have creators
    #[error("This metadata does not have creators")]
    NoCreatorsPresentOnMetadata,
    /// 0x28 - This creator address was not found
    #[error("This creator address was not found")]
    CreatorNotFound,
    /// 0x29 - Basis points cannot be more than 10000
    #[error("Basis points cannot be more than 10000")]
    InvalidBasisPoints,
    /// 0x2a - Primary sale can only be flipped to true and is immutable
    #[error("Primary sale can only be flipped to true and is immutable")]
    PrimarySaleCanOnlyBeFlippedToTrue,
    /// 0x2b - Owner does not match that on the account given
    #[error("Owner does not match that on the account given")]
    OwnerMismatch,
    /// 0x2c - This account has no tokens to be used for authorization
    #[error("This account has no tokens to be used for authorization")]
    NoBalanceInAccountForAuthorization,
    /// 0x2d - Share total must equal 100 for creator array
    #[error("Share total must equal 100 for creator array")]
    ShareTotalMustBe100,
    /// 0x2e - This reservation list already exists!
    #[error("This reservation list already exists!")]
    ReservationExists,
    /// 0x2f - This reservation list does not exist!
    #[error("This reservation list does not exist!")]
    ReservationDoesNotExist,
    /// 0x30 - This reservation list exists but was never set with reservations
    #[error("This reservation list exists but was never set with reservations")]
    ReservationNotSet,
    /// 0x31 - This reservation list has already been set!
    #[error("This reservation list has already been set!")]
    ReservationAlreadyMade,
    /// 0x32 - Provided more addresses than max allowed in single reservation
    #[error("Provided more addresses than max allowed in single reservation")]
    BeyondMaxAddressSize,
    /// 0x33 - NumericalOverflowError
    #[error("NumericalOverflowError")]
    NumericalOverflowError,
    /// 0x34 - This reservation would go beyond the maximum supply of the master edition!
    #[error("This reservation would go beyond the maximum supply of the master edition!")]
    ReservationBreachesMaximumSupply,
    /// 0x35 - Address not in reservation!
    #[error("Address not in reservation!")]
    AddressNotInReservation,
    /// 0x36 - You cannot unilaterally verify another creator, they must sign
    #[error("You cannot unilaterally verify another creator, they must sign")]
    CannotVerifyAnotherCreator,
    /// 0x37 - You cannot unilaterally unverify another creator
    #[error("You cannot unilaterally unverify another creator")]
    CannotUnverifyAnotherCreator,
    /// 0x38 - In initial reservation setting, spots remaining should equal total spots
    #[error("In initial reservation setting, spots remaining should equal total spots")]
    SpotMismatch,
    /// 0x39 - Incorrect account owner
    #[error("Incorrect account owner")]
    IncorrectOwner,
    /// 0x3a - printing these tokens would breach the maximum supply limit of the master edition
    #[error("printing these tokens would breach the maximum supply limit of the master edition")]
    PrintingWouldBreachMaximumSupply,
    /// 0x3b - Data is immutable
    #[error("Data is immutable")]
    DataIsImmutable,
    /// 0x3c - No duplicate creator addresses
    #[error("No duplicate creator addresses")]
    DuplicateCreatorAddress,
    /// 0x3d - Reservation spots remaining should match total spots when first being created
    #[error("Reservation spots remaining should match total spots when first being created")]
    ReservationSpotsRemainingShouldMatchTotalSpotsAtStart,
    /// 0x3e - Invalid token program
    #[error("Invalid token program")]
    InvalidTokenProgram,
    /// 0x3f - Data type mismatch
    #[error("Data type mismatch")]
    DataTypeMismatch,
    /// 0x40 - Beyond alotted address size in reservation!
    #[error("Beyond alotted address size in reservation!")]
    BeyondAlottedAddressSize,
    /// 0x41 - The reservation has only been partially alotted
    #[error("The reservation has only been partially alotted")]
    ReservationNotComplete,
    /// 0x42 - You cannot splice over an existing reservation!
    #[error("You cannot splice over an existing reservation!")]
    TriedToReplaceAnExistingReservation,
    /// 0x43 - Invalid operation
    #[error("Invalid operation")]
    InvalidOperation,
    /// 0x44 - Invalid Owner
    #[error("Invalid Owner")]
    InvalidOwner,
    /// 0x45 - Printing mint supply must be zero for conversion
    #[error("Printing mint supply must be zero for conversion")]
    PrintingMintSupplyMustBeZeroForConversion,
    /// 0x46 - One Time Auth mint supply must be zero for conversion
    #[error("One Time Auth mint supply must be zero for conversion")]
    OneTimeAuthMintSupplyMustBeZeroForConversion,
    /// 0x47 - You tried to insert one edition too many into an edition mark pda
    #[error("You tried to insert one edition too many into an edition mark pda")]
    InvalidEditionIndex,
    /// 0x48 - In the legacy system the reservation needs to be of size one for cpu limit reasons
    #[error("In the legacy system the reservation needs to be of size one for cpu limit reasons")]
    ReservationArrayShouldBeSizeOne,
    /// 0x49 - Is Mutable can only be flipped to false
    #[error("Is Mutable can only be flipped to false")]
    IsMutableCanOnlyBeFlippedToFalse,
    /// 0x4a - Collection cannot be verified in this instruction
    #[error("Collection cannot be verified in this instruction")]
    CollectionCannotBeVerifiedInThisInstruction,
    /// 0x4b - This instruction was deprecated in a previous release and is now removed
    #[error("This instruction was deprecated in a previous release and is now removed")]
    Removed,
    /// 0x4c - This token use method is burn and there are no remaining uses, it must be burned
    #[error("This token use method is burn and there are no remaining uses, it must be burned")]
    MustBeBurned,
    /// 0x4d - This use method is invalid
    #[error("This use method is invalid")]
    InvalidUseMethod,
    /// 0x4e - Cannot Change Use Method after the first use
    #[error("Cannot Change Use Method after the first use")]
    CannotChangeUseMethodAfterFirstUse,
    /// 0x4f - Cannot Change Remaining or Available uses after the first use
    #[error("Cannot Change Remaining or Available uses after the first use")]
    CannotChangeUsesAfterFirstUse,
    /// 0x50 - Collection Not Found on Metadata
    #[error("Collection Not Found on Metadata")]
    CollectionNotFound,
    /// 0x51 - Collection Update Authority is invalid
    #[error("Collection Update Authority is invalid")]
    InvalidCollectionUpdateAuthority,
    /// 0x52 - Collection Must Be a Unique Master Edition v2
    #[error("Collection Must Be a Unique Master Edition v2")]
    CollectionMustBeAUniqueMasterEdition,
    /// 0x53 - The Use Authority Record Already Exists, to modify it Revoke, then Approve
    #[error("The Use Authority Record Already Exists, to modify it Revoke, then Approve")]
    UseAuthorityRecordAlreadyExists,
    /// 0x54 - The Use Authority Record is empty or already revoked
    #[error("The Use Authority Record is empty or already revoked")]
    UseAuthorityRecordAlreadyRevoked,
    /// 0x55 - This token has no uses
    #[error("This token has no uses")]
    Unusable,
    /// 0x56 - There are not enough Uses left on this token.
    #[error("There are not enough Uses left on this token.")]
    NotEnoughUses,
    /// 0x57 - This Collection Authority Record Already Exists.
    #[error("This Collection Authority Record Already Exists.")]
    CollectionAuthorityRecordAlreadyExists,
    /// 0x58 - This Collection Authority Record Does Not Exist.
    #[error("This Collection Authority Record Does Not Exist.")]
    CollectionAuthorityDoesNotExist,
    /// 0x59 - This Use Authority Record is invalid.
    #[error("This Use Authority Record is invalid.")]
    InvalidUseAuthorityRecord,
    /// 0x5a - This Collection Authority Record is invalid.
    #[error("This Collection Authority Record is invalid.")]
    InvalidCollectionAuthorityRecord,
    /// 0x5b - Metadata does not match the freeze authority on the mint
    #[error("Metadata does not match the freeze authority on the mint")]
    InvalidFreezeAuthority,
    /// 0x5c - All tokens in this account have not been delegated to this user.
    #[error("All tokens in this account have not been delegated to this user.")]
    InvalidDelegate,
    /// 0x5d - Creator can not be adjusted once they are verified.
    #[error("Creator can not be adjusted once they are verified.")]
    CannotAdjustVerifiedCreator,
    /// 0x5e - Verified creators cannot be removed.
    #[error("Verified creators cannot be removed.")]
    CannotRemoveVerifiedCreator,
    /// 0x5f - Can not wipe verified creators.
    #[error("Can not wipe verified creators.")]
    CannotWipeVerifiedCreators,
    /// 0x60 - Not allowed to change seller fee basis points.
    #[error("Not allowed to change seller fee basis points.")]
    NotAllowedToChangeSellerFeeBasisPoints,
    /// 0x61 - Edition override cannot be zero
    #[error("Edition override cannot be zero")]
    EditionOverrideCannotBeZero,
    /// 0x62 - Invalid User
    #[error("Invalid User")]
    InvalidUser,
    /// 0x63 - Revoke Collection Authority signer is incorrect
    #[error("Revoke Collection Authority signer is incorrect")]
    RevokeCollectionAuthoritySignerIncorrect,
    /// 0x64 - Token close failed
    #[error("Token close failed")]
    TokenCloseFailed,
    /// 0x65 - Can't use this function on unsized collection
    #[error("Can't use this function on unsized collection")]
    UnsizedCollection,
    /// 0x66 - Can't use this function on a sized collection
    #[error("Can't use this function on a sized collection")]
    SizedCollection,
    /// 0x67 - Can't burn a verified member of a collection w/o providing collection metadata account
    #[error(
        "Can't burn a verified member of a collection w/o providing collection metadata account"
    )]
    MissingCollectionMetadata,
    /// 0x68 - This NFT is not a member of the specified collection.
    #[error("This NFT is not a member of the specified collection.")]
    NotAMemberOfCollection,
    /// 0x69 - This NFT is not a verified member of the specified collection.
    #[error("This NFT is not a verified member of the specified collection.")]
    NotVerifiedMemberOfCollection,
    /// 0x6a - This NFT is not a collection parent NFT.
    #[error("This NFT is not a collection parent NFT.")]
    NotACollectionParent,
    /// 0x6b - Could not determine a TokenStandard type.
    #[error("Could not determine a TokenStandard type.")]
    CouldNotDetermineTokenStandard,
    /// 0x6c - This mint account has an edition but none was provided.
    #[error("This mint account has an edition but none was provided.")]
    MissingEditionAccount,
    /// 0x6d - This edition is not a Master Edition
    #[error("This edition is not a Master Edition")]
    NotAMasterEdition,
    /// 0x6e - This Master Edition has existing prints
    #[error("This Master Edition has existing prints")]
    MasterEditionHasPrints,
    /// 0x6f - Borsh Deserialization Error
    #[error("Borsh Deserialization Error")]
    BorshDeserializationError,
    /// 0x70 - Cannot update a verified collection in this command
    #[error("Cannot update a verified collection in this command")]
    CannotUpdateVerifiedCollection,
    /// 0x71 - Edition account doesnt match collection
    #[error("Edition account doesnt match collection ")]
    CollectionMasterEditionAccountInvalid,
    /// 0x72 - Item is already verified.
    #[error("Item is already verified.")]
    AlreadyVerified,
    /// 0x73 - Item is already unverified.
    #[error("Item is already unverified.")]
    AlreadyUnverified,
    /// 0x74 - This edition is not a Print Edition
    #[error("This edition is not a Print Edition")]
    NotAPrintEdition,
    /// 0x75 - Invalid Master Edition
    #[error("Invalid Master Edition")]
    InvalidMasterEdition,
    /// 0x76 - Invalid Print Edition
    #[error("Invalid Print Edition")]
    InvalidPrintEdition,
    /// 0x77 - Invalid Edition Marker
    #[error("Invalid Edition Marker")]
    InvalidEditionMarker,
    /// 0x78 - Reservation List is Deprecated
    #[error("Reservation List is Deprecated")]
    ReservationListDeprecated,
    /// 0x79 - Print Edition does not match Master Edition
    #[error("Print Edition does not match Master Edition")]
    PrintEditionDoesNotMatchMasterEdition,
    /// 0x7a - Edition Number greater than max supply
    #[error("Edition Number greater than max supply")]
    EditionNumberGreaterThanMaxSupply,
    /// 0x7b - Must unverify before migrating collections.
    #[error("Must unverify before migrating collections.")]
    MustUnverify,
    /// 0x7c - Invalid Escrow Account Bump Seed
    #[error("Invalid Escrow Account Bump Seed")]
    InvalidEscrowBumpSeed,
    /// 0x7d - Must Escrow Authority
    #[error("Must Escrow Authority")]
    MustBeEscrowAuthority,
    /// 0x7e - Invalid System Program
    #[error("Invalid System Program")]
    InvalidSystemProgram,
    /// 0x7f - Must be a Non Fungible Token
    #[error("Must be a Non Fungible Token")]
    MustBeNonFungible,
    /// 0x80 - Insufficient tokens for transfer
    #[error("Insufficient tokens for transfer")]
    InsufficientTokens,
    /// 0x81 - Borsh Serialization Error
    #[error("Borsh Serialization Error")]
    BorshSerializationError,
    /// 0x82 - Cannot create NFT with no Freeze Authority.
    #[error("Cannot create NFT with no Freeze Authority.")]
    NoFreezeAuthoritySet,
    /// 0x83 - Invalid collection size change
    #[error("Invalid collection size change")]
    InvalidCollectionSizeChange,
    /// 0x84 - Invalid bubblegum signer
    #[error("Invalid bubblegum signer")]
    InvalidBubblegumSigner,
    /// 0x85 - Mint needs to be signer to initialize the account
    #[error("Mint needs to be signer to initialize the account")]
    MintIsNotSigner,
    /// 0x86 - Invalid token standard
    #[error("Invalid token standard")]
    InvalidTokenStandard,
    /// 0x87 - Invalid mint account for specified token standard
    #[error("Invalid mint account for specified token standard")]
    InvalidMintForTokenStandard,
    /// 0x88 - Invalid authorization rules account
    #[error("Invalid authorization rules account")]
    InvalidAuthorizationRules,
    /// 0x89 - Missing authorization rules account
    #[error("Missing authorization rules account")]
    MissingAuthorizationRules,
    /// 0x8a - Missing programmable configuration
    #[error("Missing programmable configuration")]
    MissingProgrammableConfig,
    /// 0x8b - Invalid programmable configuration
    #[error("Invalid programmable configuration")]
    InvalidProgrammableConfig,
    /// 0x8c - Delegate already exists
    #[error("Delegate already exists")]
    DelegateAlreadyExists,
    /// 0x8d - Delegate not found
    #[error("Delegate not found")]
    DelegateNotFound,
    /// 0x8e - Required account not set in instruction builder
    #[error("Required account not set in instruction builder")]
    MissingAccountInBuilder,
    /// 0x8f - Required argument not set in instruction builder
    #[error("Required argument not set in instruction builder")]
    MissingArgumentInBuilder,
    /// 0x90 - Feature not supported currently
    #[error("Feature not supported currently")]
    FeatureNotSupported,
    /// 0x91 - Invalid system wallet
    #[error("Invalid system wallet")]
    InvalidSystemWallet,
    /// 0x92 - Only the sale delegate can transfer while its set
    #[error("Only the sale delegate can transfer while its set")]
    OnlySaleDelegateCanTransfer,
    /// 0x93 - Missing token account
    #[error("Missing token account")]
    MissingTokenAccount,
    /// 0x94 - Missing SPL token program
    #[error("Missing SPL token program")]
    MissingSplTokenProgram,
    /// 0x95 - Missing SPL token program
    #[error("Missing SPL token program")]
    MissingAuthorizationRulesProgram,
    /// 0x96 - Invalid delegate role for transfer
    #[error("Invalid delegate role for transfer")]
    InvalidDelegateRoleForTransfer,
}
