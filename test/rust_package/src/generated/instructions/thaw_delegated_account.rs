//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct ThawDelegatedAccount {
      /// Delegate

        pub delegate: Pubkey;
        /// Token account to thaw

        pub token_account: Pubkey;
        /// Edition

        pub edition: Pubkey;
        /// Token mint

        pub mint: Pubkey;
        /// Token Program

        pub token_program: Pubkey;
  }

          
impl struct ThawDelegatedAccount {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.delegate,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.token_account,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ),
              ],
      data: ThawDelegatedAccount.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct ThawDelegatedAccountBuilder {
  delegate: Option<Pubkey>;
    token_account: Option<Pubkey>;
    edition: Option<Pubkey>;
    mint: Option<Pubkey>;
    token_program: Option<Pubkey>;
  }

impl ThawDelegatedAccountBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn delegate(&mut self, delegate: solana_program::pubkey::Pubkey) -> &mut Self {
      self.delegate = Some(delegate);
      
      self
    }
      pub fn token_account(&mut self, token_account: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_account = Some(token_account);
      
      self
    }
      pub fn edition(&mut self, edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.edition = Some(edition);
      
      self
    }
      pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint = Some(mint);
      
      self
    }
      pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_program = Some(token_program);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = ThawDelegatedAccount {
                  delegate: self.delegate,
                            token_account: self.token_account,
                            edition: self.edition,
                            mint: self.mint,
                            token_program: self.token_program,
                      };
    accounts.instruction()
  }
}

