//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

/// Accounts.
pub struct CreateRuleSet {
    /// Payer and creator of the RuleSet
    pub payer: solana_program::pubkey::Pubkey,
    /// The PDA account where the RuleSet is stored
    pub rule_set_pda: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreateRuleSet {
    pub fn instruction(
        &self,
        args: CreateRuleSetInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        solana_program::instruction::Instruction {
            program_id: crate::programs::mpl_token_auth_rules::ID,
            accounts: vec![
                solana_program::instruction::AccountMeta::new(self.payer, true),
                solana_program::instruction::AccountMeta::new(self.rule_set_pda, false),
                solana_program::instruction::AccountMeta::new_readonly(self.system_program, false),
            ],
            data: args.try_to_vec().unwrap(),
        }
    }
}

/// Instruction builder.
pub struct CreateRuleSetBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    rule_set_pda: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    create_args: Option<TaCreateArgs>,
    rule_set_bump: Option<u8>,
}

impl CreateRuleSetBuilder {
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    pub fn rule_set_pda(&mut self, rule_set_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rule_set_pda = Some(rule_set_pda);
        self
    }
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    pub fn create_args(&mut self, create_args: TaCreateArgs) -> &mut Self {
        self.create_args = Some(create_args);
        self
    }
    pub fn rule_set_bump(&mut self, rule_set_bump: u8) -> &mut Self {
        self.rule_set_bump = Some(rule_set_bump);
        self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateRuleSet {
            payer: self.payer.expect("payer is not set"),

            rule_set_pda: self.rule_set_pda.expect("rule_set_pda is not set"),

            system_program: self.system_program.expect("system_program is not set"),
        };
        let args = CreateRuleSetInstructionArgs::new(
            self.create_args.expect("create_args is not set"),
            self.rule_set_bump.expect("rule_set_bump is not set"),
        );
        accounts.instruction(args)
    }
}

pub struct CreateRuleSetInstructionArgs {
    discriminator: u8,
    pub create_args: TaCreateArgs,
    pub rule_set_bump: u8,
}

impl CreateRuleSetInstructionArgs {
    pub fn new(create_args: TaCreateArgs, rule_set_bump: u8) -> Self {
        Self {
            discriminator: 0,
            create_args,
            rule_set_bump,
        }
    }
}
