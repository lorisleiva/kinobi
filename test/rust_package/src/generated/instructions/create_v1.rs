//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use solana_program::pubkey::{ Pubkey };

/// Accounts.
pub struct CreateV1 {
      /// Metadata account key (pda of ['metadata', program id, mint id])

        pub metadata: Pubkey,
        /// Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition']

        pub master_edition: Option<Pubkey>,
        /// Mint of token asset

        pub mint: Pubkey,
        /// Mint authority

        pub mint_authority: Pubkey,
        /// Payer

        pub payer: Pubkey,
        /// update authority info

        pub update_authority: Pubkey,
        /// System program

        pub system_program: Pubkey,
        /// Instructions sysvar account

        pub sysvar_instructions: Pubkey,
        /// SPL Token program

        pub spl_token_program: Pubkey,
  }

                        
impl CreateV1 {
  pub fn instruction(&self, mint_as_signer: bool) -> solana_program::instruction::Instruction {
        let data = Vec::new();
        solana_program::instruction::Instruction {
      program_id: crate::programs::mpl_token_metadata::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.master_edition.unwrap_or(crate::ID),
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.mint,
            mint_as_signer
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.update_authority,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_instructions,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.spl_token_program,
            false
          ),
              ],
      data,
    }
  }
}

/// Instruction builder.
pub struct CreateV1Builder {
  metadata: Option<Pubkey>,
    master_edition: Option<Pubkey>,
    mint: Option<Pubkey>,
    mint_as_signer: bool,
    mint_authority: Option<Pubkey>,
    payer: Option<Pubkey>,
    update_authority: Option<Pubkey>,
    system_program: Option<Pubkey>,
    sysvar_instructions: Option<Pubkey>,
    spl_token_program: Option<Pubkey>,
  }

impl CreateV1Builder {
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.master_edition = Some(master_edition);
      
      self
    }
      pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey, as_signer: bool) -> &mut Self {
      self.mint = Some(mint);
      self.mint_as_signer = as_signer;
      self
    }
      pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint_authority = Some(mint_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.update_authority = Some(update_authority);
      
      self
    }
      pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.system_program = Some(system_program);
      
      self
    }
      pub fn sysvar_instructions(&mut self, sysvar_instructions: solana_program::pubkey::Pubkey) -> &mut Self {
      self.sysvar_instructions = Some(sysvar_instructions);
      
      self
    }
      pub fn spl_token_program(&mut self, spl_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.spl_token_program = Some(spl_token_program);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateV1 {
                  metadata: self.metadata.expect("metadata is not set"),
                            master_edition: self.master_edition,
                            mint: self.mint.expect("mint is not set"),
                                                  mint_authority: self.mint_authority.expect("mint_authority is not set"),
                            payer: self.payer.expect("payer is not set"),
                            update_authority: self.update_authority.expect("update_authority is not set"),
                            system_program: self.system_program.expect("system_program is not set"),
                            sysvar_instructions: self.sysvar_instructions.expect("sysvar_instructions is not set"),
                            spl_token_program: self.spl_token_program.expect("spl_token_program is not set"),
                      };
    accounts.instruction(self.mint_as_signer)
  }
}

