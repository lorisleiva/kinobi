//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct SetCollectionSize {
      /// Collection Metadata account

        pub collection_metadata: Pubkey;
        /// Collection Update authority

        pub collection_authority: Pubkey;
        /// Mint of the Collection

        pub collection_mint: Pubkey;
        /// Collection Authority Record PDA

        pub collection_authority_record: Option<Pubkey>;
  }

        
impl struct SetCollectionSize {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.collection_metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.collection_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_authority_record.unwrap_or(crate::ID),
            false
          ),
              ],
      data: SetCollectionSize.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct SetCollectionSizeBuilder {
  collection_metadata: Option<Pubkey>;
    collection_authority: Option<Pubkey>;
    collection_mint: Option<Pubkey>;
    collection_authority_record: Option<Pubkey>;
  }

impl SetCollectionSizeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn collection_metadata(&mut self, collection_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_metadata = Some(collection_metadata);
      
      self
    }
      pub fn collection_authority(&mut self, collection_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_authority = Some(collection_authority);
      
      self
    }
      pub fn collection_mint(&mut self, collection_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_mint = Some(collection_mint);
      
      self
    }
      pub fn collection_authority_record(&mut self, collection_authority_record: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_authority_record = Some(collection_authority_record);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = SetCollectionSize {
                  collection_metadata: self.collection_metadata,
                            collection_authority: self.collection_authority,
                            collection_mint: self.collection_mint,
                            collection_authority_record: self.collection_authority_record.expect("collection_authority_record is not set"),
                      };
    accounts.instruction()
  }
}

