//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct MintFromCandyMachine {
        pub candy_machine: Pubkey;
          pub authority_pda: Pubkey;
          pub mint_authority: Pubkey;
          pub payer: Pubkey;
          pub nft_mint: Pubkey;
          pub nft_mint_authority: Pubkey;
          pub nft_metadata: Pubkey;
          pub nft_master_edition: Pubkey;
          pub collection_authority_record: Pubkey;
          pub collection_mint: Pubkey;
          pub collection_metadata: Pubkey;
          pub collection_master_edition: Pubkey;
          pub collection_update_authority: Pubkey;
          pub token_metadata_program: Pubkey;
          pub token_program: Pubkey;
          pub system_program: Pubkey;
          pub recent_slothashes: Pubkey;
  }

                                  
impl struct MintFromCandyMachine {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.candy_machine,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.authority_pda,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.nft_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.nft_mint_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.nft_metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.nft_master_edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_authority_record,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.collection_metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_master_edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_update_authority,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.recent_slothashes,
            false
          ),
              ],
      data: MintFromCandyMachine.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct MintFromCandyMachineBuilder {
  candy_machine: Option<Pubkey>;
    authority_pda: Option<Pubkey>;
    mint_authority: Option<Pubkey>;
    payer: Option<Pubkey>;
    nft_mint: Option<Pubkey>;
    nft_mint_authority: Option<Pubkey>;
    nft_metadata: Option<Pubkey>;
    nft_master_edition: Option<Pubkey>;
    collection_authority_record: Option<Pubkey>;
    collection_mint: Option<Pubkey>;
    collection_metadata: Option<Pubkey>;
    collection_master_edition: Option<Pubkey>;
    collection_update_authority: Option<Pubkey>;
    token_metadata_program: Option<Pubkey>;
    token_program: Option<Pubkey>;
    system_program: Option<Pubkey>;
    recent_slothashes: Option<Pubkey>;
  }

impl MintFromCandyMachineBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn candy_machine(&mut self, candy_machine: solana_program::pubkey::Pubkey) -> &mut Self {
      self.candy_machine = Some(candy_machine);
      
      self
    }
      pub fn authority_pda(&mut self, authority_pda: solana_program::pubkey::Pubkey) -> &mut Self {
      self.authority_pda = Some(authority_pda);
      
      self
    }
      pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint_authority = Some(mint_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn nft_mint(&mut self, nft_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.nft_mint = Some(nft_mint);
      
      self
    }
      pub fn nft_mint_authority(&mut self, nft_mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.nft_mint_authority = Some(nft_mint_authority);
      
      self
    }
      pub fn nft_metadata(&mut self, nft_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.nft_metadata = Some(nft_metadata);
      
      self
    }
      pub fn nft_master_edition(&mut self, nft_master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.nft_master_edition = Some(nft_master_edition);
      
      self
    }
      pub fn collection_authority_record(&mut self, collection_authority_record: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_authority_record = Some(collection_authority_record);
      
      self
    }
      pub fn collection_mint(&mut self, collection_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_mint = Some(collection_mint);
      
      self
    }
      pub fn collection_metadata(&mut self, collection_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_metadata = Some(collection_metadata);
      
      self
    }
      pub fn collection_master_edition(&mut self, collection_master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_master_edition = Some(collection_master_edition);
      
      self
    }
      pub fn collection_update_authority(&mut self, collection_update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_update_authority = Some(collection_update_authority);
      
      self
    }
      pub fn token_metadata_program(&mut self, token_metadata_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_metadata_program = Some(token_metadata_program);
      
      self
    }
      pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_program = Some(token_program);
      
      self
    }
      pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.system_program = Some(system_program);
      
      self
    }
      pub fn recent_slothashes(&mut self, recent_slothashes: solana_program::pubkey::Pubkey) -> &mut Self {
      self.recent_slothashes = Some(recent_slothashes);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = MintFromCandyMachine {
                  candy_machine: self.candy_machine,
                            authority_pda: self.authority_pda,
                            mint_authority: self.mint_authority,
                            payer: self.payer,
                            nft_mint: self.nft_mint,
                            nft_mint_authority: self.nft_mint_authority,
                            nft_metadata: self.nft_metadata,
                            nft_master_edition: self.nft_master_edition,
                            collection_authority_record: self.collection_authority_record,
                            collection_mint: self.collection_mint,
                            collection_metadata: self.collection_metadata,
                            collection_master_edition: self.collection_master_edition,
                            collection_update_authority: self.collection_update_authority,
                            token_metadata_program: self.token_metadata_program,
                            token_program: self.token_program,
                            system_program: self.system_program,
                            recent_slothashes: self.recent_slothashes,
                      };
    accounts.instruction()
  }
}

