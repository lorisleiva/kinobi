//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use solana_program::pubkey::{ Pubkey };

/// Accounts.
pub struct SetCollection {
        pub candy_machine: Pubkey,
          pub authority: Pubkey,
          pub authority_pda: Pubkey,
          pub payer: Pubkey,
          pub collection_mint: Pubkey,
          pub collection_metadata: Pubkey,
          pub collection_authority_record: Pubkey,
          pub new_collection_update_authority: Pubkey,
          pub new_collection_metadata: Pubkey,
          pub new_collection_mint: Pubkey,
          pub new_collection_master_edition: Pubkey,
          pub new_collection_authority_record: Pubkey,
          pub token_metadata_program: Pubkey,
          pub system_program: Pubkey,
  }

                            
impl SetCollection {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let data = Vec::new();
        solana_program::instruction::Instruction {
      program_id: crate::programs::mpl_candy_machine_core::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.candy_machine,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.authority_pda,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.collection_authority_record,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.new_collection_update_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.new_collection_metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.new_collection_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.new_collection_master_edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.new_collection_authority_record,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ),
              ],
      data,
    }
  }
}

/// Instruction builder.
pub struct SetCollectionBuilder {
  candy_machine: Option<Pubkey>,
    authority: Option<Pubkey>,
    authority_pda: Option<Pubkey>,
    payer: Option<Pubkey>,
    collection_mint: Option<Pubkey>,
    collection_metadata: Option<Pubkey>,
    collection_authority_record: Option<Pubkey>,
    new_collection_update_authority: Option<Pubkey>,
    new_collection_metadata: Option<Pubkey>,
    new_collection_mint: Option<Pubkey>,
    new_collection_master_edition: Option<Pubkey>,
    new_collection_authority_record: Option<Pubkey>,
    token_metadata_program: Option<Pubkey>,
    system_program: Option<Pubkey>,
  }

impl SetCollectionBuilder {
      pub fn candy_machine(&mut self, candy_machine: solana_program::pubkey::Pubkey) -> &mut Self {
      self.candy_machine = Some(candy_machine);
      
      self
    }
      pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.authority = Some(authority);
      
      self
    }
      pub fn authority_pda(&mut self, authority_pda: solana_program::pubkey::Pubkey) -> &mut Self {
      self.authority_pda = Some(authority_pda);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn collection_mint(&mut self, collection_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_mint = Some(collection_mint);
      
      self
    }
      pub fn collection_metadata(&mut self, collection_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_metadata = Some(collection_metadata);
      
      self
    }
      pub fn collection_authority_record(&mut self, collection_authority_record: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_authority_record = Some(collection_authority_record);
      
      self
    }
      pub fn new_collection_update_authority(&mut self, new_collection_update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_collection_update_authority = Some(new_collection_update_authority);
      
      self
    }
      pub fn new_collection_metadata(&mut self, new_collection_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_collection_metadata = Some(new_collection_metadata);
      
      self
    }
      pub fn new_collection_mint(&mut self, new_collection_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_collection_mint = Some(new_collection_mint);
      
      self
    }
      pub fn new_collection_master_edition(&mut self, new_collection_master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_collection_master_edition = Some(new_collection_master_edition);
      
      self
    }
      pub fn new_collection_authority_record(&mut self, new_collection_authority_record: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_collection_authority_record = Some(new_collection_authority_record);
      
      self
    }
      pub fn token_metadata_program(&mut self, token_metadata_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_metadata_program = Some(token_metadata_program);
      
      self
    }
      pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.system_program = Some(system_program);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = SetCollection {
                  candy_machine: self.candy_machine.expect("candy_machine is not set"),
                            authority: self.authority.expect("authority is not set"),
                            authority_pda: self.authority_pda.expect("authority_pda is not set"),
                            payer: self.payer.expect("payer is not set"),
                            collection_mint: self.collection_mint.expect("collection_mint is not set"),
                            collection_metadata: self.collection_metadata.expect("collection_metadata is not set"),
                            collection_authority_record: self.collection_authority_record.expect("collection_authority_record is not set"),
                            new_collection_update_authority: self.new_collection_update_authority.expect("new_collection_update_authority is not set"),
                            new_collection_metadata: self.new_collection_metadata.expect("new_collection_metadata is not set"),
                            new_collection_mint: self.new_collection_mint.expect("new_collection_mint is not set"),
                            new_collection_master_edition: self.new_collection_master_edition.expect("new_collection_master_edition is not set"),
                            new_collection_authority_record: self.new_collection_authority_record.expect("new_collection_authority_record is not set"),
                            token_metadata_program: self.token_metadata_program.expect("token_metadata_program is not set"),
                            system_program: self.system_program.expect("system_program is not set"),
                      };
    accounts.instruction()
  }
}

