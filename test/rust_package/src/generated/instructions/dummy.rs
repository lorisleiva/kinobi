//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct Dummy {
        pub edition: Pubkey;
          pub mint: Option<Pubkey>;
          pub update_authority: Pubkey;
          pub mint_authority: Pubkey;
          pub payer: Pubkey;
          pub foo: Pubkey;
          pub bar: Pubkey;
          pub delegate_record: Pubkey;
  }

                
impl struct Dummy {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.edition,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.mint.unwrap_or(crate::ID),
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.update_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.mint_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.foo,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.bar,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.delegate_record,
            false
          ),
              ],
      data: Dummy.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct DummyBuilder {
  edition: Option<Pubkey>;
    mint: Option<Pubkey>;
    update_authority: Option<Pubkey>;
    mint_authority: Option<Pubkey>;
    payer: Option<Pubkey>;
    foo: Option<Pubkey>;
    bar: Option<Pubkey>;
    delegate_record: Option<Pubkey>;
  }

impl DummyBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn edition(&mut self, edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.edition = Some(edition);
      
      self
    }
      pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint = Some(mint);
      
      self
    }
      pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.update_authority = Some(update_authority);
      
      self
    }
      pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint_authority = Some(mint_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn foo(&mut self, foo: solana_program::pubkey::Pubkey) -> &mut Self {
      self.foo = Some(foo);
      
      self
    }
      pub fn bar(&mut self, bar: solana_program::pubkey::Pubkey) -> &mut Self {
      self.bar = Some(bar);
      
      self
    }
      pub fn delegate_record(&mut self, delegate_record: solana_program::pubkey::Pubkey) -> &mut Self {
      self.delegate_record = Some(delegate_record);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = Dummy {
                  edition: self.edition,
                            mint: self.mint.expect("mint is not set"),
                            update_authority: self.update_authority,
                            mint_authority: self.mint_authority,
                            payer: self.payer,
                            foo: self.foo,
                            bar: self.bar,
                            delegate_record: self.delegate_record,
                      };
    accounts.instruction()
  }
}

