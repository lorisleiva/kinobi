//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct MintNewEditionFromMasterEditionViaToken {
      /// New Metadata key (pda of ['metadata', program id, mint id])

        pub new_metadata: Pubkey;
        /// New Edition (pda of ['metadata', program id, mint id, 'edition'])

        pub new_edition: Pubkey;
        /// Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'])

        pub master_edition: Pubkey;
        /// Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY

        pub new_mint: Pubkey;
        /// Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).

        pub edition_mark_pda: Pubkey;
        /// Mint authority of new mint

        pub new_mint_authority: Pubkey;
        /// payer

        pub payer: Pubkey;
        /// owner of token account containing master token (#8)

        pub token_account_owner: Pubkey;
        /// token account containing token from master metadata mint

        pub token_account: Pubkey;
        /// Update authority info for new metadata

        pub new_metadata_update_authority: Pubkey;
        /// Master record metadata account

        pub metadata: Pubkey;
        /// Token program

        pub token_program: Pubkey;
        /// System program

        pub system_program: Pubkey;
        /// Rent info

        pub rent: Option<Pubkey>;
  }

                            
impl struct MintNewEditionFromMasterEditionViaToken {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.new_metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.new_edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.master_edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.new_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.edition_mark_pda,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.new_mint_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_account_owner,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_account,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.new_metadata_update_authority,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.rent.unwrap_or(crate::ID),
            false
          ),
              ],
      data: MintNewEditionFromMasterEditionViaToken.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct MintNewEditionFromMasterEditionViaTokenBuilder {
  new_metadata: Option<Pubkey>;
    new_edition: Option<Pubkey>;
    master_edition: Option<Pubkey>;
    new_mint: Option<Pubkey>;
    edition_mark_pda: Option<Pubkey>;
    new_mint_authority: Option<Pubkey>;
    payer: Option<Pubkey>;
    token_account_owner: Option<Pubkey>;
    token_account: Option<Pubkey>;
    new_metadata_update_authority: Option<Pubkey>;
    metadata: Option<Pubkey>;
    token_program: Option<Pubkey>;
    system_program: Option<Pubkey>;
    rent: Option<Pubkey>;
  }

impl MintNewEditionFromMasterEditionViaTokenBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn new_metadata(&mut self, new_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_metadata = Some(new_metadata);
      
      self
    }
      pub fn new_edition(&mut self, new_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_edition = Some(new_edition);
      
      self
    }
      pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.master_edition = Some(master_edition);
      
      self
    }
      pub fn new_mint(&mut self, new_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_mint = Some(new_mint);
      
      self
    }
      pub fn edition_mark_pda(&mut self, edition_mark_pda: solana_program::pubkey::Pubkey) -> &mut Self {
      self.edition_mark_pda = Some(edition_mark_pda);
      
      self
    }
      pub fn new_mint_authority(&mut self, new_mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_mint_authority = Some(new_mint_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn token_account_owner(&mut self, token_account_owner: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_account_owner = Some(token_account_owner);
      
      self
    }
      pub fn token_account(&mut self, token_account: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_account = Some(token_account);
      
      self
    }
      pub fn new_metadata_update_authority(&mut self, new_metadata_update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_metadata_update_authority = Some(new_metadata_update_authority);
      
      self
    }
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_program = Some(token_program);
      
      self
    }
      pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.system_program = Some(system_program);
      
      self
    }
      pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
      self.rent = Some(rent);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = MintNewEditionFromMasterEditionViaToken {
                  new_metadata: self.new_metadata,
                            new_edition: self.new_edition,
                            master_edition: self.master_edition,
                            new_mint: self.new_mint,
                            edition_mark_pda: self.edition_mark_pda,
                            new_mint_authority: self.new_mint_authority,
                            payer: self.payer,
                            token_account_owner: self.token_account_owner,
                            token_account: self.token_account,
                            new_metadata_update_authority: self.new_metadata_update_authority,
                            metadata: self.metadata,
                            token_program: self.token_program,
                            system_program: self.system_program,
                            rent: self.rent.expect("rent is not set"),
                      };
    accounts.instruction()
  }
}

