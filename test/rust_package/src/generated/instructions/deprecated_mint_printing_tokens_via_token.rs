//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use solana_program::pubkey::{ Pubkey };

/// Accounts.
pub struct DeprecatedMintPrintingTokensViaToken {
      /// Destination account

        pub destination: Pubkey,
        /// Token account containing one time authorization token

        pub token: Pubkey,
        /// One time authorization mint

        pub one_time_printing_authorization_mint: Pubkey,
        /// Printing mint

        pub printing_mint: Pubkey,
        /// Burn authority

        pub burn_authority: Pubkey,
        /// Metadata key (pda of ['metadata', program id, mint id])

        pub metadata: Pubkey,
        /// Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])

        pub master_edition: Pubkey,
        /// Token program

        pub token_program: Pubkey,
        /// Rent

        pub rent: Pubkey,
  }

                  
impl DeprecatedMintPrintingTokensViaToken {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let data = Vec::new();
        solana_program::instruction::Instruction {
      program_id: crate::programs::mpl_token_metadata::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.destination,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.token,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.one_time_printing_authorization_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.printing_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.burn_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.master_edition,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ),
              ],
      data,
    }
  }
}

/// Instruction builder.
pub struct DeprecatedMintPrintingTokensViaTokenBuilder {
  destination: Option<Pubkey>,
    token: Option<Pubkey>,
    one_time_printing_authorization_mint: Option<Pubkey>,
    printing_mint: Option<Pubkey>,
    burn_authority: Option<Pubkey>,
    metadata: Option<Pubkey>,
    master_edition: Option<Pubkey>,
    token_program: Option<Pubkey>,
    rent: Option<Pubkey>,
  }

impl DeprecatedMintPrintingTokensViaTokenBuilder {
      pub fn destination(&mut self, destination: solana_program::pubkey::Pubkey) -> &mut Self {
      self.destination = Some(destination);
      
      self
    }
      pub fn token(&mut self, token: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token = Some(token);
      
      self
    }
      pub fn one_time_printing_authorization_mint(&mut self, one_time_printing_authorization_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.one_time_printing_authorization_mint = Some(one_time_printing_authorization_mint);
      
      self
    }
      pub fn printing_mint(&mut self, printing_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.printing_mint = Some(printing_mint);
      
      self
    }
      pub fn burn_authority(&mut self, burn_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.burn_authority = Some(burn_authority);
      
      self
    }
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn master_edition(&mut self, master_edition: solana_program::pubkey::Pubkey) -> &mut Self {
      self.master_edition = Some(master_edition);
      
      self
    }
      pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token_program = Some(token_program);
      
      self
    }
      pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
      self.rent = Some(rent);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = DeprecatedMintPrintingTokensViaToken {
                  destination: self.destination.expect("destination is not set"),
                            token: self.token.expect("token is not set"),
                            one_time_printing_authorization_mint: self.one_time_printing_authorization_mint.expect("one_time_printing_authorization_mint is not set"),
                            printing_mint: self.printing_mint.expect("printing_mint is not set"),
                            burn_authority: self.burn_authority.expect("burn_authority is not set"),
                            metadata: self.metadata.expect("metadata is not set"),
                            master_edition: self.master_edition.expect("master_edition is not set"),
                            token_program: self.token_program.expect("token_program is not set"),
                            rent: self.rent.expect("rent is not set"),
                      };
    accounts.instruction()
  }
}

