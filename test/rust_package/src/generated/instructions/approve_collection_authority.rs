//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct ApproveCollectionAuthority {
      /// Collection Authority Record PDA

        pub collection_authority_record: Pubkey;
        /// A Collection Authority

        pub new_collection_authority: Pubkey;
        /// Update Authority of Collection NFT

        pub update_authority: Pubkey;
        /// Payer

        pub payer: Pubkey;
        /// Collection Metadata account

        pub metadata: Pubkey;
        /// Mint of Collection Metadata

        pub mint: Pubkey;
        /// System program

        pub system_program: Pubkey;
        /// Rent info

        pub rent: Option<Pubkey>;
  }

                
impl struct ApproveCollectionAuthority {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.collection_authority_record,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.new_collection_authority,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.update_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.rent.unwrap_or(crate::ID),
            false
          ),
              ],
      data: ApproveCollectionAuthority.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct ApproveCollectionAuthorityBuilder {
  collection_authority_record: Option<Pubkey>;
    new_collection_authority: Option<Pubkey>;
    update_authority: Option<Pubkey>;
    payer: Option<Pubkey>;
    metadata: Option<Pubkey>;
    mint: Option<Pubkey>;
    system_program: Option<Pubkey>;
    rent: Option<Pubkey>;
  }

impl ApproveCollectionAuthorityBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn collection_authority_record(&mut self, collection_authority_record: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_authority_record = Some(collection_authority_record);
      
      self
    }
      pub fn new_collection_authority(&mut self, new_collection_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.new_collection_authority = Some(new_collection_authority);
      
      self
    }
      pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.update_authority = Some(update_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint = Some(mint);
      
      self
    }
      pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.system_program = Some(system_program);
      
      self
    }
      pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
      self.rent = Some(rent);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = ApproveCollectionAuthority {
                  collection_authority_record: self.collection_authority_record,
                            new_collection_authority: self.new_collection_authority,
                            update_authority: self.update_authority,
                            payer: self.payer,
                            metadata: self.metadata,
                            mint: self.mint,
                            system_program: self.system_program,
                            rent: self.rent.expect("rent is not set"),
                      };
    accounts.instruction()
  }
}

