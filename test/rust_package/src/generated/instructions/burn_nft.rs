//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

/// Accounts.
pub struct BurnNft {
    /// Metadata (pda of ['metadata', program id, mint id])
    pub metadata: solana_program::pubkey::Pubkey,
    /// NFT owner
    pub owner: solana_program::pubkey::Pubkey,
    /// Mint of the NFT
    pub mint: solana_program::pubkey::Pubkey,
    /// Token account to close
    pub token_account: solana_program::pubkey::Pubkey,
    /// MasterEdition2 of the NFT
    pub master_edition_account: solana_program::pubkey::Pubkey,
    /// SPL Token Program
    pub spl_token_program: solana_program::pubkey::Pubkey,
    /// Metadata of the Collection
    pub collection_metadata: Option<solana_program::pubkey::Pubkey>,
}

impl BurnNft {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let args = BurnNftInstructionArgs::new();
        solana_program::instruction::Instruction {
            program_id: crate::programs::mpl_token_metadata::ID,
            accounts: vec![
                                          solana_program::instruction::AccountMeta::new(
              self.metadata,
              false
            ),
                                                                solana_program::instruction::AccountMeta::new(
              self.owner,
              true
            ),
                                                                solana_program::instruction::AccountMeta::new(
              self.mint,
              false
            ),
                                                                solana_program::instruction::AccountMeta::new(
              self.token_account,
              false
            ),
                                                                solana_program::instruction::AccountMeta::new(
              self.master_edition_account,
              false
            ),
                                                                solana_program::instruction::AccountMeta::new_readonly(
              self.spl_token_program,
              false
            ),
                                                                if let Some(collection_metadata) = self.collection_metadata {
              solana_program::instruction::AccountMeta::new(
                collection_metadata,
                false,
              ),
            } else {
              solana_program::instruction::AccountMeta::new(
                crate::programs::mpl_token_metadata::ID,
                false,
              ),
            },
                                  ],
            data: args.try_to_vec().unwrap(),
        }
    }
}

/// Instruction builder.
pub struct BurnNftBuilder {
    metadata: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    token_account: Option<solana_program::pubkey::Pubkey>,
    master_edition_account: Option<solana_program::pubkey::Pubkey>,
    spl_token_program: Option<solana_program::pubkey::Pubkey>,
    collection_metadata: Option<solana_program::pubkey::Pubkey>,
}

impl BurnNftBuilder {
    pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.metadata = Some(metadata);
        self
    }
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    pub fn token_account(&mut self, token_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_account = Some(token_account);
        self
    }
    pub fn master_edition_account(
        &mut self,
        master_edition_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.master_edition_account = Some(master_edition_account);
        self
    }
    pub fn spl_token_program(
        &mut self,
        spl_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spl_token_program = Some(spl_token_program);
        self
    }
    pub fn collection_metadata(
        &mut self,
        collection_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collection_metadata = Some(collection_metadata);
        self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = BurnNft {
            metadata: self.metadata.expect("metadata is not set"),

            owner: self.owner.expect("owner is not set"),

            mint: self.mint.expect("mint is not set"),

            token_account: self.token_account.expect("token_account is not set"),

            master_edition_account: self
                .master_edition_account
                .expect("master_edition_account is not set"),

            spl_token_program: self
                .spl_token_program
                .expect("spl_token_program is not set"),

            collection_metadata: self.collection_metadata,
        };
        accounts.instruction()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
struct BurnNftInstructionArgs {
    discriminator: u8,
}

impl BurnNftInstructionArgs {
    pub fn new() -> Self {
        Self { discriminator: 29 }
    }
}
