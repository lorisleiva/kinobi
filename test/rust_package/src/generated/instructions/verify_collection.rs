//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use solana_program::pubkey::{ Pubkey };

/// Accounts.
pub struct VerifyCollection {
      /// Metadata account

        pub metadata: Pubkey,
        /// Collection Update authority

        pub collection_authority: Pubkey,
        /// payer

        pub payer: Pubkey,
        /// Mint of the Collection

        pub collection_mint: Pubkey,
        /// Metadata Account of the Collection

        pub collection: Pubkey,
        /// MasterEdition2 Account of the Collection Token

        pub collection_master_edition_account: Pubkey,
  }

            
impl VerifyCollection {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let data = Vec::new();
        solana_program::instruction::Instruction {
      program_id: crate::programs::mpl_token_metadata::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.collection_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.collection_master_edition_account,
            false
          ),
              ],
      data,
    }
  }
}

/// Instruction builder.
pub struct VerifyCollectionBuilder {
  metadata: Option<Pubkey>,
    collection_authority: Option<Pubkey>,
    payer: Option<Pubkey>,
    collection_mint: Option<Pubkey>,
    collection: Option<Pubkey>,
    collection_master_edition_account: Option<Pubkey>,
  }

impl VerifyCollectionBuilder {
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn collection_authority(&mut self, collection_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_authority = Some(collection_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn collection_mint(&mut self, collection_mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_mint = Some(collection_mint);
      
      self
    }
      pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection = Some(collection);
      
      self
    }
      pub fn collection_master_edition_account(&mut self, collection_master_edition_account: solana_program::pubkey::Pubkey) -> &mut Self {
      self.collection_master_edition_account = Some(collection_master_edition_account);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = VerifyCollection {
                  metadata: self.metadata.expect("metadata is not set"),
                            collection_authority: self.collection_authority.expect("collection_authority is not set"),
                            payer: self.payer.expect("payer is not set"),
                            collection_mint: self.collection_mint.expect("collection_mint is not set"),
                            collection: self.collection.expect("collection is not set"),
                            collection_master_edition_account: self.collection_master_edition_account.expect("collection_master_edition_account is not set"),
                      };
    accounts.instruction()
  }
}

