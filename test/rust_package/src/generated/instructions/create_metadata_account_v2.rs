//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct CreateMetadataAccountV2 {
      /// Metadata key (pda of ['metadata', program id, mint id])

        pub metadata: Pubkey;
        /// Mint of token asset

        pub mint: Pubkey;
        /// Mint authority

        pub mint_authority: Pubkey;
        /// payer

        pub payer: Pubkey;
        /// update authority info

        pub update_authority: Pubkey;
        /// System program

        pub system_program: Pubkey;
        /// Rent info

        pub rent: Option<Pubkey>;
  }

              
impl struct CreateMetadataAccountV2 {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.mint_authority,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new(
            self.payer,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.update_authority,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.rent.unwrap_or(crate::ID),
            false
          ),
              ],
      data: CreateMetadataAccountV2.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct CreateMetadataAccountV2Builder {
  metadata: Option<Pubkey>;
    mint: Option<Pubkey>;
    mint_authority: Option<Pubkey>;
    payer: Option<Pubkey>;
    update_authority: Option<Pubkey>;
    system_program: Option<Pubkey>;
    rent: Option<Pubkey>;
  }

impl CreateMetadataAccountV2Builder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint = Some(mint);
      
      self
    }
      pub fn mint_authority(&mut self, mint_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.mint_authority = Some(mint_authority);
      
      self
    }
      pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
      self.payer = Some(payer);
      
      self
    }
      pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.update_authority = Some(update_authority);
      
      self
    }
      pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
      self.system_program = Some(system_program);
      
      self
    }
      pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
      self.rent = Some(rent);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateMetadataAccountV2 {
                  metadata: self.metadata,
                            mint: self.mint,
                            mint_authority: self.mint_authority,
                            payer: self.payer,
                            update_authority: self.update_authority,
                            system_program: self.system_program,
                            rent: self.rent.expect("rent is not set"),
                      };
    accounts.instruction()
  }
}

