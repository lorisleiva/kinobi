//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct UpdatePrimarySaleHappenedViaToken {
      /// Metadata key (pda of ['metadata', program id, mint id])

        pub metadata: Pubkey;
        /// Owner on the token account

        pub owner: Pubkey;
        /// Account containing tokens from the metadata's mint

        pub token: Pubkey;
  }

      
impl struct UpdatePrimarySaleHappenedViaToken {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.owner,
            true
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.token,
            false
          ),
              ],
      data: UpdatePrimarySaleHappenedViaToken.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct UpdatePrimarySaleHappenedViaTokenBuilder {
  metadata: Option<Pubkey>;
    owner: Option<Pubkey>;
    token: Option<Pubkey>;
  }

impl UpdatePrimarySaleHappenedViaTokenBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
      self.owner = Some(owner);
      
      self
    }
      pub fn token(&mut self, token: solana_program::pubkey::Pubkey) -> &mut Self {
      self.token = Some(token);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdatePrimarySaleHappenedViaToken {
                  metadata: self.metadata,
                            owner: self.owner,
                            token: self.token,
                      };
    accounts.instruction()
  }
}

