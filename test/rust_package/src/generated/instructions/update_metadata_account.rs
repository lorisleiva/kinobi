//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!



/// Accounts.
pub struct UpdateMetadataAccount {
      /// Metadata account

        pub metadata: Pubkey;
        /// Update authority key

        pub update_authority: Pubkey;
  }

    
impl struct UpdateMetadataAccount {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    solana_program::instruction::Instruction {
      program_id: crate::ID,
      accounts: vec![
                                                  solana_program::instruction::AccountMeta::new(
            self.metadata,
            false
          ),
                                                  solana_program::instruction::AccountMeta::new_readonly(
            self.update_authority,
            true
          ),
              ],
      data: UpdateMetadataAccount.try_to_vec().unwrap(),
    }
  }
}

/// Instruction builder.
#[derive(Default)]
pub struct UpdateMetadataAccountBuilder {
  metadata: Option<Pubkey>;
    update_authority: Option<Pubkey>;
  }

impl UpdateMetadataAccountBuilder {
  pub fn new() -> Self {
    Self::default()
  }
      pub fn metadata(&mut self, metadata: solana_program::pubkey::Pubkey) -> &mut Self {
      self.metadata = Some(metadata);
      
      self
    }
      pub fn update_authority(&mut self, update_authority: solana_program::pubkey::Pubkey) -> &mut Self {
      self.update_authority = Some(update_authority);
      
      self
    }
    pub fn build(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateMetadataAccount {
                  metadata: self.metadata,
                            update_authority: self.update_authority,
                      };
    accounts.instruction()
  }
}

