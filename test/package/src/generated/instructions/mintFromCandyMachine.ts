/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';

// Accounts.
export type MintFromCandyMachineInstructionAccounts = {
  candyMachine: PublicKey | Pda;
  authorityPda: PublicKey | Pda;
  mintAuthority: Signer;
  payer?: Signer;
  nftMint: PublicKey | Pda;
  nftMintAuthority?: Signer;
  nftMetadata: PublicKey | Pda;
  nftMasterEdition: PublicKey | Pda;
  collectionAuthorityRecord: PublicKey | Pda;
  collectionMint: PublicKey | Pda;
  collectionMetadata: PublicKey | Pda;
  collectionMasterEdition: PublicKey | Pda;
  collectionUpdateAuthority: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  recentSlothashes: PublicKey | Pda;
};

// Data.
export type MintFromCandyMachineInstructionData = {
  discriminator: Array<number>;
};

export type MintFromCandyMachineInstructionDataArgs = {};

export function getMintFromCandyMachineInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  MintFromCandyMachineInstructionDataArgs,
  MintFromCandyMachineInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    MintFromCandyMachineInstructionDataArgs,
    any,
    MintFromCandyMachineInstructionData
  >(
    s.struct<MintFromCandyMachineInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'MintFromCandyMachineInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [51, 57, 225, 47, 182, 146, 137, 166],
    })
  ) as Serializer<
    MintFromCandyMachineInstructionDataArgs,
    MintFromCandyMachineInstructionData
  >;
}

// Instruction.
export function mintFromCandyMachine(
  context: Pick<Context, 'serializer' | 'programs' | 'identity' | 'payer'>,
  input: MintFromCandyMachineInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    authorityPda: [input.authorityPda, true] as const,
    mintAuthority: [input.mintAuthority, false] as const,
    nftMint: [input.nftMint, true] as const,
    nftMetadata: [input.nftMetadata, true] as const,
    nftMasterEdition: [input.nftMasterEdition, true] as const,
    collectionAuthorityRecord: [
      input.collectionAuthorityRecord,
      false,
    ] as const,
    collectionMint: [input.collectionMint, false] as const,
    collectionMetadata: [input.collectionMetadata, true] as const,
    collectionMasterEdition: [input.collectionMasterEdition, false] as const,
    collectionUpdateAuthority: [
      input.collectionUpdateAuthority,
      false,
    ] as const,
    recentSlothashes: [input.recentSlothashes, false] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMintAuthority',
    input.nftMintAuthority
      ? ([input.nftMintAuthority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );

  // Candy Machine.
  keys.push({
    pubkey: publicKey(resolvedAccounts.candyMachine[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.candyMachine[1],
  });

  // Authority Pda.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authorityPda[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authorityPda[1],
  });

  // Mint Authority.
  signers.push(resolvedAccounts.mintAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.mintAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.mintAuthority[1],
  });

  // Payer.
  signers.push(resolvedAccounts.payer[0]);
  keys.push({
    pubkey: resolvedAccounts.payer[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.payer[1],
  });

  // Nft Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.nftMint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.nftMint[1],
  });

  // Nft Mint Authority.
  signers.push(resolvedAccounts.nftMintAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.nftMintAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.nftMintAuthority[1],
  });

  // Nft Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.nftMetadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.nftMetadata[1],
  });

  // Nft Master Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.nftMasterEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.nftMasterEdition[1],
  });

  // Collection Authority Record.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionAuthorityRecord[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionAuthorityRecord[1],
  });

  // Collection Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMint[1],
  });

  // Collection Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMetadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMetadata[1],
  });

  // Collection Master Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMasterEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMasterEdition[1],
  });

  // Collection Update Authority.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionUpdateAuthority[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionUpdateAuthority[1],
  });

  // Token Metadata Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenMetadataProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenMetadataProgram[1],
  });

  // Token Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenProgram[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Recent Slothashes.
  keys.push({
    pubkey: publicKey(resolvedAccounts.recentSlothashes[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.recentSlothashes[1],
  });

  // Data.
  const data = getMintFromCandyMachineInstructionDataSerializer(
    context
  ).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
