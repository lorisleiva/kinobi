/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';
import { RevokeArgs, RevokeArgsArgs, getRevokeArgsSerializer } from '../types';

// Accounts.
export type RevokeInstructionAccounts = {
  /** Delegate account key (pda of [mint id, delegate role, user id, authority id]) */
  delegateRecord: PublicKey | Pda;
  /** Owner of the delegated account */
  delegate: PublicKey | Pda;
  /** Metadata account */
  metadata: PublicKey | Pda;
  /** Master Edition account */
  masterEdition?: PublicKey | Pda;
  /** Mint of metadata */
  mint: PublicKey | Pda;
  /** Owned Token Account of mint */
  token?: PublicKey | Pda;
  /** Authority to approve the delegation */
  authority?: Signer;
  /** Payer */
  payer?: Signer;
  /** System Program */
  systemProgram?: PublicKey | Pda;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey | Pda;
  /** SPL Token Program */
  splTokenProgram?: PublicKey | Pda;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: PublicKey | Pda;
  /** Token Authorization Rules account */
  authorizationRules?: PublicKey | Pda;
};

// Data.
export type RevokeInstructionData = {
  discriminator: number;
  revokeArgs: RevokeArgs;
};

export type RevokeInstructionDataArgs = { revokeArgs: RevokeArgsArgs };

export function getRevokeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<RevokeInstructionDataArgs, RevokeInstructionData> {
  const s = context.serializer;
  return mapSerializer<RevokeInstructionDataArgs, any, RevokeInstructionData>(
    s.struct<RevokeInstructionData>(
      [
        ['discriminator', s.u8()],
        ['revokeArgs', getRevokeArgsSerializer(context)],
      ],
      { description: 'RevokeInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 49 })
  ) as Serializer<RevokeInstructionDataArgs, RevokeInstructionData>;
}

// Args.
export type RevokeInstructionArgs = RevokeInstructionDataArgs;

// Instruction.
export function revoke(
  context: Pick<Context, 'serializer' | 'programs' | 'identity' | 'payer'>,
  input: RevokeInstructionAccounts & RevokeInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    delegateRecord: [input.delegateRecord, true] as const,
    delegate: [input.delegate, false] as const,
    metadata: [input.metadata, true] as const,
    mint: [input.mint, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'masterEdition',
    input.masterEdition
      ? ([input.masterEdition, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'token',
    input.token ? ([input.token, true] as const) : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'sysvarInstructions',
    input.sysvarInstructions
      ? ([input.sysvarInstructions, false] as const)
      : ([
          publicKey('Sysvar1nstructions1111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'splTokenProgram',
    input.splTokenProgram
      ? ([input.splTokenProgram, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRulesProgram',
    input.authorizationRulesProgram
      ? ([input.authorizationRulesProgram, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRules',
    input.authorizationRules
      ? ([input.authorizationRules, false] as const)
      : ([programId, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Delegate Record.
  keys.push({
    pubkey: publicKey(resolvedAccounts.delegateRecord[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.delegateRecord[1],
  });

  // Delegate.
  keys.push({
    pubkey: publicKey(resolvedAccounts.delegate[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.delegate[1],
  });

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Master Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.masterEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.masterEdition[1],
  });

  // Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.mint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.mint[1],
  });

  // Token.
  keys.push({
    pubkey: publicKey(resolvedAccounts.token[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.token[1],
  });

  // Authority.
  signers.push(resolvedAccounts.authority[0]);
  keys.push({
    pubkey: resolvedAccounts.authority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.authority[1],
  });

  // Payer.
  signers.push(resolvedAccounts.payer[0]);
  keys.push({
    pubkey: resolvedAccounts.payer[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.payer[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: publicKey(resolvedAccounts.sysvarInstructions[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.sysvarInstructions[1],
  });

  // Spl Token Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.splTokenProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.splTokenProgram[1],
  });

  // Authorization Rules Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authorizationRulesProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authorizationRulesProgram[1],
  });

  // Authorization Rules.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authorizationRules[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authorizationRules[1],
  });

  // Data.
  const data =
    getRevokeInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
