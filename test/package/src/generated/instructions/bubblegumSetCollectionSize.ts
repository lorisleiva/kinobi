/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  SetCollectionSizeArgs,
  SetCollectionSizeArgsArgs,
  getSetCollectionSizeArgsSerializer,
} from '../types';

// Accounts.
export type BubblegumSetCollectionSizeInstructionAccounts = {
  /** Collection Metadata account */
  collectionMetadata: PublicKey | Pda;
  /** Collection Update authority */
  collectionAuthority: Signer;
  /** Mint of the Collection */
  collectionMint: PublicKey | Pda;
  /** Signing PDA of Bubblegum program */
  bubblegumSigner: Signer;
  /** Collection Authority Record PDA */
  collectionAuthorityRecord?: PublicKey | Pda;
};

// Data.
export type BubblegumSetCollectionSizeInstructionData = {
  discriminator: number;
  setCollectionSizeArgs: SetCollectionSizeArgs;
};

export type BubblegumSetCollectionSizeInstructionDataArgs = {
  setCollectionSizeArgs: SetCollectionSizeArgsArgs;
};

export function getBubblegumSetCollectionSizeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  BubblegumSetCollectionSizeInstructionDataArgs,
  BubblegumSetCollectionSizeInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    BubblegumSetCollectionSizeInstructionDataArgs,
    any,
    BubblegumSetCollectionSizeInstructionData
  >(
    s.struct<BubblegumSetCollectionSizeInstructionData>(
      [
        ['discriminator', s.u8()],
        ['setCollectionSizeArgs', getSetCollectionSizeArgsSerializer(context)],
      ],
      { description: 'BubblegumSetCollectionSizeInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 36 })
  ) as Serializer<
    BubblegumSetCollectionSizeInstructionDataArgs,
    BubblegumSetCollectionSizeInstructionData
  >;
}

// Args.
export type BubblegumSetCollectionSizeInstructionArgs =
  BubblegumSetCollectionSizeInstructionDataArgs;

// Instruction.
export function bubblegumSetCollectionSize(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: BubblegumSetCollectionSizeInstructionAccounts &
    BubblegumSetCollectionSizeInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    collectionMetadata: [input.collectionMetadata, true] as const,
    collectionAuthority: [input.collectionAuthority, true] as const,
    collectionMint: [input.collectionMint, false] as const,
    bubblegumSigner: [input.bubblegumSigner, false] as const,
    collectionAuthorityRecord: [
      input.collectionAuthorityRecord,
      false,
    ] as const,
  };
  const resolvingArgs = {};
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Collection Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMetadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMetadata[1],
  });

  // Collection Authority.
  signers.push(resolvedAccounts.collectionAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.collectionAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.collectionAuthority[1],
  });

  // Collection Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMint[1],
  });

  // Bubblegum Signer.
  signers.push(resolvedAccounts.bubblegumSigner[0]);
  keys.push({
    pubkey: resolvedAccounts.bubblegumSigner[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.bubblegumSigner[1],
  });

  // Collection Authority Record (optional).
  if (resolvedAccounts.collectionAuthorityRecord[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.collectionAuthorityRecord[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.collectionAuthorityRecord[1],
    });
  }

  // Data.
  const data =
    getBubblegumSetCollectionSizeInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
