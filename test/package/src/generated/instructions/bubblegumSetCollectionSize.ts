/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi-core';
import {
  SetCollectionSizeArgs,
  SetCollectionSizeArgsArgs,
  getSetCollectionSizeArgsSerializer,
} from '../types';

// Accounts.
export type BubblegumSetCollectionSizeInstructionAccounts = {
  /** Collection Metadata account */
  collectionMetadata: PublicKey;
  /** Collection Update authority */
  collectionAuthority: Signer;
  /** Mint of the Collection */
  collectionMint: PublicKey;
  /** Signing PDA of Bubblegum program */
  bubblegumSigner: Signer;
  /** Collection Authority Record PDA */
  collectionAuthorityRecord?: PublicKey;
};

// Arguments.
export type BubblegumSetCollectionSizeInstructionData = {
  discriminator: number;
  setCollectionSizeArgs: SetCollectionSizeArgs;
};

export type BubblegumSetCollectionSizeInstructionArgs = {
  setCollectionSizeArgs: SetCollectionSizeArgsArgs;
};

export function getBubblegumSetCollectionSizeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  BubblegumSetCollectionSizeInstructionArgs,
  BubblegumSetCollectionSizeInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    BubblegumSetCollectionSizeInstructionArgs,
    BubblegumSetCollectionSizeInstructionData,
    BubblegumSetCollectionSizeInstructionData
  >(
    s.struct<BubblegumSetCollectionSizeInstructionData>(
      [
        ['discriminator', s.u8()],
        ['setCollectionSizeArgs', getSetCollectionSizeArgsSerializer(context)],
      ],
      { description: 'BubblegumSetCollectionSizeInstructionArgs' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: 36,
      } as BubblegumSetCollectionSizeInstructionData)
  ) as Serializer<
    BubblegumSetCollectionSizeInstructionArgs,
    BubblegumSetCollectionSizeInstructionData
  >;
}

// Instruction.
export function bubblegumSetCollectionSize(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: BubblegumSetCollectionSizeInstructionAccounts &
    BubblegumSetCollectionSizeInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey =
    context.programs.get('mplTokenMetadata').publicKey;

  // Resolved accounts.
  const collectionMetadataAccount = input.collectionMetadata;
  const collectionAuthorityAccount = input.collectionAuthority;
  const collectionMintAccount = input.collectionMint;
  const bubblegumSignerAccount = input.bubblegumSigner;
  const collectionAuthorityRecordAccount = input.collectionAuthorityRecord;

  // Collection Metadata.
  keys.push({
    pubkey: collectionMetadataAccount,
    isSigner: false,
    isWritable: isWritable(collectionMetadataAccount, true),
  });

  // Collection Authority.
  signers.push(collectionAuthorityAccount);
  keys.push({
    pubkey: collectionAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(collectionAuthorityAccount, true),
  });

  // Collection Mint.
  keys.push({
    pubkey: collectionMintAccount,
    isSigner: false,
    isWritable: isWritable(collectionMintAccount, false),
  });

  // Bubblegum Signer.
  signers.push(bubblegumSignerAccount);
  keys.push({
    pubkey: bubblegumSignerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(bubblegumSignerAccount, false),
  });

  // Collection Authority Record (optional).
  if (collectionAuthorityRecordAccount) {
    keys.push({
      pubkey: collectionAuthorityRecordAccount,
      isSigner: false,
      isWritable: isWritable(collectionAuthorityRecordAccount, false),
    });
  }

  // Data.
  const data =
    getBubblegumSetCollectionSizeInstructionDataSerializer(context).serialize(
      input
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
