/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  isSigner,
  mapSerializer,
  publicKey,
} from '@metaplex-foundation/umi-core';
import {
  Operation,
  Payload,
  PayloadArgs,
  getOperationSerializer,
  getPayloadSerializer,
} from '../types';

// Accounts.
export type ValidateInstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSet: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  optRuleSigner1?: PublicKey | Signer;
  /** Optional rule validation signer 2 */
  optRuleSigner2?: Signer;
  /** Optional rule validation signer 3 */
  optRuleSigner3?: Signer;
  /** Optional rule validation signer 4 */
  optRuleSigner4?: Signer;
  /** Optional rule validation signer 5 */
  optRuleSigner5?: Signer;
  /** Optional rule validation non-signer 1 */
  optRuleNonsigner1?: PublicKey;
  /** Optional rule validation non-signer 2 */
  optRuleNonsigner2?: PublicKey;
  /** Optional rule validation non-signer 3 */
  optRuleNonsigner3?: PublicKey;
  /** Optional rule validation non-signer 4 */
  optRuleNonsigner4?: PublicKey;
  /** Optional rule validation non-signer 5 */
  optRuleNonsigner5?: PublicKey;
};

// Arguments.
export type ValidateInstructionData = {
  discriminator: number;
  ruleSetName: string;
  operation: Operation;
  payload: Payload;
};

export type ValidateInstructionArgs = {
  ruleSetName: string;
  operation: Operation;
  payload: PayloadArgs;
};

export function getValidateInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<ValidateInstructionArgs, ValidateInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    ValidateInstructionArgs,
    ValidateInstructionData,
    ValidateInstructionData
  >(
    s.struct<ValidateInstructionData>(
      [
        ['discriminator', s.u8()],
        ['ruleSetName', s.string()],
        ['operation', getOperationSerializer(context)],
        ['payload', getPayloadSerializer(context)],
      ],
      'ValidateInstructionArgs'
    ),
    (value) => ({ ...value, discriminator: 1 } as ValidateInstructionData)
  ) as Serializer<ValidateInstructionArgs, ValidateInstructionData>;
}

// Instruction.
export function validate(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: ValidateInstructionAccounts & ValidateInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey =
    context.programs.get('mplTokenAuthRules').publicKey;

  // Resolved accounts.
  const payerAccount = input.payer ?? context.payer;
  const ruleSetAccount = input.ruleSet;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const optRuleSigner1Account = input.optRuleSigner1;
  const optRuleSigner2Account = input.optRuleSigner2;
  const optRuleSigner3Account = input.optRuleSigner3;
  const optRuleSigner4Account = input.optRuleSigner4;
  const optRuleSigner5Account = input.optRuleSigner5;
  const optRuleNonsigner1Account = input.optRuleNonsigner1;
  const optRuleNonsigner2Account = input.optRuleNonsigner2;
  const optRuleNonsigner3Account = input.optRuleNonsigner3;
  const optRuleNonsigner4Account = input.optRuleNonsigner4;
  const optRuleNonsigner5Account = input.optRuleNonsigner5;

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Rule Set.
  keys.push({
    pubkey: ruleSetAccount,
    isSigner: false,
    isWritable: isWritable(ruleSetAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Opt Rule Signer1 (optional).
  if (optRuleSigner1Account) {
    if (isSigner(optRuleSigner1Account)) {
      signers.push(optRuleSigner1Account);
    }
    keys.push({
      pubkey: publicKey(optRuleSigner1Account),
      isSigner: isSigner(optRuleSigner1Account),
      isWritable: isWritable(optRuleSigner1Account, false),
    });
  }

  // Opt Rule Signer2 (optional).
  if (optRuleSigner2Account) {
    signers.push(optRuleSigner2Account);
    keys.push({
      pubkey: optRuleSigner2Account.publicKey,
      isSigner: true,
      isWritable: isWritable(optRuleSigner2Account, false),
    });
  }

  // Opt Rule Signer3 (optional).
  if (optRuleSigner3Account) {
    signers.push(optRuleSigner3Account);
    keys.push({
      pubkey: optRuleSigner3Account.publicKey,
      isSigner: true,
      isWritable: isWritable(optRuleSigner3Account, false),
    });
  }

  // Opt Rule Signer4 (optional).
  if (optRuleSigner4Account) {
    signers.push(optRuleSigner4Account);
    keys.push({
      pubkey: optRuleSigner4Account.publicKey,
      isSigner: true,
      isWritable: isWritable(optRuleSigner4Account, false),
    });
  }

  // Opt Rule Signer5 (optional).
  if (optRuleSigner5Account) {
    signers.push(optRuleSigner5Account);
    keys.push({
      pubkey: optRuleSigner5Account.publicKey,
      isSigner: true,
      isWritable: isWritable(optRuleSigner5Account, false),
    });
  }

  // Opt Rule Nonsigner1 (optional).
  if (optRuleNonsigner1Account) {
    keys.push({
      pubkey: optRuleNonsigner1Account,
      isSigner: false,
      isWritable: isWritable(optRuleNonsigner1Account, false),
    });
  }

  // Opt Rule Nonsigner2 (optional).
  if (optRuleNonsigner2Account) {
    keys.push({
      pubkey: optRuleNonsigner2Account,
      isSigner: false,
      isWritable: isWritable(optRuleNonsigner2Account, false),
    });
  }

  // Opt Rule Nonsigner3 (optional).
  if (optRuleNonsigner3Account) {
    keys.push({
      pubkey: optRuleNonsigner3Account,
      isSigner: false,
      isWritable: isWritable(optRuleNonsigner3Account, false),
    });
  }

  // Opt Rule Nonsigner4 (optional).
  if (optRuleNonsigner4Account) {
    keys.push({
      pubkey: optRuleNonsigner4Account,
      isSigner: false,
      isWritable: isWritable(optRuleNonsigner4Account, false),
    });
  }

  // Opt Rule Nonsigner5 (optional).
  if (optRuleNonsigner5Account) {
    keys.push({
      pubkey: optRuleNonsigner5Account,
      isSigner: false,
      isWritable: isWritable(optRuleNonsigner5Account, false),
    });
  }

  // Data.
  const data = getValidateInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
