/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  isSigner,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';
import {
  Operation,
  OperationArgs,
  Payload,
  PayloadArgs,
  getOperationSerializer,
  getPayloadSerializer,
} from '../types';

// Accounts.
export type ValidateInstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSet: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  optRuleSigner1?: PublicKey | Pda | Signer;
  /** Optional rule validation signer 2 */
  optRuleSigner2?: Signer;
  /** Optional rule validation signer 3 */
  optRuleSigner3?: Signer;
  /** Optional rule validation signer 4 */
  optRuleSigner4?: Signer;
  /** Optional rule validation signer 5 */
  optRuleSigner5?: Signer;
  /** Optional rule validation non-signer 1 */
  optRuleNonsigner1?: PublicKey | Pda;
  /** Optional rule validation non-signer 2 */
  optRuleNonsigner2?: PublicKey | Pda;
  /** Optional rule validation non-signer 3 */
  optRuleNonsigner3?: PublicKey | Pda;
  /** Optional rule validation non-signer 4 */
  optRuleNonsigner4?: PublicKey | Pda;
  /** Optional rule validation non-signer 5 */
  optRuleNonsigner5?: PublicKey | Pda;
};

// Data.
export type ValidateInstructionData = {
  discriminator: number;
  ruleSetName: string;
  operation: Operation;
  payload: Payload;
};

export type ValidateInstructionDataArgs = {
  ruleSetName: string;
  operation: OperationArgs;
  payload: PayloadArgs;
};

export function getValidateInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<ValidateInstructionDataArgs, ValidateInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    ValidateInstructionDataArgs,
    any,
    ValidateInstructionData
  >(
    s.struct<ValidateInstructionData>(
      [
        ['discriminator', s.u8()],
        ['ruleSetName', s.string()],
        ['operation', getOperationSerializer(context)],
        ['payload', getPayloadSerializer(context)],
      ],
      { description: 'ValidateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<ValidateInstructionDataArgs, ValidateInstructionData>;
}

// Args.
export type ValidateInstructionArgs = ValidateInstructionDataArgs;

// Instruction.
export function validate(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: ValidateInstructionAccounts & ValidateInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    ruleSet: [input.ruleSet, true] as const,
    optRuleSigner1: [input.optRuleSigner1, false] as const,
    optRuleSigner2: [input.optRuleSigner2, false] as const,
    optRuleSigner3: [input.optRuleSigner3, false] as const,
    optRuleSigner4: [input.optRuleSigner4, false] as const,
    optRuleSigner5: [input.optRuleSigner5, false] as const,
    optRuleNonsigner1: [input.optRuleNonsigner1, false] as const,
    optRuleNonsigner2: [input.optRuleNonsigner2, false] as const,
    optRuleNonsigner3: [input.optRuleNonsigner3, false] as const,
    optRuleNonsigner4: [input.optRuleNonsigner4, false] as const,
    optRuleNonsigner5: [input.optRuleNonsigner5, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Payer.
  signers.push(resolvedAccounts.payer[0]);
  keys.push({
    pubkey: resolvedAccounts.payer[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.payer[1],
  });

  // Rule Set.
  keys.push({
    pubkey: publicKey(resolvedAccounts.ruleSet[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.ruleSet[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Opt Rule Signer1 (optional).
  if (resolvedAccounts.optRuleSigner1[0]) {
    if (isSigner(resolvedAccounts.optRuleSigner1[0])) {
      signers.push(resolvedAccounts.optRuleSigner1[0]);
    }
    keys.push({
      pubkey: publicKey(resolvedAccounts.optRuleSigner1[0], false),
      isSigner: isSigner(resolvedAccounts.optRuleSigner1[0]),
      isWritable: resolvedAccounts.optRuleSigner1[1],
    });
  }

  // Opt Rule Signer2 (optional).
  if (resolvedAccounts.optRuleSigner2[0]) {
    signers.push(resolvedAccounts.optRuleSigner2[0]);
    keys.push({
      pubkey: resolvedAccounts.optRuleSigner2[0].publicKey,
      isSigner: true,
      isWritable: resolvedAccounts.optRuleSigner2[1],
    });
  }

  // Opt Rule Signer3 (optional).
  if (resolvedAccounts.optRuleSigner3[0]) {
    signers.push(resolvedAccounts.optRuleSigner3[0]);
    keys.push({
      pubkey: resolvedAccounts.optRuleSigner3[0].publicKey,
      isSigner: true,
      isWritable: resolvedAccounts.optRuleSigner3[1],
    });
  }

  // Opt Rule Signer4 (optional).
  if (resolvedAccounts.optRuleSigner4[0]) {
    signers.push(resolvedAccounts.optRuleSigner4[0]);
    keys.push({
      pubkey: resolvedAccounts.optRuleSigner4[0].publicKey,
      isSigner: true,
      isWritable: resolvedAccounts.optRuleSigner4[1],
    });
  }

  // Opt Rule Signer5 (optional).
  if (resolvedAccounts.optRuleSigner5[0]) {
    signers.push(resolvedAccounts.optRuleSigner5[0]);
    keys.push({
      pubkey: resolvedAccounts.optRuleSigner5[0].publicKey,
      isSigner: true,
      isWritable: resolvedAccounts.optRuleSigner5[1],
    });
  }

  // Opt Rule Nonsigner1 (optional).
  if (resolvedAccounts.optRuleNonsigner1[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.optRuleNonsigner1[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.optRuleNonsigner1[1],
    });
  }

  // Opt Rule Nonsigner2 (optional).
  if (resolvedAccounts.optRuleNonsigner2[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.optRuleNonsigner2[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.optRuleNonsigner2[1],
    });
  }

  // Opt Rule Nonsigner3 (optional).
  if (resolvedAccounts.optRuleNonsigner3[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.optRuleNonsigner3[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.optRuleNonsigner3[1],
    });
  }

  // Opt Rule Nonsigner4 (optional).
  if (resolvedAccounts.optRuleNonsigner4[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.optRuleNonsigner4[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.optRuleNonsigner4[1],
    });
  }

  // Opt Rule Nonsigner5 (optional).
  if (resolvedAccounts.optRuleNonsigner5[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.optRuleNonsigner5[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.optRuleNonsigner5[1],
    });
  }

  // Data.
  const data =
    getValidateInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
