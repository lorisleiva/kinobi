/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type UpdatePrimarySaleHappenedViaTokenInstructionAccounts = {
  /** Metadata key (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey | Pda;
  /** Owner on the token account */
  owner: Signer;
  /** Account containing tokens from the metadata's mint */
  token: PublicKey | Pda;
};

// Data.
export type UpdatePrimarySaleHappenedViaTokenInstructionData = {
  discriminator: number;
};

export type UpdatePrimarySaleHappenedViaTokenInstructionDataArgs = {};

export function getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  UpdatePrimarySaleHappenedViaTokenInstructionDataArgs,
  UpdatePrimarySaleHappenedViaTokenInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    UpdatePrimarySaleHappenedViaTokenInstructionDataArgs,
    any,
    UpdatePrimarySaleHappenedViaTokenInstructionData
  >(
    s.struct<UpdatePrimarySaleHappenedViaTokenInstructionData>(
      [['discriminator', s.u8()]],
      { description: 'UpdatePrimarySaleHappenedViaTokenInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 4 })
  ) as Serializer<
    UpdatePrimarySaleHappenedViaTokenInstructionDataArgs,
    UpdatePrimarySaleHappenedViaTokenInstructionData
  >;
}

// Instruction.
export function updatePrimarySaleHappenedViaToken(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: UpdatePrimarySaleHappenedViaTokenInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    metadata: [input.metadata, true] as const,
    owner: [input.owner, false] as const,
    token: [input.token, false] as const,
  };

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Owner.
  signers.push(resolvedAccounts.owner[0]);
  keys.push({
    pubkey: resolvedAccounts.owner[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.owner[1],
  });

  // Token.
  keys.push({
    pubkey: publicKey(resolvedAccounts.token[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.token[1],
  });

  // Data.
  const data = getUpdatePrimarySaleHappenedViaTokenInstructionDataSerializer(
    context
  ).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
