/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { Creator, CreatorArgs, getCreatorSerializer } from '../types';

// Accounts.
export type UpdateMetadataAccountInstructionAccounts = {
  /** Metadata account */
  metadata: PublicKey | Pda;
  /** Update authority key */
  updateAuthority: Signer;
};

// Data.
export type UpdateMetadataAccountInstructionData = {
  discriminator: number;
  data: Option<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<Creator>>;
  }>;
  updateAuthority: Option<PublicKey>;
  primarySaleHappened: Option<boolean>;
};

export type UpdateMetadataAccountInstructionDataArgs = {
  data: Option<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<CreatorArgs>>;
  }>;
  updateAuthority: Option<PublicKey>;
  primarySaleHappened: Option<boolean>;
};

export function getUpdateMetadataAccountInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  UpdateMetadataAccountInstructionDataArgs,
  UpdateMetadataAccountInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    UpdateMetadataAccountInstructionDataArgs,
    any,
    UpdateMetadataAccountInstructionData
  >(
    s.struct<UpdateMetadataAccountInstructionData>(
      [
        ['discriminator', s.u8()],
        [
          'data',
          s.option(
            s.struct<any>([
              ['name', s.string()],
              ['symbol', s.string()],
              ['uri', s.string()],
              ['sellerFeeBasisPoints', s.u16()],
              ['creators', s.option(s.array(getCreatorSerializer(context)))],
            ])
          ),
        ],
        ['updateAuthority', s.option(s.publicKey())],
        ['primarySaleHappened', s.option(s.bool())],
      ],
      { description: 'UpdateMetadataAccountInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<
    UpdateMetadataAccountInstructionDataArgs,
    UpdateMetadataAccountInstructionData
  >;
}

// Args.
export type UpdateMetadataAccountInstructionArgs =
  UpdateMetadataAccountInstructionDataArgs;

// Instruction.
export function updateMetadataAccount(
  context: Pick<Context, 'serializer' | 'programs'>,
  accounts: UpdateMetadataAccountInstructionAccounts,
  args: UpdateMetadataAccountInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    metadata: [accounts.metadata, true] as const,
    updateAuthority: [accounts.updateAuthority, false] as const,
  };
  const resolvingArgs = {};
  const resolvedArgs = { ...args, ...resolvingArgs };

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Update Authority.
  signers.push(resolvedAccounts.updateAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.updateAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.updateAuthority[1],
  });

  // Data.
  const data =
    getUpdateMetadataAccountInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
