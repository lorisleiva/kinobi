/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';

// Accounts.
export type BurnNftInstructionAccounts = {
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey | Pda;
  /** NFT owner */
  owner: Signer;
  /** Mint of the NFT */
  mint: PublicKey | Pda;
  /** Token account to close */
  tokenAccount: PublicKey | Pda;
  /** MasterEdition2 of the NFT */
  masterEditionAccount: PublicKey | Pda;
  /** SPL Token Program */
  splTokenProgram?: PublicKey | Pda;
  /** Metadata of the Collection */
  collectionMetadata?: PublicKey | Pda;
};

// Data.
export type BurnNftInstructionData = { discriminator: number };

export type BurnNftInstructionDataArgs = {};

export function getBurnNftInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BurnNftInstructionDataArgs, BurnNftInstructionData> {
  const s = context.serializer;
  return mapSerializer<BurnNftInstructionDataArgs, any, BurnNftInstructionData>(
    s.struct<BurnNftInstructionData>([['discriminator', s.u8()]], {
      description: 'BurnNftInstructionData',
    }),
    (value) => ({ ...value, discriminator: 29 })
  ) as Serializer<BurnNftInstructionDataArgs, BurnNftInstructionData>;
}

// Instruction.
export function burnNft(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: BurnNftInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    metadata: [input.metadata, true] as const,
    owner: [input.owner, true] as const,
    mint: [input.mint, true] as const,
    tokenAccount: [input.tokenAccount, true] as const,
    masterEditionAccount: [input.masterEditionAccount, true] as const,
    collectionMetadata: [input.collectionMetadata, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'splTokenProgram',
    input.splTokenProgram
      ? ([input.splTokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Owner.
  signers.push(resolvedAccounts.owner[0]);
  keys.push({
    pubkey: resolvedAccounts.owner[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.owner[1],
  });

  // Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.mint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.mint[1],
  });

  // Token Account.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenAccount[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenAccount[1],
  });

  // Master Edition Account.
  keys.push({
    pubkey: publicKey(resolvedAccounts.masterEditionAccount[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.masterEditionAccount[1],
  });

  // Spl Token Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.splTokenProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.splTokenProgram[1],
  });

  // Collection Metadata (optional).
  if (resolvedAccounts.collectionMetadata[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.collectionMetadata[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.collectionMetadata[1],
    });
  }

  // Data.
  const data = getBurnNftInstructionDataSerializer(context).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
