/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';
import {
  MintNewEditionFromMasterEditionViaTokenArgs,
  MintNewEditionFromMasterEditionViaTokenArgsArgs,
  getMintNewEditionFromMasterEditionViaTokenArgsSerializer,
} from '../types';

// Accounts.
export type MintNewEditionFromMasterEditionViaVaultProxyInstructionAccounts = {
  /** New Metadata key (pda of ['metadata', program id, mint id]) */
  newMetadata: PublicKey | Pda;
  /** New Edition (pda of ['metadata', program id, mint id, 'edition']) */
  newEdition: PublicKey | Pda;
  /** Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'] */
  masterEdition: PublicKey | Pda;
  /** Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY */
  newMint: PublicKey | Pda;
  /** Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE). */
  editionMarkPda: PublicKey | Pda;
  /** Mint authority of new mint */
  newMintAuthority: Signer;
  /** payer */
  payer?: Signer;
  /** Vault authority */
  vaultAuthority: Signer;
  /** Safety deposit token store account */
  safetyDepositStore: PublicKey | Pda;
  /** Safety deposit box */
  safetyDepositBox: PublicKey | Pda;
  /** Vault */
  vault: PublicKey | Pda;
  /** Update authority info for new metadata */
  newMetadataUpdateAuthority: PublicKey | Pda;
  /** Master record metadata account */
  metadata: PublicKey | Pda;
  /** Token program */
  tokenProgram?: PublicKey | Pda;
  /** Token vault program */
  tokenVaultProgram: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Rent info */
  rent?: PublicKey | Pda;
};

// Data.
export type MintNewEditionFromMasterEditionViaVaultProxyInstructionData = {
  discriminator: number;
  mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgs;
};

export type MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs = {
  mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgsArgs;
};

export function getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs,
  MintNewEditionFromMasterEditionViaVaultProxyInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs,
    any,
    MintNewEditionFromMasterEditionViaVaultProxyInstructionData
  >(
    s.struct<MintNewEditionFromMasterEditionViaVaultProxyInstructionData>(
      [
        ['discriminator', s.u8()],
        [
          'mintNewEditionFromMasterEditionViaTokenArgs',
          getMintNewEditionFromMasterEditionViaTokenArgsSerializer(context),
        ],
      ],
      {
        description:
          'MintNewEditionFromMasterEditionViaVaultProxyInstructionData',
      }
    ),
    (value) => ({ ...value, discriminator: 13 })
  ) as Serializer<
    MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs,
    MintNewEditionFromMasterEditionViaVaultProxyInstructionData
  >;
}

// Args.
export type MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs =
  MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs;

// Instruction.
export function mintNewEditionFromMasterEditionViaVaultProxy(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: MintNewEditionFromMasterEditionViaVaultProxyInstructionAccounts &
    MintNewEditionFromMasterEditionViaVaultProxyInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    newMetadata: [input.newMetadata, true] as const,
    newEdition: [input.newEdition, true] as const,
    masterEdition: [input.masterEdition, true] as const,
    newMint: [input.newMint, true] as const,
    editionMarkPda: [input.editionMarkPda, true] as const,
    newMintAuthority: [input.newMintAuthority, false] as const,
    vaultAuthority: [input.vaultAuthority, false] as const,
    safetyDepositStore: [input.safetyDepositStore, false] as const,
    safetyDepositBox: [input.safetyDepositBox, false] as const,
    vault: [input.vault, false] as const,
    newMetadataUpdateAuthority: [
      input.newMetadataUpdateAuthority,
      false,
    ] as const,
    metadata: [input.metadata, false] as const,
    tokenVaultProgram: [input.tokenVaultProgram, false] as const,
    rent: [input.rent, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  // New Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.newMetadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.newMetadata[1],
  });

  // New Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.newEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.newEdition[1],
  });

  // Master Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.masterEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.masterEdition[1],
  });

  // New Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.newMint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.newMint[1],
  });

  // Edition Mark Pda.
  keys.push({
    pubkey: publicKey(resolvedAccounts.editionMarkPda[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.editionMarkPda[1],
  });

  // New Mint Authority.
  signers.push(resolvedAccounts.newMintAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.newMintAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.newMintAuthority[1],
  });

  // Payer.
  signers.push(resolvedAccounts.payer[0]);
  keys.push({
    pubkey: resolvedAccounts.payer[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.payer[1],
  });

  // Vault Authority.
  signers.push(resolvedAccounts.vaultAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.vaultAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.vaultAuthority[1],
  });

  // Safety Deposit Store.
  keys.push({
    pubkey: publicKey(resolvedAccounts.safetyDepositStore[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.safetyDepositStore[1],
  });

  // Safety Deposit Box.
  keys.push({
    pubkey: publicKey(resolvedAccounts.safetyDepositBox[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.safetyDepositBox[1],
  });

  // Vault.
  keys.push({
    pubkey: publicKey(resolvedAccounts.vault[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.vault[1],
  });

  // New Metadata Update Authority.
  keys.push({
    pubkey: publicKey(resolvedAccounts.newMetadataUpdateAuthority[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.newMetadataUpdateAuthority[1],
  });

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Token Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenProgram[1],
  });

  // Token Vault Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenVaultProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenVaultProgram[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Rent (optional).
  if (resolvedAccounts.rent[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.rent[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.rent[1],
    });
  }

  // Data.
  const data =
    getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer(
      context
    ).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
