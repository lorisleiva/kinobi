/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi-core';
import {
  MintNewEditionFromMasterEditionViaTokenArgs,
  MintNewEditionFromMasterEditionViaTokenArgsArgs,
  getMintNewEditionFromMasterEditionViaTokenArgsSerializer,
} from '../types';

// Accounts.
export type MintNewEditionFromMasterEditionViaVaultProxyInstructionAccounts = {
  /** New Metadata key (pda of ['metadata', program id, mint id]) */
  newMetadata: PublicKey;
  /** New Edition (pda of ['metadata', program id, mint id, 'edition']) */
  newEdition: PublicKey;
  /** Master Record Edition V2 (pda of ['metadata', program id, master metadata mint id, 'edition'] */
  masterEdition: PublicKey;
  /** Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY */
  newMint: PublicKey;
  /** Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number]) where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE). */
  editionMarkPda: PublicKey;
  /** Mint authority of new mint */
  newMintAuthority: Signer;
  /** payer */
  payer?: Signer;
  /** Vault authority */
  vaultAuthority: Signer;
  /** Safety deposit token store account */
  safetyDepositStore: PublicKey;
  /** Safety deposit box */
  safetyDepositBox: PublicKey;
  /** Vault */
  vault: PublicKey;
  /** Update authority info for new metadata */
  newMetadataUpdateAuthority: PublicKey;
  /** Master record metadata account */
  metadata: PublicKey;
  /** Token program */
  tokenProgram?: PublicKey;
  /** Token vault program */
  tokenVaultProgram: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Rent info */
  rent?: PublicKey;
};

// Arguments.
export type MintNewEditionFromMasterEditionViaVaultProxyInstructionData = {
  discriminator: number;
  mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgs;
};

export type MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs = {
  mintNewEditionFromMasterEditionViaTokenArgs: MintNewEditionFromMasterEditionViaTokenArgsArgs;
};

export function getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs,
  MintNewEditionFromMasterEditionViaVaultProxyInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs,
    MintNewEditionFromMasterEditionViaVaultProxyInstructionData,
    MintNewEditionFromMasterEditionViaVaultProxyInstructionData
  >(
    s.struct<MintNewEditionFromMasterEditionViaVaultProxyInstructionData>(
      [
        ['discriminator', s.u8()],
        [
          'mintNewEditionFromMasterEditionViaTokenArgs',
          getMintNewEditionFromMasterEditionViaTokenArgsSerializer(context),
        ],
      ],
      {
        description:
          'MintNewEditionFromMasterEditionViaVaultProxyInstructionData',
      }
    ),
    (value) =>
      ({
        ...value,
        discriminator: 13,
      } as MintNewEditionFromMasterEditionViaVaultProxyInstructionData)
  ) as Serializer<
    MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs,
    MintNewEditionFromMasterEditionViaVaultProxyInstructionData
  >;
}

// Instruction.
export function mintNewEditionFromMasterEditionViaVaultProxy(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: MintNewEditionFromMasterEditionViaVaultProxyInstructionAccounts &
    MintNewEditionFromMasterEditionViaVaultProxyInstructionDataArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey =
    context.programs.get('mplTokenMetadata').publicKey;

  // Resolved accounts.
  const newMetadataAccount = input.newMetadata;
  const newEditionAccount = input.newEdition;
  const masterEditionAccount = input.masterEdition;
  const newMintAccount = input.newMint;
  const editionMarkPdaAccount = input.editionMarkPda;
  const newMintAuthorityAccount = input.newMintAuthority;
  const payerAccount = input.payer ?? context.payer;
  const vaultAuthorityAccount = input.vaultAuthority;
  const safetyDepositStoreAccount = input.safetyDepositStore;
  const safetyDepositBoxAccount = input.safetyDepositBox;
  const vaultAccount = input.vault;
  const newMetadataUpdateAuthorityAccount = input.newMetadataUpdateAuthority;
  const metadataAccount = input.metadata;
  const tokenProgramAccount = input.tokenProgram ?? {
    ...context.programs.get('splToken').publicKey,
    isWritable: false,
  };
  const tokenVaultProgramAccount = input.tokenVaultProgram;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.get('splSystem').publicKey,
    isWritable: false,
  };
  const rentAccount = input.rent;

  // New Metadata.
  keys.push({
    pubkey: newMetadataAccount,
    isSigner: false,
    isWritable: isWritable(newMetadataAccount, true),
  });

  // New Edition.
  keys.push({
    pubkey: newEditionAccount,
    isSigner: false,
    isWritable: isWritable(newEditionAccount, true),
  });

  // Master Edition.
  keys.push({
    pubkey: masterEditionAccount,
    isSigner: false,
    isWritable: isWritable(masterEditionAccount, true),
  });

  // New Mint.
  keys.push({
    pubkey: newMintAccount,
    isSigner: false,
    isWritable: isWritable(newMintAccount, true),
  });

  // Edition Mark Pda.
  keys.push({
    pubkey: editionMarkPdaAccount,
    isSigner: false,
    isWritable: isWritable(editionMarkPdaAccount, true),
  });

  // New Mint Authority.
  signers.push(newMintAuthorityAccount);
  keys.push({
    pubkey: newMintAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(newMintAuthorityAccount, false),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Vault Authority.
  signers.push(vaultAuthorityAccount);
  keys.push({
    pubkey: vaultAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(vaultAuthorityAccount, false),
  });

  // Safety Deposit Store.
  keys.push({
    pubkey: safetyDepositStoreAccount,
    isSigner: false,
    isWritable: isWritable(safetyDepositStoreAccount, false),
  });

  // Safety Deposit Box.
  keys.push({
    pubkey: safetyDepositBoxAccount,
    isSigner: false,
    isWritable: isWritable(safetyDepositBoxAccount, false),
  });

  // Vault.
  keys.push({
    pubkey: vaultAccount,
    isSigner: false,
    isWritable: isWritable(vaultAccount, false),
  });

  // New Metadata Update Authority.
  keys.push({
    pubkey: newMetadataUpdateAuthorityAccount,
    isSigner: false,
    isWritable: isWritable(newMetadataUpdateAuthorityAccount, false),
  });

  // Metadata.
  keys.push({
    pubkey: metadataAccount,
    isSigner: false,
    isWritable: isWritable(metadataAccount, false),
  });

  // Token Program.
  keys.push({
    pubkey: tokenProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenProgramAccount, false),
  });

  // Token Vault Program.
  keys.push({
    pubkey: tokenVaultProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenVaultProgramAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Rent (optional).
  if (rentAccount) {
    keys.push({
      pubkey: rentAccount,
      isSigner: false,
      isWritable: isWritable(rentAccount, false),
    });
  }

  // Data.
  const data =
    getMintNewEditionFromMasterEditionViaVaultProxyInstructionDataSerializer(
      context
    ).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
