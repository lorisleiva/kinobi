/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { resolveMasterEditionFromTokenStandard } from '../../hooked';
import { PickPartial, addObjectProperty } from '../shared';
import {
  TokenStandard,
  TokenStandardArgs,
  TransferArgs,
  TransferArgsArgs,
  getTransferArgsSerializer,
} from '../types';

// Accounts.
export type TransferInstructionAccounts = {
  /** Transfer authority (token or delegate owner) */
  authority?: Signer;
  /** Delegate record PDA */
  delegateRecord?: PublicKey | Pda;
  /** Token account */
  token: PublicKey | Pda;
  /** Token account owner */
  tokenOwner: PublicKey | Pda;
  /** Destination token account */
  destination: PublicKey | Pda;
  /** Destination token account owner */
  destinationOwner: PublicKey | Pda;
  /** Mint of token asset */
  mint: PublicKey | Pda;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey | Pda;
  /** Master Edition of token asset */
  masterEdition?: PublicKey | Pda;
  /** SPL Token Program */
  splTokenProgram?: PublicKey | Pda;
  /** SPL Associated Token Account program */
  splAtaProgram?: PublicKey | Pda;
  /** System Program */
  systemProgram?: PublicKey | Pda;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey | Pda;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: PublicKey | Pda;
  /** Token Authorization Rules account */
  authorizationRules?: PublicKey | Pda;
};

// Data.
export type TransferInstructionData = {
  discriminator: number;
  transferArgs: TransferArgs;
};

export type TransferInstructionDataArgs = { transferArgs: TransferArgsArgs };

export function getTransferInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TransferInstructionDataArgs, TransferInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    TransferInstructionDataArgs,
    any,
    TransferInstructionData
  >(
    s.struct<TransferInstructionData>(
      [
        ['discriminator', s.u8()],
        ['transferArgs', getTransferArgsSerializer(context)],
      ],
      { description: 'TransferInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 46 })
  ) as Serializer<TransferInstructionDataArgs, TransferInstructionData>;
}

// Extra Args.
export type TransferInstructionExtraArgs = { tokenStandard: TokenStandardArgs };

// Args.
export type TransferInstructionArgs = PickPartial<
  TransferInstructionDataArgs & TransferInstructionExtraArgs,
  'tokenStandard'
>;

// Instruction.
export function transfer(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: TransferInstructionAccounts & TransferInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    token: [input.token, true] as const,
    tokenOwner: [input.tokenOwner, false] as const,
    destination: [input.destination, true] as const,
    destinationOwner: [input.destinationOwner, false] as const,
    mint: [input.mint, false] as const,
    metadata: [input.metadata, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'delegateRecord',
    input.delegateRecord
      ? ([input.delegateRecord, true] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'tokenStandard',
    input.tokenStandard ?? TokenStandard.NonFungible
  );
  addObjectProperty(
    resolvedAccounts,
    'masterEdition',
    input.masterEdition
      ? ([input.masterEdition, false] as const)
      : resolveMasterEditionFromTokenStandard(
          context,
          resolvedAccounts,
          { ...input, ...resolvingArgs },
          programId
        )
  );
  addObjectProperty(
    resolvedAccounts,
    'splTokenProgram',
    input.splTokenProgram
      ? ([input.splTokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'splAtaProgram',
    input.splAtaProgram
      ? ([input.splAtaProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splAssociatedToken',
            'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'sysvarInstructions',
    input.sysvarInstructions
      ? ([input.sysvarInstructions, false] as const)
      : ([
          publicKey('Sysvar1nstructions1111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRulesProgram',
    input.authorizationRulesProgram
      ? ([input.authorizationRulesProgram, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRules',
    input.authorizationRules
      ? ([input.authorizationRules, false] as const)
      : ([programId, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Authority.
  signers.push(resolvedAccounts.authority[0]);
  keys.push({
    pubkey: resolvedAccounts.authority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.authority[1],
  });

  // Delegate Record.
  keys.push({
    pubkey: publicKey(resolvedAccounts.delegateRecord[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.delegateRecord[1],
  });

  // Token.
  keys.push({
    pubkey: publicKey(resolvedAccounts.token[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.token[1],
  });

  // Token Owner.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenOwner[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenOwner[1],
  });

  // Destination.
  keys.push({
    pubkey: publicKey(resolvedAccounts.destination[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.destination[1],
  });

  // Destination Owner.
  keys.push({
    pubkey: publicKey(resolvedAccounts.destinationOwner[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.destinationOwner[1],
  });

  // Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.mint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.mint[1],
  });

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Master Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.masterEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.masterEdition[1],
  });

  // Spl Token Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.splTokenProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.splTokenProgram[1],
  });

  // Spl Ata Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.splAtaProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.splAtaProgram[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: publicKey(resolvedAccounts.sysvarInstructions[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.sysvarInstructions[1],
  });

  // Authorization Rules Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authorizationRulesProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authorizationRulesProgram[1],
  });

  // Authorization Rules.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authorizationRules[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authorizationRules[1],
  });

  // Data.
  const data =
    getTransferInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
