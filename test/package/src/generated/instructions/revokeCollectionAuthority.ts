/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type RevokeCollectionAuthorityInstructionAccounts = {
  /** Collection Authority Record PDA */
  collectionAuthorityRecord: PublicKey | Pda;
  /** Delegated Collection Authority */
  delegateAuthority: PublicKey | Pda;
  /** Update Authority, or Delegated Authority, of Collection NFT */
  revokeAuthority: Signer;
  /** Metadata account */
  metadata: PublicKey | Pda;
  /** Mint of Metadata */
  mint: PublicKey | Pda;
};

// Data.
export type RevokeCollectionAuthorityInstructionData = {
  discriminator: number;
};

export type RevokeCollectionAuthorityInstructionDataArgs = {};

export function getRevokeCollectionAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  RevokeCollectionAuthorityInstructionDataArgs,
  RevokeCollectionAuthorityInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    RevokeCollectionAuthorityInstructionDataArgs,
    any,
    RevokeCollectionAuthorityInstructionData
  >(
    s.struct<RevokeCollectionAuthorityInstructionData>(
      [['discriminator', s.u8()]],
      { description: 'RevokeCollectionAuthorityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 24 })
  ) as Serializer<
    RevokeCollectionAuthorityInstructionDataArgs,
    RevokeCollectionAuthorityInstructionData
  >;
}

// Instruction.
export function revokeCollectionAuthority(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: RevokeCollectionAuthorityInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    collectionAuthorityRecord: [input.collectionAuthorityRecord, true] as const,
    delegateAuthority: [input.delegateAuthority, true] as const,
    revokeAuthority: [input.revokeAuthority, true] as const,
    metadata: [input.metadata, false] as const,
    mint: [input.mint, false] as const,
  };

  // Collection Authority Record.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionAuthorityRecord[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionAuthorityRecord[1],
  });

  // Delegate Authority.
  keys.push({
    pubkey: publicKey(resolvedAccounts.delegateAuthority[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.delegateAuthority[1],
  });

  // Revoke Authority.
  signers.push(resolvedAccounts.revokeAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.revokeAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.revokeAuthority[1],
  });

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.mint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.mint[1],
  });

  // Data.
  const data = getRevokeCollectionAuthorityInstructionDataSerializer(
    context
  ).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
