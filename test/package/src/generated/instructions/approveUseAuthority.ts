/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';

// Accounts.
export type ApproveUseAuthorityInstructionAccounts = {
  /** Use Authority Record PDA */
  useAuthorityRecord: PublicKey | Pda;
  /** Owner */
  owner: Signer;
  /** Payer */
  payer?: Signer;
  /** A Use Authority */
  user: PublicKey | Pda;
  /** Owned Token Account Of Mint */
  ownerTokenAccount: PublicKey | Pda;
  /** Metadata account */
  metadata: PublicKey | Pda;
  /** Mint of Metadata */
  mint: PublicKey | Pda;
  /** Program As Signer (Burner) */
  burner: PublicKey | Pda;
  /** Token program */
  tokenProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Rent info */
  rent?: PublicKey | Pda;
};

// Data.
export type ApproveUseAuthorityInstructionData = {
  discriminator: number;
  numberOfUses: bigint;
};

export type ApproveUseAuthorityInstructionDataArgs = {
  numberOfUses: number | bigint;
};

export function getApproveUseAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  ApproveUseAuthorityInstructionDataArgs,
  ApproveUseAuthorityInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    ApproveUseAuthorityInstructionDataArgs,
    any,
    ApproveUseAuthorityInstructionData
  >(
    s.struct<ApproveUseAuthorityInstructionData>(
      [
        ['discriminator', s.u8()],
        ['numberOfUses', s.u64()],
      ],
      { description: 'ApproveUseAuthorityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 20 })
  ) as Serializer<
    ApproveUseAuthorityInstructionDataArgs,
    ApproveUseAuthorityInstructionData
  >;
}

// Args.
export type ApproveUseAuthorityInstructionArgs =
  ApproveUseAuthorityInstructionDataArgs;

// Instruction.
export function approveUseAuthority(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: ApproveUseAuthorityInstructionAccounts &
    ApproveUseAuthorityInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    useAuthorityRecord: [input.useAuthorityRecord, true] as const,
    owner: [input.owner, true] as const,
    user: [input.user, false] as const,
    ownerTokenAccount: [input.ownerTokenAccount, true] as const,
    metadata: [input.metadata, false] as const,
    mint: [input.mint, false] as const,
    burner: [input.burner, false] as const,
    rent: [input.rent, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Use Authority Record.
  keys.push({
    pubkey: publicKey(resolvedAccounts.useAuthorityRecord[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.useAuthorityRecord[1],
  });

  // Owner.
  signers.push(resolvedAccounts.owner[0]);
  keys.push({
    pubkey: resolvedAccounts.owner[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.owner[1],
  });

  // Payer.
  signers.push(resolvedAccounts.payer[0]);
  keys.push({
    pubkey: resolvedAccounts.payer[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.payer[1],
  });

  // User.
  keys.push({
    pubkey: publicKey(resolvedAccounts.user[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.user[1],
  });

  // Owner Token Account.
  keys.push({
    pubkey: publicKey(resolvedAccounts.ownerTokenAccount[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.ownerTokenAccount[1],
  });

  // Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.metadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.metadata[1],
  });

  // Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.mint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.mint[1],
  });

  // Burner.
  keys.push({
    pubkey: publicKey(resolvedAccounts.burner[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.burner[1],
  });

  // Token Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenProgram[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Rent (optional).
  if (resolvedAccounts.rent[0]) {
    keys.push({
      pubkey: publicKey(resolvedAccounts.rent[0], false),
      isSigner: false,
      isWritable: resolvedAccounts.rent[1],
    });
  }

  // Data.
  const data =
    getApproveUseAuthorityInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
