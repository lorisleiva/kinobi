/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty } from '../shared';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataSerializer,
} from '../types';

// Accounts.
export type InitializeInstructionAccounts = {
  candyMachine: PublicKey | Pda;
  authorityPda: PublicKey | Pda;
  authority?: PublicKey | Pda;
  payer?: Signer;
  collectionMetadata: PublicKey | Pda;
  collectionMint: PublicKey | Pda;
  collectionMasterEdition: PublicKey | Pda;
  collectionUpdateAuthority: Signer;
  collectionAuthorityRecord: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitializeInstructionData = {
  discriminator: Array<number>;
  data: CandyMachineData;
};

export type InitializeInstructionDataArgs = { data: CandyMachineDataArgs };

export function getInitializeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitializeInstructionDataArgs, InitializeInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    InitializeInstructionDataArgs,
    any,
    InitializeInstructionData
  >(
    s.struct<InitializeInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['data', getCandyMachineDataSerializer(context)],
      ],
      { description: 'InitializeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
    })
  ) as Serializer<InitializeInstructionDataArgs, InitializeInstructionData>;
}

// Args.
export type InitializeInstructionArgs = InitializeInstructionDataArgs;

// Instruction.
export function initialize(
  context: Pick<Context, 'serializer' | 'programs' | 'identity' | 'payer'>,
  input: InitializeInstructionAccounts & InitializeInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    authorityPda: [input.authorityPda, true] as const,
    collectionMetadata: [input.collectionMetadata, false] as const,
    collectionMint: [input.collectionMint, false] as const,
    collectionMasterEdition: [input.collectionMasterEdition, false] as const,
    collectionUpdateAuthority: [input.collectionUpdateAuthority, true] as const,
    collectionAuthorityRecord: [input.collectionAuthorityRecord, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity.publicKey, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, false] as const)
      : ([context.payer, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Candy Machine.
  keys.push({
    pubkey: publicKey(resolvedAccounts.candyMachine[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.candyMachine[1],
  });

  // Authority Pda.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authorityPda[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authorityPda[1],
  });

  // Authority.
  keys.push({
    pubkey: publicKey(resolvedAccounts.authority[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.authority[1],
  });

  // Payer.
  signers.push(resolvedAccounts.payer[0]);
  keys.push({
    pubkey: resolvedAccounts.payer[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.payer[1],
  });

  // Collection Metadata.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMetadata[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMetadata[1],
  });

  // Collection Mint.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMint[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMint[1],
  });

  // Collection Master Edition.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionMasterEdition[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionMasterEdition[1],
  });

  // Collection Update Authority.
  signers.push(resolvedAccounts.collectionUpdateAuthority[0]);
  keys.push({
    pubkey: resolvedAccounts.collectionUpdateAuthority[0].publicKey,
    isSigner: true,
    isWritable: resolvedAccounts.collectionUpdateAuthority[1],
  });

  // Collection Authority Record.
  keys.push({
    pubkey: publicKey(resolvedAccounts.collectionAuthorityRecord[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.collectionAuthorityRecord[1],
  });

  // Token Metadata Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.tokenMetadataProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.tokenMetadataProgram[1],
  });

  // System Program.
  keys.push({
    pubkey: publicKey(resolvedAccounts.systemProgram[0], false),
    isSigner: false,
    isWritable: resolvedAccounts.systemProgram[1],
  });

  // Data.
  const data =
    getInitializeInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
