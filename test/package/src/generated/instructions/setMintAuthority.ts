/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi-core';

// Accounts.
export type SetMintAuthorityInstructionAccounts = {
  candyMachine: PublicKey;
  authority?: Signer;
  mintAuthority: Signer;
};

// Arguments.
export type SetMintAuthorityInstructionData = { discriminator: Array<number> };

export type SetMintAuthorityInstructionArgs = {};

export function getSetMintAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetMintAuthorityInstructionArgs,
  SetMintAuthorityInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetMintAuthorityInstructionArgs,
    SetMintAuthorityInstructionData,
    SetMintAuthorityInstructionData
  >(
    s.struct<SetMintAuthorityInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'SetMintAuthorityInstructionArgs' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [67, 127, 155, 187, 100, 174, 103, 121],
      } as SetMintAuthorityInstructionData)
  ) as Serializer<
    SetMintAuthorityInstructionArgs,
    SetMintAuthorityInstructionData
  >;
}

// Instruction.
export function setMintAuthority(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: SetMintAuthorityInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get(
    'mplCandyMachineCore'
  ).publicKey;

  // Resolved accounts.
  const candyMachineAccount = input.candyMachine;
  const authorityAccount = input.authority ?? context.identity;
  const mintAuthorityAccount = input.mintAuthority;

  // Candy Machine.
  keys.push({
    pubkey: candyMachineAccount,
    isSigner: false,
    isWritable: isWritable(candyMachineAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, false),
  });

  // Mint Authority.
  signers.push(mintAuthorityAccount);
  keys.push({
    pubkey: mintAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(mintAuthorityAccount, false),
  });

  // Data.
  const data = getSetMintAuthorityInstructionDataSerializer(context).serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
