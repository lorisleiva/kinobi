/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetMintAuthorityInstructionAccounts = {
  candyMachine: PublicKey | Pda;
  authority?: Signer;
  mintAuthority: Signer;
};

// Data.
export type SetMintAuthorityInstructionData = { discriminator: Array<number> };

export type SetMintAuthorityInstructionDataArgs = {};

export function getSetMintAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetMintAuthorityInstructionDataArgs,
  SetMintAuthorityInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetMintAuthorityInstructionDataArgs,
    any,
    SetMintAuthorityInstructionData
  >(
    s.struct<SetMintAuthorityInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'SetMintAuthorityInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [67, 127, 155, 187, 100, 174, 103, 121],
    })
  ) as Serializer<
    SetMintAuthorityInstructionDataArgs,
    SetMintAuthorityInstructionData
  >;
}

// Instruction.
export function setMintAuthority(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: SetMintAuthorityInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    mintAuthority: [input.mintAuthority, false] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.mintAuthority, false);

  // Data.
  const data = getSetMintAuthorityInstructionDataSerializer(context).serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
