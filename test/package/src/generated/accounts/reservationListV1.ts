/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  ReservationListV1AccountData,
  getReservationListV1AccountDataSerializer,
} from '../../hooked';
import {
  ReservationV1Args,
  TmKey,
  TmKeyArgs,
  getReservationV1Serializer,
  getTmKeySerializer,
} from '../types';

export type ReservationListV1 = Account<ReservationListV1AccountData>;

export function deserializeReservationListV1(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): ReservationListV1 {
  return deserializeAccount(
    rawAccount,
    getReservationListV1AccountDataSerializer(context)
  );
}

export async function fetchReservationListV1(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReservationListV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey),
    options
  );
  assertAccountExists(maybeAccount, 'ReservationListV1');
  return deserializeReservationListV1(context, maybeAccount);
}

export async function safeFetchReservationListV1(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<ReservationListV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey),
    options
  );
  return maybeAccount.exists
    ? deserializeReservationListV1(context, maybeAccount)
    : null;
}

export async function fetchAllReservationListV1(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map(toPublicKey),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ReservationListV1');
    return deserializeReservationListV1(context, maybeAccount);
  });
}

export async function safeFetchAllReservationListV1(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map(toPublicKey),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeReservationListV1(context, maybeAccount as RpcAccount)
    );
}

export function getReservationListV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: TmKeyArgs;
      masterEdition: PublicKey;
      supplySnapshot: Option<number | bigint>;
      reservations: Array<ReservationV1Args>;
    }>({
      key: [0, getTmKeySerializer(context)],
      masterEdition: [1, s.publicKey()],
      supplySnapshot: [33, s.option(s.u64())],
      reservations: [null, s.array(getReservationV1Serializer(context))],
    })
    .deserializeUsing<ReservationListV1>((account) =>
      deserializeReservationListV1(context, account)
    )
    .whereField('key', TmKey.ReservationListV1);
}
