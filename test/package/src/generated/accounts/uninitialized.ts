/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';

export type Uninitialized = Account<UninitializedAccountData>;

export type UninitializedAccountData = { discriminator: number };

export type UninitializedAccountDataArgs = {};

export function getUninitializedAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<UninitializedAccountDataArgs, UninitializedAccountData> {
  const s = context.serializer;
  return mapSerializer<
    UninitializedAccountDataArgs,
    any,
    UninitializedAccountData
  >(
    s.struct<UninitializedAccountData>([['discriminator', s.u32()]], {
      description: 'UninitializedAccountData',
    }),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<UninitializedAccountDataArgs, UninitializedAccountData>;
}

export function deserializeUninitialized(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Uninitialized {
  return deserializeAccount(
    rawAccount,
    getUninitializedAccountDataSerializer(context)
  );
}

export async function fetchUninitialized(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Uninitialized> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Uninitialized');
  return deserializeUninitialized(context, maybeAccount);
}

export async function safeFetchUninitialized(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Uninitialized | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeUninitialized(context, maybeAccount)
    : null;
}

export async function fetchAllUninitialized(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Uninitialized[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Uninitialized');
    return deserializeUninitialized(context, maybeAccount);
  });
}

export async function safeFetchAllUninitialized(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Uninitialized[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeUninitialized(context, maybeAccount as RpcAccount)
    );
}

export function getUninitializedGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'bpfUpgradeableLoader',
    'BPFLoaderUpgradeab1e11111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ discriminator: number }>({ discriminator: [0, s.u32()] })
    .deserializeUsing<Uninitialized>((account) =>
      deserializeUninitialized(context, account)
    )
    .whereField('discriminator', 0);
}

export function getUninitializedSize(): number {
  return 4;
}
