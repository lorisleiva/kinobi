/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';

export type Buffer = Account<BufferAccountData>;

export type BufferAccountData = {
  discriminator: number;
  authorityAddress: Option<PublicKey>;
  data: Uint8Array;
};

export type BufferAccountDataArgs = {
  authorityAddress: Option<PublicKey>;
  data: Uint8Array;
};

export function getBufferAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BufferAccountDataArgs, BufferAccountData> {
  const s = context.serializer;
  return mapSerializer<BufferAccountDataArgs, any, BufferAccountData>(
    s.struct<BufferAccountData>(
      [
        ['discriminator', s.u32()],
        ['authorityAddress', s.option(s.publicKey())],
        ['data', s.bytes()],
      ],
      { description: 'BufferAccountData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<BufferAccountDataArgs, BufferAccountData>;
}

export function deserializeBuffer(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Buffer {
  return deserializeAccount(
    rawAccount,
    getBufferAccountDataSerializer(context)
  );
}

export async function fetchBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Buffer> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Buffer');
  return deserializeBuffer(context, maybeAccount);
}

export async function safeFetchBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Buffer | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeBuffer(context, maybeAccount) : null;
}

export async function fetchAllBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Buffer[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Buffer');
    return deserializeBuffer(context, maybeAccount);
  });
}

export async function safeFetchAllBuffer(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Buffer[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeBuffer(context, maybeAccount as RpcAccount)
    );
}

export function getBufferGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'bpfUpgradeableLoader',
    'BPFLoaderUpgradeab1e11111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: number;
      authorityAddress: Option<PublicKey>;
      data: Uint8Array;
    }>({
      discriminator: [0, s.u32()],
      authorityAddress: [4, s.option(s.publicKey())],
      data: [null, s.bytes()],
    })
    .deserializeUsing<Buffer>((account) => deserializeBuffer(context, account))
    .whereField('discriminator', 1);
}
