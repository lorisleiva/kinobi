/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';

export type Program = Account<ProgramAccountData>;

export type ProgramAccountData = {
  discriminator: number;
  programDataAddress: PublicKey;
};

export type ProgramAccountDataArgs = { programDataAddress: PublicKey };

export function getProgramAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<ProgramAccountDataArgs, ProgramAccountData> {
  const s = context.serializer;
  return mapSerializer<ProgramAccountDataArgs, any, ProgramAccountData>(
    s.struct<ProgramAccountData>(
      [
        ['discriminator', s.u32()],
        ['programDataAddress', s.publicKey()],
      ],
      { description: 'ProgramAccountData' }
    ),
    (value) => ({ ...value, discriminator: 2 })
  ) as Serializer<ProgramAccountDataArgs, ProgramAccountData>;
}

export function deserializeProgram(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Program {
  return deserializeAccount(
    rawAccount,
    getProgramAccountDataSerializer(context)
  );
}

export async function fetchProgram(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Program> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Program');
  return deserializeProgram(context, maybeAccount);
}

export async function safeFetchProgram(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Program | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeProgram(context, maybeAccount) : null;
}

export async function fetchAllProgram(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Program[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Program');
    return deserializeProgram(context, maybeAccount);
  });
}

export async function safeFetchAllProgram(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Program[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeProgram(context, maybeAccount as RpcAccount)
    );
}

export function getProgramGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'bpfUpgradeableLoader',
    'BPFLoaderUpgradeab1e11111111111111111111111'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ discriminator: number; programDataAddress: PublicKey }>({
      discriminator: [0, s.u32()],
      programDataAddress: [4, s.publicKey()],
    })
    .deserializeUsing<Program>((account) =>
      deserializeProgram(context, account)
    )
    .whereField('discriminator', 2);
}

export function getProgramSize(): number {
  return 36;
}
