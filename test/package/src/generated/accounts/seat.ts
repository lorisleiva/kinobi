/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';

export type Seat = Account<SeatAccountData>;

export type SeatAccountData = {
  discriminator: Array<number>;
  market: PublicKey;
  trader: PublicKey;
  approvalStatus: bigint;
  padding: Array<bigint>;
};

export type SeatAccountDataArgs = {
  market: PublicKey;
  trader: PublicKey;
  approvalStatus: number | bigint;
  padding: Array<number | bigint>;
};

export function getSeatAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<SeatAccountDataArgs, SeatAccountData> {
  const s = context.serializer;
  return mapSerializer<SeatAccountDataArgs, any, SeatAccountData>(
    s.struct<SeatAccountData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['market', s.publicKey()],
        ['trader', s.publicKey()],
        ['approvalStatus', s.u64()],
        ['padding', s.array(s.u64(), { size: 6 })],
      ],
      { description: 'SeatAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [136, 183, 66, 31, 71, 173, 202, 27],
    })
  ) as Serializer<SeatAccountDataArgs, SeatAccountData>;
}

export function deserializeSeat(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Seat {
  return deserializeAccount(rawAccount, getSeatAccountDataSerializer(context));
}

export async function fetchSeat(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Seat> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Seat');
  return deserializeSeat(context, maybeAccount);
}

export async function safeFetchSeat(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Seat | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeSeat(context, maybeAccount) : null;
}

export async function fetchAllSeat(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Seat[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Seat');
    return deserializeSeat(context, maybeAccount);
  });
}

export async function safeFetchAllSeat(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Seat[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeSeat(context, maybeAccount as RpcAccount)
    );
}

export function getSeatGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'phoenixV1',
    'PhoeNiXZ8ByJGLkxNfZRnkUfjvmuYqLR89jjFHGqdXY'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      market: PublicKey;
      trader: PublicKey;
      approvalStatus: number | bigint;
      padding: Array<number | bigint>;
    }>({
      discriminator: [0, s.array(s.u8(), { size: 8 })],
      market: [8, s.publicKey()],
      trader: [40, s.publicKey()],
      approvalStatus: [72, s.u64()],
      padding: [80, s.array(s.u64(), { size: 6 })],
    })
    .deserializeUsing<Seat>((account) => deserializeSeat(context, account))
    .whereField('discriminator', [136, 183, 66, 31, 71, 173, 202, 27]);
}

export function getSeatSize(): number {
  return 128;
}
