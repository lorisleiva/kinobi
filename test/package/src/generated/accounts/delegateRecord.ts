/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi-core';
import {
  DelegateRole,
  TmKey,
  getDelegateRoleSerializer,
  getTmKeySerializer,
} from '../types';

export type DelegateRecord = Account<DelegateRecordAccountData>;

export type DelegateRecordAccountData = {
  key: TmKey;
  role: DelegateRole;
  bump: number;
};

export type DelegateRecordAccountArgs = { role: DelegateRole; bump: number };

export async function fetchDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<DelegateRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'DelegateRecord');
  return deserializeDelegateRecord(context, maybeAccount);
}

export async function safeFetchDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<DelegateRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeDelegateRecord(context, maybeAccount)
    : null;
}

export async function fetchAllDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<DelegateRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'DelegateRecord');
    return deserializeDelegateRecord(context, maybeAccount);
  });
}

export async function safeFetchAllDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<DelegateRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeDelegateRecord(context, maybeAccount as RpcAccount)
    );
}

export function getDelegateRecordGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.get('mplTokenMetadata').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{ key: TmKey; role: DelegateRole; bump: number }>([
      ['key', getTmKeySerializer(context)],
      ['role', getDelegateRoleSerializer(context)],
      ['bump', s.u8()],
    ])
    .deserializeUsing<DelegateRecord>((account) =>
      deserializeDelegateRecord(context, account)
    )
    .whereField('key', TmKey.Delegate);
}

export function deserializeDelegateRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): DelegateRecord {
  return deserializeAccount(
    rawAccount,
    getDelegateRecordAccountDataSerializer(context)
  );
}

export function getDelegateRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DelegateRecordAccountArgs, DelegateRecordAccountData> {
  const s = context.serializer;
  return mapSerializer<
    DelegateRecordAccountArgs,
    DelegateRecordAccountData,
    DelegateRecordAccountData
  >(
    s.struct<DelegateRecordAccountData>(
      [
        ['key', getTmKeySerializer(context)],
        ['role', getDelegateRoleSerializer(context)],
        ['bump', s.u8()],
      ],
      { description: 'DelegateRecord' }
    ),
    (value) => ({ ...value, key: TmKey.Delegate } as DelegateRecordAccountData)
  ) as Serializer<DelegateRecordAccountArgs, DelegateRecordAccountData>;
}

export function getDelegateRecordSize(_context = {}): number {
  return 3;
}
