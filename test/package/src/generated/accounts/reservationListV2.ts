/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  Reservation,
  ReservationArgs,
  TmKey,
  TmKeyArgs,
  getReservationSerializer,
  getTmKeySerializer,
} from '../types';

export type ReservationListV2 = Account<ReservationListV2AccountData>;

export type ReservationListV2AccountData = {
  key: TmKey;
  masterEdition: PublicKey;
  supplySnapshot: Option<bigint>;
  reservations: Array<Reservation>;
  totalReservationSpots: bigint;
  currentReservationSpots: bigint;
};

export type ReservationListV2AccountDataArgs = {
  masterEdition: PublicKey;
  supplySnapshot: Option<number | bigint>;
  reservations: Array<ReservationArgs>;
  totalReservationSpots: number | bigint;
  currentReservationSpots: number | bigint;
};

export function getReservationListV2AccountDataSerializer(
  _context: object = {}
): Serializer<ReservationListV2AccountDataArgs, ReservationListV2AccountData> {
  return mapSerializer<
    ReservationListV2AccountDataArgs,
    any,
    ReservationListV2AccountData
  >(
    struct<ReservationListV2AccountData>(
      [
        ['key', getTmKeySerializer()],
        ['masterEdition', publicKeySerializer()],
        ['supplySnapshot', option(u64())],
        ['reservations', array(getReservationSerializer())],
        ['totalReservationSpots', u64()],
        ['currentReservationSpots', u64()],
      ],
      { description: 'ReservationListV2AccountData' }
    ),
    (value) => ({ ...value, key: TmKey.ReservationListV2 })
  ) as Serializer<
    ReservationListV2AccountDataArgs,
    ReservationListV2AccountData
  >;
}

export function deserializeReservationListV2(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): ReservationListV2 {
  return deserializeAccount(
    rawAccount,
    getReservationListV2AccountDataSerializer(context)
  );
}

export async function fetchReservationListV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReservationListV2> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ReservationListV2');
  return deserializeReservationListV2(context, maybeAccount);
}

export async function safeFetchReservationListV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReservationListV2 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeReservationListV2(context, maybeAccount)
    : null;
}

export async function fetchAllReservationListV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ReservationListV2');
    return deserializeReservationListV2(context, maybeAccount);
  });
}

export async function safeFetchAllReservationListV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV2[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeReservationListV2(context, maybeAccount as RpcAccount)
    );
}

export function getReservationListV2GpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: TmKeyArgs;
      masterEdition: PublicKey;
      supplySnapshot: Option<number | bigint>;
      reservations: Array<ReservationArgs>;
      totalReservationSpots: number | bigint;
      currentReservationSpots: number | bigint;
    }>({
      key: [0, getTmKeySerializer()],
      masterEdition: [1, publicKeySerializer()],
      supplySnapshot: [33, option(u64())],
      reservations: [null, array(getReservationSerializer())],
      totalReservationSpots: [null, u64()],
      currentReservationSpots: [null, u64()],
    })
    .deserializeUsing<ReservationListV2>((account) =>
      deserializeReservationListV2(context, account)
    )
    .whereField('key', TmKey.ReservationListV2);
}
