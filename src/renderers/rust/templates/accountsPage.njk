{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

{{ macros.docblock(account.docs) }}
{{ typeManifest.type }}

{% for nestedStruct in typeManifest.nestedStructs %}
{{ nestedStruct }}
{% endfor %}

{% if account.size !== undefined or seeds.length > 0 %}
impl {{ account.name | pascalCase }} {
  {% if account.size !== undefined %}
    pub const LEN: usize = {{ account.size }};
  {% endif %}

  {% if seeds.length > 0 %}
    pub fn find_pda(
    {% if hasVariableSeeds %}
        {% for seed in seeds %}
          {% if seed.kind == 'variable' and seed.type.kind == 'publicKeyTypeNode' %}
            {{ seed.name | snakeCase }}: &{{ seed.typeManifest.type }},
          {% elif seed.kind === 'variable' %}
            {{ seed.name | snakeCase }}: {{ seed.typeManifest.type }},
          {% endif %}
        {% endfor %}
    {% endif %}
    ) -> (solana_program::pubkey::Pubkey, u8) {
      solana_program::pubkey::Pubkey::find_program_address(
        &[
          {% for seed in seeds %}
            {% if seed.kind === 'programId' %}
              crate::{{ program.name | snakeCase | upper }}_ID.as_ref(),
            {% elif seed.kind === 'constant' %}
              {{ seed.value.render }}.as_bytes(),
            {% elif seed.kind == 'variable' and seed.type.kind == 'publicKeyTypeNode' %}
              {{ seed.name | snakeCase }}.as_ref(),
            {% else %}
              {{ seed.name | snakeCase }}.to_string().as_ref(),
            {% endif %}
          {% endfor %}
        ],
        &crate::{{ program.name | snakeCase | upper }}_ID,
      )
    }
    pub fn create_pda(
      {% if hasVariableSeeds %}
          {% for seed in seeds %}
            {% if seed.kind === 'variable' %}
              {{ seed.name | snakeCase }}: {{ seed.typeManifest.type }},
            {% endif %}
          {% endfor %}
      {% endif %}
      bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
      solana_program::pubkey::Pubkey::create_program_address(
        &[
          {% for seed in seeds %}
            {% if seed.kind === 'programId' %}
              crate::{{ program.name | snakeCase | upper }}_ID.as_ref(),
            {% elif seed.kind === 'constant' %}
              {{ seed.value.render }}.as_bytes(),
            {% elif seed.kind == 'variable' and seed.type.kind == 'publicKeyTypeNode' %}
              {{ seed.name | snakeCase }}.as_ref(),
            {% else %}
              {{ seed.name | snakeCase }}.to_string().as_ref(),
            {% endif %}
          {% endfor %}
          &[bump],
        ],
        &crate::{{ program.name | snakeCase | upper }}_ID,
      )
    }
  {% endif %}
}
{% endif %}
{% endblock %}
