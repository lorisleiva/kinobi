/// `{{ instruction.name | snakeCase }}` CPI instruction builder.
pub struct {{ instruction.name | pascalCase }}CpiBuilder<'a> {
  instruction: Box<{{ instruction.name | pascalCase }}CpiBuilderInstruction<'a>>,
}

impl<'a> {{ instruction.name | pascalCase }}CpiBuilder<'a> {
  pub fn new(program: &'a solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new({{ instruction.name | pascalCase }}CpiBuilderInstruction {
      __program: program,
      {% for account in instruction.accounts %}
        {{ account.name | snakeCase }}: None,
      {% endfor %}
      {% for arg in instructionArgs %}
        {% if not arg.default %}
          {{ arg.name | snakeCase }}: None,
        {% endif %}
      {% endfor %}
    });
    Self { instruction }
  }
  {% for account in instruction.accounts %}
    pub fn {{ account.name | snakeCase }}(&mut self, {{ account.name | snakeCase }}: &'a solana_program::account_info::AccountInfo<'a>{{ ', as_signer: bool' if account.isSigner === 'either' }}) -> &mut Self {
      {% if account.isSigner === 'either' %}
        self.instruction.{{ account.name | snakeCase }} = Some(({{ account.name | snakeCase }}, as_signer));
      {% else %}
        self.instruction.{{ account.name | snakeCase }} = Some({{ account.name | snakeCase }});
      {% endif %}
      self
    }
  {% endfor %}
  {% for arg in instructionArgs %}
    {% if not arg.default %}
      pub fn {{ arg.name | snakeCase }}(&mut self, {{ arg.name | snakeCase }}: {{ arg.innerOptionType or arg.type }}) -> &mut Self {
        self.instruction.{{ arg.name | snakeCase }} = Some({{ arg.name | snakeCase }});
        self
      }
    {% endif %}
  {% endfor %}
  #[allow(clippy::clone_on_copy)]
  pub fn build(&self) -> {{ instruction.name | pascalCase }}Cpi<'a> {
    {% if hasArgs %}
      let {{ 'mut' if hasOptional }} args = {{ instruction.name | pascalCase }}InstructionArgs::new(
        {% for arg in instructionArgs %}
          {% if not arg.default and not arg.optional %}
            self.instruction.{{ arg.name | snakeCase }}.clone(){{ '.expect(\"' + arg.name | snakeCase + ' is not set\")' if not arg.innerOptionType }},
          {% endif %}
        {% endfor %}
      );
      {% for arg in instructionArgs %}
        {% if arg.optional %}
          {% if arg.innerOptionType %}
            args.{{ arg.name | snakeCase }} = self.instruction.{{ arg.name | snakeCase }}.clone();
          {% else %}
            if let Some({{ arg.name | snakeCase }}) = &self.instruction.{{ arg.name | snakeCase }} {
              args.{{ arg.name | snakeCase }} = {{ arg.name | snakeCase }}.clone();
            }
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    {{ instruction.name | pascalCase }}Cpi {
        __program: self.instruction.__program,
        {% for account in instruction.accounts %}          
          {{ account.name | snakeCase }}: self.instruction.{{ account.name | snakeCase }}{{ '.expect(\"' + account.name | snakeCase + ' is not set\")' if not account.isOptional }},
        {% endfor %}
        {% if hasArgs %}
          __args: args,
        {% endif %}
    }
  }
}

struct {{ instruction.name | pascalCase }}CpiBuilderInstruction<'a> {
  __program: &'a solana_program::account_info::AccountInfo<'a>,
{% for account in instruction.accounts %}
  {% if account.isSigner === 'either' %}
    {{ account.name | snakeCase }}: Option<(&'a solana_program::account_info::AccountInfo<'a>, bool)>,
  {% else %}
    {{ account.name | snakeCase }}: Option<&'a solana_program::account_info::AccountInfo<'a>>,
  {% endif %}
{% endfor %}
{% for arg in instructionArgs %}
  {% if not arg.default %}
    {{ arg.name | snakeCase }}: {{ arg.type if arg.innerOptionType else 'Option<' + arg.type + '>' }},
  {% endif %}
{% endfor %}
}