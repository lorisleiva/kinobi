/// Instruction builder.
#[derive(Default)]
pub struct {{ instruction.name | pascalCase }}Builder {
  {% for account in instruction.accounts %}
    {% if account.isSigner === 'either' %}
      {{ account.name | snakeCase }}: Option<(solana_program::pubkey::Pubkey, bool)>,
    {% else %}
      {{ account.name | snakeCase }}: Option<solana_program::pubkey::Pubkey>,
    {% endif %}
  {% endfor %}
  {% for arg in instructionArgs %}
    {% if not arg.default %}
      {{ arg.name | snakeCase }}: {{ arg.type if arg.innerOptionType else 'Option<' + arg.type + '>' }},
    {% endif %}
  {% endfor %}
  __remaining_accounts: Vec<(solana_program::pubkey::Pubkey, super::AccountType)>,
}

impl {{ instruction.name | pascalCase }}Builder {
  pub fn new() -> Self {
    Self::default()
  }
  {% for account in instruction.accounts %}
    {{'/// `[optional account]`\n' if account.isOptional }}
    {{- macros.docblock(account.docs) -}}
    #[inline(always)]
    pub fn {{ account.name | snakeCase }}(&mut self, {{ account.name | snakeCase }}: solana_program::pubkey::Pubkey{{ ', as_signer: bool' if account.isSigner === 'either' }}) -> &mut Self {
      {% if account.isSigner === 'either' %}
        self.{{ account.name | snakeCase }} = Some(({{ account.name | snakeCase }}, as_signer));
      {% else %}
        self.{{ account.name | snakeCase }} = Some({{ account.name | snakeCase }});
      {% endif %}
      self
    }
  {% endfor %}
  {% for arg in instructionArgs %}
    {% if not arg.default %}
      {{ '/// `[optional argument]`\n' if arg.innerOptionType }}
      {{- "/// `[optional argument, defaults to '" + arg.value + "']`\n" if not arg.innerOptionType and arg.value -}}
      {{- macros.docblock(arg.docs) -}}
      #[inline(always)]
      pub fn {{ arg.name | snakeCase }}(&mut self, {{ arg.name | snakeCase }}: {{ arg.innerOptionType or arg.type }}) -> &mut Self {
        self.{{ arg.name | snakeCase }} = Some({{ arg.name | snakeCase }});
        self
      }
    {% endif %}
  {% endfor %}
  #[inline(always)]
  pub fn remaining_account(&mut self, account: solana_program::pubkey::Pubkey, as_type: super::AccountType) -> &mut Self {
    self.__remaining_accounts.push((account, as_type));
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn build(&self) -> solana_program::instruction::Instruction {
    let accounts = {{ instruction.name | pascalCase }} {
        {% for account in instruction.accounts %}
          {% if account.isOptional %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }},
          {% elif account.defaultsTo.kind === 'programId' %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}, {# Program ID set on the instruction creation. #}
          {% elif account.defaultsTo.kind === 'program' %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}.unwrap_or(solana_program::pubkey!("{{ account.defaultsTo.program.publicKey }}")),
          {% elif account.defaultsTo.kind === 'publicKey' %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}.unwrap_or(solana_program::pubkey!("{{ account.defaultsTo.publicKey }}")),
          {% else %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}.expect("{{ account.name | snakeCase }} is not set"),
          {% endif %}
        {% endfor %}
        __remaining_accounts: self.__remaining_accounts.clone(),
    };
    {% if hasArgs %}
      let args = {{ instruction.name | pascalCase }}InstructionArgs {
        {% for arg in instructionArgs %}
          {% if not arg.default %}
            {% if arg.optional %}
              {% if arg.innerOptionType %}
                {{ arg.name | snakeCase }}: self.{{ arg.name | snakeCase }}.clone(),
              {% else %}
                {{ arg.name | snakeCase }}: self.{{ arg.name | snakeCase }}.clone(){{ '.unwrap_or(' + arg.value + ')' if arg.value else '.expect(\"' + arg.name | snakeCase + ' is not set\")' }},
              {% endif %}
            {% else %}
              {{ arg.name | snakeCase }}: self.{{ arg.name | snakeCase }}.clone(){{ '.expect(\"' + arg.name | snakeCase + ' is not set\")' if not arg.innerOptionType }},
            {% endif %}
          {% endif %}
        {% endfor %}
      };
    {% endif %}

    accounts.instruction({{ 'args' if hasArgs }})
  }
}
