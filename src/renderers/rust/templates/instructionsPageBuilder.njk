/// Instruction builder.
#[derive(Default)]
pub struct {{ instruction.name | pascalCase }}Builder {
{% for account in instruction.accounts %}
  {% if account.isSigner === 'either' %}
    {{ account.name | snakeCase }}: Option<(solana_program::pubkey::Pubkey, bool)>,
  {% else %}
    {{ account.name | snakeCase }}: Option<solana_program::pubkey::Pubkey>,
  {% endif %}
{% endfor %}
{% for arg in instructionArgs %}
  {% if not arg.default %}
    {{ arg.name | snakeCase }}: {{ arg.type if arg.innerOptionType else 'Option<' + arg.type + '>' }},
  {% endif %}
{% endfor %}
}

impl {{ instruction.name | pascalCase }}Builder {
  pub fn new() -> Self {
    Self::default()
  }
  {% for account in instruction.accounts %}
    pub fn {{ account.name | snakeCase }}(&mut self, {{ account.name | snakeCase }}: solana_program::pubkey::Pubkey{{ ', as_signer: bool' if account.isSigner === 'either' }}) -> &mut Self {
      {% if account.isSigner === 'either' %}
        self.{{ account.name | snakeCase }} = Some(({{ account.name | snakeCase }}, as_signer));
      {% else %}
        self.{{ account.name | snakeCase }} = Some({{ account.name | snakeCase }});
      {% endif %}
      self
    }
  {% endfor %}
  {% for arg in instructionArgs %}
    {% if not arg.default %}
      pub fn {{ arg.name | snakeCase }}(&mut self, {{ arg.name | snakeCase }}: {{ arg.innerOptionType or arg.type }}) -> &mut Self {
        self.{{ arg.name | snakeCase }} = Some({{ arg.name | snakeCase }});
        self
      }
    {% endif %}
  {% endfor %}
  #[allow(clippy::clone_on_copy)]
  pub fn build(&self) -> solana_program::instruction::Instruction {
    let accounts = {{ instruction.name | pascalCase }} {
        {% for account in instruction.accounts %}
          {% if account.defaultsTo.kind === 'programId' %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}, {# Program ID set on the instruction creation. #}
          {% elif account.defaultsTo.kind === 'program' %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}.unwrap_or(solana_program::pubkey!("{{ account.defaultsTo.program.publicKey }}")),
          {% elif account.defaultsTo.kind === 'publicKey' %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}.unwrap_or(solana_program::pubkey!("{{ account.defaultsTo.publicKey }}")),
          {% elif account.isOptional %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }},
          {% else %}
            {{ account.name | snakeCase }}: self.{{ account.name | snakeCase }}.expect("{{ account.name | snakeCase }} is not set"),
          {% endif %}
        {% endfor %}
    };
    {% if hasArgs %}
      let {{ 'mut' if hasOptional }} args = {{ instruction.name | pascalCase }}InstructionArgs::new(
        {% for arg in instructionArgs %}
          {% if not arg.default and not arg.optional %}
            self.{{ arg.name | snakeCase }}.clone(){{ '.expect(\"' + arg.name | snakeCase + ' is not set\")' if not arg.innerOptionType }},
          {% endif %}
        {% endfor %}
      );
      {% for arg in instructionArgs %}
        {% if arg.optional %}
          {% if arg.innerOptionType %}
            args.{{ arg.name | snakeCase }} = self.{{ arg.name | snakeCase }}.clone();
          {% else %}
            if let Some({{ arg.name | snakeCase }}) = &self.{{ arg.name | snakeCase }} {
              args.{{ arg.name | snakeCase }} = {{ arg.name | snakeCase }}.clone();
            }
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}

    accounts.instruction({{ 'args' if hasArgs }})
  }
}
