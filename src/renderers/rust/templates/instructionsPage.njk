{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

/// Accounts.
pub struct {{ instruction.name | pascalCase }} {
{% for account in instruction.accounts %}
  {% if account.docs.length > 0 %}
    {{ macros.docblock(account.docs) }}
  {% endif %}
  {% if account.isOptional %}
    pub {{ account.name | snakeCase }}: Option<solana_program::pubkey::Pubkey>,
  {% else %}
    pub {{ account.name | snakeCase }}: solana_program::pubkey::Pubkey,
  {% endif %}
{% endfor %}
}

{% set signer = '' %}
{% for account in instruction.accounts %}
  {% if account.isSigner === 'either' %}
    {% set signer = signer +  ', ' + account.name | snakeCase + '_as_signer: bool' %}
  {% endif %}
{% endfor %}

impl {{ instruction.name | pascalCase }} {
  pub fn instruction(&self{{ signer }}) -> solana_program::instruction::Instruction {
    {% if hasDataArgs %}
    let data = {{ instruction.dataArgs.name | pascalCase }}(resolvedArgs).try_to_vec().unwrap();
    {% elif hasData %}
    let data = {{ instruction.dataArgs.name | pascalCase }}.try_to_vec().unwrap();
    {% else %}
    let data = Vec::new();
    {% endif %}
    solana_program::instruction::Instruction {
      program_id: crate::programs::{{ program.name | snakeCase }}::ID,
      accounts: vec![
        {% for account in instruction.accounts %}
          {% if account.isSigner === 'either' %}
            {% set signer = account.name | snakeCase + '_as_signer' %}
          {% else %}
            {% set signer = 'true' if account.isSigner else 'false' %}
          {% endif %}
          solana_program::instruction::AccountMeta::{{ 'new' if account.isWritable else 'new_readonly' }}(
            self.{{ account.name | snakeCase }}{{ '.unwrap_or(crate::ID)' if account.isOptional }},
            {{ signer }}
          ),
        {% endfor %}
      ],
      data,
    }
  }
}

{% include "instructionsPageBuilder.njk" %}

{% endblock %}
