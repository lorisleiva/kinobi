{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

/// Accounts.
pub struct {{ instruction.name | pascalCase }} {
{% for account in instruction.accounts %}
  {% if account.docs.length > 0 %}
    {{ macros.docblock(account.docs) }}
  {% endif %}

  {% if account.isSigner === 'either' %}
    {% set type = '(solana_program::pubkey::Pubkey, bool)' %}
  {% else %}
    {% set type = 'solana_program::pubkey::Pubkey' %}
  {% endif %}

  {% if account.isOptional %}
    pub {{ account.name | snakeCase }}: Option<{{ type }}>,
  {% else %}
    pub {{ account.name | snakeCase }}: {{ type }},
  {% endif %}
{% endfor %}
}

impl {{ instruction.name | pascalCase }} {
  pub fn instruction(&self{{ ', args: ' + instruction.name | pascalCase + 'InstructionArgs' if hasArgs }}) -> solana_program::instruction::Instruction {
    {% if hasArgs === false %}
    let args = {{ instruction.name | pascalCase }}InstructionArgs::new();
    {% endif %}
    solana_program::instruction::Instruction {
      program_id: crate::programs::{{ program.name | snakeCase }}::ID,
      accounts: vec![
        {% for account in instruction.accounts %}
          {% if account.isSigner === 'either' %}
            {% if account.isOptional %}
              if let Some(({{ account.name | snakeCase }}, signer)) = self.{{ account.name | snakeCase }} {
                solana_program::instruction::AccountMeta::{{ 'new' if account.isWritable else 'new_readonly' }}(
                  {{ account.name | snakeCase }},
                  signer,
                ),
              } else {
                solana_program::instruction::AccountMeta::new_readonly(
                  crate::programs::{{ program.name | snakeCase }}::ID,
                  false,
                ),
              },
            {% else %}
              solana_program::instruction::AccountMeta::{{ 'new' if account.isWritable else 'new_readonly' }}(
                self.{{ account.name | snakeCase }}.0,
                self.{{ account.name | snakeCase }}.1,
              ),
            {% endif %}
          {% else %}
            {% if account.isOptional %}
              if let Some({{ account.name | snakeCase }}) = self.{{ account.name | snakeCase }} {
                solana_program::instruction::AccountMeta::{{ 'new' if account.isWritable else 'new_readonly' }}(
                  {{ account.name | snakeCase }},
                  {{ 'true' if account.isSigner else 'false' }},
                ),
              } else {
                solana_program::instruction::AccountMeta::new_readonly(
                  crate::programs::{{ program.name | snakeCase }}::ID,
                  false,
                ),
              },
            {% else %}
              solana_program::instruction::AccountMeta::{{ 'new' if account.isWritable else 'new_readonly' }}(
                self.{{ account.name | snakeCase }},
                {{ 'true' if account.isSigner else 'false' }}
              ),
            {% endif %}
          {% endif %}
        {% endfor %}
      ],
      data: args.try_to_vec().unwrap(),
    }
  }
}

{% include "instructionsPageBuilder.njk" %}

#[derive(BorshSerialize, BorshDeserialize, Debug)]
{{ 'pub ' if hasArgs }}struct {{ instruction.name | pascalCase }}InstructionArgs {
  {% for arg in instructionArgs %}
    {{ 'pub ' if arg.default === false }}{{ arg.name | snakeCase }}: {{ arg.type }},
  {% endfor %}
}

impl {{ instruction.name | pascalCase }}InstructionArgs {
  pub fn new(
    {% for arg in instructionArgs %}
      {% if arg.default === false %}
        {{ arg.name | snakeCase }}: {{ arg.type }},
      {% endif %}
    {% endfor %}
  ) -> Self {
    Self {
      {% for arg in instructionArgs %}
        {% if arg.default %}
          {{ arg.name | snakeCase }}: {{ arg.value }},
        {% else %}
          {{ arg.name | snakeCase }},
        {% endif %}
      {% endfor %}
    }
  }
}

{% endblock %}
