{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{% include "instructionsPageAccounts.njk" %}
{% include "instructionsPageArgs.njk" %}

// Instruction.
export function {{ instruction.name | camelCase }}(
  context: Pick<Context,
    | 'serializer'
    | 'programs'
    {{- '| \'eddsa\'' if needsEddsa else '' }}
    {{- '| \'identity\'' if needsIdentity else '' }}
    {{- '| \'payer\'' if needsPayer else '' }}
  >,
  {% set accountsType = instruction.name | pascalCase + 'InstructionAccounts' %}
  {% if instruction.hasPdaAccounts %}
    {% set argsType %}
      Omit<{{ instruction.name | pascalCase + 'InstructionDataArgs' }}, 
      {%- for account in instruction.pdaAccounts -%}
        "{{ account.pdaBumpArg }}"{% if not loop.last %} | {% endif %}
      {%- endfor -%}
      >
    {% endset %}
  {% else %}
    {% set argsType = instruction.name | pascalCase + 'InstructionDataArgs' %}
  {% endif %}
  {% if canMergeAccountsAndArgs %}
    {% set accountsObj = 'input' %}
    {% set argsObj = 'input' %}
    {% if instruction.hasAccounts and instruction.hasArgs %}
      input: {{ accountsType }} & {{ argsType }},
    {% elif instruction.hasAccounts %}
      input: {{ accountsType }},
    {% elif instruction.hasArgs %}
      input: {{ argsType }},
    {% endif %}
  {% else %}
    {% set accountsObj = 'accounts' %}
    {% set argsObj = 'args' %}
    {% if instruction.hasAccounts %}
      accounts: {{ accountsType }},
    {% endif %}
    {% if instruction.hasArgs %}
      args: {{ argsType }},
    {% endif %}
  {% endif %}
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey('{{ program.name | camelCase }}', '{{ program.metadata.publicKey }}');

  {% include "instructionsPageResolvedInputs.njk" %}

  {% include "instructionsPageAccountMetas.njk" -%}

  // Data.
  {% if instruction.hasArgs and instruction.hasPdaAccounts %}
    const data = get{{ instruction.name | pascalCase }}InstructionDataSerializer(context).serialize({
      ...{{ argsObj }},
      {% for account in instruction.pdaAccounts %}
        {{ account.pdaBumpArg }}: {{ account.name | camelCase }}Account.bump,
      {% endfor %}
    });
  {% elif instruction.hasArgs %}
    const data = get{{ instruction.name | pascalCase }}InstructionDataSerializer(context).serialize({{ argsObj }});
  {% elif instruction.hasData %}
    const data = get{{ instruction.name | pascalCase }}InstructionDataSerializer(context).serialize({});
  {% else %}
    const data = new Uint8Array();
  {% endif %}

  // Bytes Created On Chain.
  {% set bytes = instruction.metadata.bytesCreatedOnChain %}
  {% if bytes.kind === 'number' %}
    const bytesCreatedOnChain = {{ bytes.value }}{% if bytes.includeHeader %} + ACCOUNT_HEADER_SIZE{% endif %};
  {% elif bytes.kind === 'arg' %}
    const bytesCreatedOnChain = Number({{ argsObj }}.{{ bytes.name }}){% if bytes.includeHeader %} + ACCOUNT_HEADER_SIZE{% endif %};
  {% elif bytes.kind === 'account' %}
    const bytesCreatedOnChain = get{{ bytes.name | pascalCase }}Size(){% if bytes.includeHeader %} + ACCOUNT_HEADER_SIZE{% endif %};
  {% else %}
    const bytesCreatedOnChain = 0;
  {% endif %}

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
{% endblock %}
