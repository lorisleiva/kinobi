{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{% include "instructionsPageAccounts.njk" %}
{% include "instructionsPageArgs.njk" %}

// Instruction.
export function {{ instruction.name | camelCase }}(
  context: {{ interfaces }},
  {% set accountsType = instruction.name | pascalCase + 'InstructionAccounts' %}
  {% set argsType = instruction.name | pascalCase + 'InstructionArgs' %}
  {% if canMergeAccountsAndArgs %}
    {% set accountsObj = 'input' %}
    {% set argsObj = 'input' %}
    {% if hasAccounts and hasAnyArgs %}
      input: {{ accountsType }} & {{ argsType }},
    {% elif hasAccounts %}
      input: {{ accountsType }},
    {% elif hasAnyArgs %}
      input: {{ argsType }},
    {% endif %}
  {% else %}
    {% set accountsObj = 'accounts' %}
    {% set argsObj = 'args' %}
    {% if hasAccounts %}
      accounts: {{ accountsType }},
    {% endif %}
    {% if hasAnyArgs %}
      args: {{ argsType }},
    {% endif %}
  {% endif %}
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey('{{ program.name | camelCase }}', '{{ program.publicKey }}');

  // Accounts.
  const resolvedAccounts = {
    {% for account in accounts %}
      {{ account.name | camelCase }}: { index: {{ loop.index0 }}, isWritable: {{ 'true' if account.isWritable else 'false' }} as boolean, value: {{ accountsObj }}.{{ account.name | camelCase }} ?? null },
    {% endfor %}
  } satisfies ResolvedAccountsWithIndices;

  {% if hasResolvedArgs %}
    // Arguments.
    const resolvedArgs: {{ instruction.name | pascalCase + 'InstructionArgs' }} = { ...{{ argsObj }} };
  {% endif %}

  {% include "instructionsPageResolvedInputs.njk" %}

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(resolvedAccounts).sort((a,b) => a.index - b.index);

  {% include "instructionsPageRemainingAccounts.njk" %}

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(orderedAccounts, "{{ instruction.optionalAccountStrategy }}", programId);

  // Data.
  {% if hasDataArgs %}
    const data = get{{ instruction.dataArgs.name | pascalCase }}Serializer().serialize(resolvedArgs as {{ instruction.name | pascalCase + 'InstructionDataArgs' }});
  {% elif hasData %}
    const data = get{{ instruction.dataArgs.name | pascalCase }}Serializer().serialize({});
  {% else %}
    const data = new Uint8Array();
  {% endif %}

  // Bytes Created On Chain.
  {% set bytes = instruction.bytesCreatedOnChain %}
  {% if bytes.kind === 'number' %}
    const bytesCreatedOnChain = {{ bytes.value }}{% if bytes.includeHeader %} + ACCOUNT_HEADER_SIZE{% endif %};
  {% elif bytes.kind === 'arg' %}
    const bytesCreatedOnChain = Number({{ argsObj }}.{{ bytes.name }}){% if bytes.includeHeader %} + ACCOUNT_HEADER_SIZE{% endif %};
  {% elif bytes.kind === 'account' %}
    const bytesCreatedOnChain = get{{ bytes.name | pascalCase }}Size(){% if bytes.includeHeader %} + ACCOUNT_HEADER_SIZE{% endif %};
  {% elif bytes.kind === 'resolver' %}
    const bytesCreatedOnChain = {{ bytes.name | camelCase }}(context, resolvedAccounts, resolvedArgs, programId);
  {% else %}
    const bytesCreatedOnChain = 0;
  {% endif %}

  return transactionBuilder([{ instruction: { keys, programId, data }, signers, bytesCreatedOnChain }]);
}
{% endblock %}
