{# Write a docblock from an array of strings. #}
{% macro docblock(docs) %}
{%- if docs.length === 1 -%}
/** {{ docs[0] }} */
{%- elif docs.length > 1 -%}
/**
{% for doc in docs %}
 * {{ doc }}
{% endfor %}
 */
{% endif %}
{% endmacro %}

{# Export a type or an enum. #}
{% macro exportType(strictName, looseName, typeManifest) %}
{%- if typeManifest.isEnum -%}
export enum {{ strictName }} {{ typeManifest.strictType }};

export type {{ looseName }} = {{ strictName }};
{%- else -%}
export type {{ strictName }} = {{ typeManifest.strictType }};

export type {{ looseName }} = {{ typeManifest.looseType if typeManifest.strictType != typeManifest.looseType else strictName }};
{% endif %}
{% endmacro %}

{# Export a serializer. #}
{% macro exportSerializer(strictName, looseName, typeManifest) %}
export function get{{ strictName }}Serializer(context: Pick<Context, 'serializer'>): Serializer<{{ looseName }}, {{ strictName }}> {
  const s = context.serializer;
  return {{ typeManifest.serializer }} as Serializer<{{ looseName }}, {{ strictName }}>;
}
{% endmacro %}
