{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{{ macros.docblock(definedType.docs) }}
export type {{ account.name | pascalCase }} = Account<{{ account.name | pascalCase }}AccountData>;

{{ macros.exportType(account.name | pascalCase + 'AccountData', account.name | pascalCase + 'AccountArgs', typeManifest) }}

export async function fetch{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions,
): Promise<{{ account.name | pascalCase }}> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, '{{ account.name | pascalCase }}');
  return deserialize{{ account.name | pascalCase }}(context, maybeAccount);
}

export async function safeFetch{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions,
): Promise<{{ account.name | pascalCase }} | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserialize{{ account.name | pascalCase }}(context, maybeAccount)
    : null;
}

export async function fetchAll{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions,
): Promise<{{ account.name | pascalCase }}[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, '{{ account.name | pascalCase }}');
    return deserialize{{ account.name | pascalCase }}(context, maybeAccount);
  });
}

export async function safeFetchAll{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions,
): Promise<{{ account.name | pascalCase }}[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserialize{{ account.name | pascalCase }}(context, maybeAccount as RpcAccount));
}

export function get{{ account.name | pascalCase }}GpaBuilder(context: Pick<Context, 'rpc' | 'serializer' | 'programs'>) {
  const s = context.serializer;
  const programId = context.programs.get('{{ program.name | camelCase }}').publicKey;
  return gpaBuilder(context, programId)
    .registerFields<{{ gpaFields.type }}>({{ gpaFields.serializers }})
    .deserializeUsing<{{ account.name | pascalCase }}>((account) => deserialize{{ account.name | pascalCase }}(context, account))
    {%- if account.metadata.discriminator.kind === 'field' and discriminatorValue %}
      .whereField('{{ account.metadata.discriminator.name }}', {{ discriminatorValue }})
    {% elif account.metadata.discriminator.kind === 'size' and account.metadata.size %}
      .whereSize({{ account.metadata.size }})
    {% endif -%}
  ;
}

export function deserialize{{ account.name | pascalCase }}(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount,
): {{ account.name | pascalCase }} {
  return deserializeAccount(rawAccount, get{{ account.name | pascalCase }}AccountDataSerializer(context));
}

{{ macros.exportSerializer(account.name | pascalCase + 'AccountData', account.name | pascalCase + 'AccountArgs', typeManifest) }}

{% if account.metadata.size !== null %}
export function get{{ account.name | pascalCase }}Size(_context = {}): number {
  return {{ account.metadata.size }};
}
{% else %}
export function get{{ account.name | pascalCase }}Size(
  context: Pick<Context, 'serializer'>
): number | null {
  return get{{ account.name | pascalCase }}AccountDataSerializer(context).fixedSize;
}
{% endif %}

{% if seeds.length > 0 %}
export function find{{ account.name | pascalCase }}Pda(
  context: Pick<Context, 'eddsa' | 'programs'{% if pdaHelperNeedsSerializer %} | 'serializer'{% endif %}>,
  {% if account.hasVariableSeeds %}
    seeds: {
      {% for seed in seeds %}
        {% if seed.kind === 'variable' %}
          /** {{ seed.description }} */
          {{ seed.name | camelCase }}: {{ seed.typeManifest.looseType }};
        {% endif %}
      {% endfor %}
    }
  {% endif %}
): Pda {
  {% if pdaHelperNeedsSerializer %}
    const s = context.serializer;
  {% endif %}
  const programId: PublicKey = context.programs.get('{{ program.metadata.name | camelCase }}').publicKey;
  return context.eddsa.findPda(programId, [
    {% for seed in seeds %}
      {% if seed.kind === 'programId' %}
        programId.bytes,
      {% elif seed.kind === 'literal' %}
        s.variableString().serialize("{{ seed.value }}"),
      {% else %}
        {{ seed.typeManifest.serializer }}.serialize(seeds.{{ seed.name | camelCase }}),
      {% endif %}
    {% endfor %}
  ]);
}
{% endif %}
{% endblock %}
