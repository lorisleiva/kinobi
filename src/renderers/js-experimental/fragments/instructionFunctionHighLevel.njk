export {{ 'async' if useAsync }} function {{ functionName }}<{{ typeParams }}>(context: {{ context }}, input: {{ inputTypeWithSigners }}): {{ wrapInPromiseIfAsync(instructionTypeWithSigners) }};
export {{ 'async' if useAsync }} function {{ functionName }}<{{ typeParams }}>(context: {{ context }}, input: {{ inputType }}): {{ wrapInPromiseIfAsync(instructionType) }};
export {{ 'async' if useAsync }} function {{ functionName }}<{{ typeParams }}>(input: {{ inputTypeWithSigners }}): {{ wrapInPromiseIfAsync(instructionTypeWithSigners) }};
export {{ 'async' if useAsync }} function {{ functionName }}<{{ typeParams }}>(input: {{ inputType }}): {{ wrapInPromiseIfAsync(instructionType) }};
export {{ 'async' if useAsync }} function {{ functionName }}<{{ typeParams }}>(rawContext: {{ context }} | {{ inputType }}, rawInput?: {{ inputType }}): {{ wrapInPromiseIfAsync('IInstruction') }} {
  // Resolve context and input arguments.
  const context = (rawInput === undefined ? {} : rawContext) as {{ context }};
  const input = (rawInput === undefined ? rawContext : rawInput) as {{ inputType }};

  // Program address.
  const defaultProgramAddress = "{{ program.publicKey }}" as Address<"{{ program.publicKey }}">;
  const programAddress = (
    context.getProgramAddress
      ? context.getProgramAddress({ name: "{{ program.name }}", address: defaultProgramAddress })
      : defaultProgramAddress
  ) as Address<TProgram>;

  {% if hasAccounts %}
    // Original accounts.
    type AccountMetas = Parameters<typeof {{ lowLevelFunctionName }}<
      TProgram,
      {% for account in instruction.accounts %}
        TAccount{{ account.name | pascalCase }},
      {% endfor %}
    >>[0];
    const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
      {% for account in instruction.accounts %}
        {{ account.name | camelCase }}: { value: input.{{ account.name | camelCase }} ?? null, isWritable: {{ "true" if account.isWritable else "false" }} },
      {% endfor %}
    };
  {% endif %}

  {% if hasAnyArgs %}
    // Original args.
    const args = { ...input, {{ renamedArgs }} };
  {% endif %}

  {{ resolvedInputs }}

  {% if hasAccounts %}
    // Get account metas and signers.
    const accountMetas = getAccountMetasWithSigners(accounts, 'programId', programAddress);
  {% endif %}

  {{ remainingAccounts }}
  {{ bytesCreatedOnChain }}

  return Object.freeze({
    ...{{ lowLevelFunctionName }}(
      {%- if hasAccounts -%}
        accountMetas as Record<keyof AccountMetas, IAccountMeta>,
      {% endif %}
      {%- if hasDataArgs -%}
        args as {{ argsType }},
      {% endif %}
      programAddress,
      remainingAccounts
    ),
    bytesCreatedOnChain,
  });
}
