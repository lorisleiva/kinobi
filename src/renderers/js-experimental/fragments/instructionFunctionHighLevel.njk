{{ inputTypeFragment }}

export {{ 'async' if useAsync }} function {{ functionName }}<{{ typeParamsFragment }}>(input: {{ inputTypeCallFragment }}): {{ getReturnType(instructionTypeFragment) }} {
  // Program address.
  const programAddress = "{{ program.publicKey }}" as Address<"{{ program.publicKey }}">;

  {% if hasAccounts %}
    // Original accounts.
    type AccountMetas = Parameters<typeof {{ lowLevelFunctionName }}<
      TProgram,
      {% for account in instruction.accounts %}
        TAccount{{ account.name | pascalCase }},
      {% endfor %}
    >>[0];
    const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
      {% for account in instruction.accounts %}
        {{ account.name | camelCase }}: { value: input.{{ account.name | camelCase }} ?? null, isWritable: {{ "true" if account.isWritable else "false" }} },
      {% endfor %}
    };
  {% endif %}

  {% if hasAnyArgs %}
    // Original args.
    const args = { ...input, {{ renamedArgs }} };
  {% endif %}

  {% if hasResolver %}
    // Resolver scope.
    const resolverScope = { programAddress{{ ', accounts' if hasAccounts }}{{ ', args' if hasAnyArgs }} };
  {% endif %}

  {{ resolvedFragment }}

  {% if hasAccounts %}
    // Get account metas and signers.
    const accountMetas = getAccountMetasWithSigners(accounts, 'programId', programAddress);
  {% endif %}

  const instruction = {{ lowLevelFunctionName }}(
    {%- if hasAccounts -%}
      accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    {% endif %}
    {%- if hasDataArgs -%}
      args as {{ argsTypeFragment }},
    {% endif %}
    programAddress,
    {%- if hasRemainingAccounts -%}
      remainingAccounts,
    {% endif %}
  ) as {{ instructionTypeFragment }};

  {% if hasByteDeltas %}
    return Object.freeze({ ...instruction, byteDelta });
  {% else %}
    return instruction;
  {% endif %}
}
