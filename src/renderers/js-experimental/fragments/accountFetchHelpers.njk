export function {{ decodeFunction }}<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): {{ accountType }}<TAddress> {
  return decodeAccount(encodedAccount, {{ decoderFunction }});
}

export async function {{ fetchFunction }}<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<{{ accountType }}<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return {{ decodeFunction }}(maybeAccount);
}

export async function {{ fetchMaybeFunction }}<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<{{ accountType }}<TAddress> | null> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return maybeAccount.exists ? {{ decodeFunction }}(maybeAccount) : null;
}

export async function {{ fetchAllFunction }}(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<{{ accountType }}[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return {{ decodeFunction }}(maybeAccount);
  });
}

export async function {{ fetchAllMaybeFunction }}(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<{{ accountType }}[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => {{ decodeFunction }}(maybeAccount as EncodedAccount));
}
