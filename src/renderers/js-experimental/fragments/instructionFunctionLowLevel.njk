export function {{ instruction.name | camelCase }}Instruction<
  TProgram extends string = "{{ program.publicKey }}",
  {% if hasAccounts %}
    {{ accountTypeParams }}
  {% endif %}
>(
  {% if hasAccounts %}
    accounts: {
    {% for account in accounts %}
      {{ account.name | camelCase }}: {{ account.typeParam }} extends string ? Base58EncodedAddress<{{ account.typeParam }}> : {{ account.typeParam }};
    {% endfor %}
    },
  {% endif %}
  {% if hasArgs %}
    args: {{ argsType }},
  {% endif %}
  programAddress: Base58EncodedAddress<TProgram> = "{{ program.publicKey }}" as Base58EncodedAddress<TProgram>,
) {
  return {
    {% if hasAccounts %}
      accounts: [
        {% for account in accounts %}
          accountMetaWithDefault(accounts.{{ account.name | camelCase }}, {{ account.defaultRole }}),
        {% endfor %}
      ].filter(<T>(x: T | undefined): x is T => x !== undefined),
    {% endif %}
    {% if hasData and hasArgs %}
      data: {{ encoderFunction }}().encode(args),
    {% elif hasData %}
      data: {{ encoderFunction }}().encode({}),
    {% endif %}
    programAddress,
  } as {{ instruction.name | pascalCase }}Instruction<
    TProgram,
    {% for account in accounts %}
      {{ account.typeParam }},
    {% endfor %}
  >;
}
