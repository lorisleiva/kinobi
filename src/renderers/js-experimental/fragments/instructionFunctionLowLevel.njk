export function {{ instruction.name | camelCase }}Instruction<
  TProgram extends string = "{{ program.publicKey }}",
  {% if hasAccounts %}
    {{ accountTypeParams }}
  {% endif %}
>(
  {% if hasAccounts %}
    accounts: {
    {% for account in instruction.accounts %}
      {{ account.name | camelCase }}: TAccount{{ account.name | pascalCase }} extends string ? Base58EncodedAddress<TAccount{{ account.name | pascalCase }}> : TAccount{{ account.name | pascalCase }};
    {% endfor %}
    },
  {% endif %}
  {% if hasArgs %}
    args: {{ argsType }},
  {% endif %}
  programAddress: Base58EncodedAddress<TProgram> = "{{ program.publicKey }}" as Base58EncodedAddress<TProgram>,
): {{ instruction.name | pascalCase }}Instruction<
  TProgram,
  {% for account in instruction.accounts %}
    TAccount{{ account.name | pascalCase }},
  {% endfor %}
> {
  return {
    {% if hasAccounts %}
      accounts: [
        {% for account in instruction.accounts %}
          accountMetaWithDefault(accounts.{{ account.name | camelCase }}, 
            {%- if account.isSigner == true and account.isWritable -%}
              AccountRole.WRITABLE_SIGNER
            {%- elif account.isSigner == true -%}
              AccountRole.READONLY_SIGNER
            {%- elif account.isWritable -%}
              AccountRole.WRITABLE
            {%- else -%}
              AccountRole.READONLY
            {% endif %}
          ),
        {% endfor %}
      ],
    {% endif %}
    {% if hasData and hasArgs %}
      data: {{ encoderFunction }}().encode(args),
    {% elif hasData %}
      data: {{ encoderFunction }}().encode({}),
    {% endif %}
    programAddress,
  };
}
