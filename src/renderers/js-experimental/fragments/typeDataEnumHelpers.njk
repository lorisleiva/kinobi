// Data Enum Helpers.
{% for variant in typeNode.variants %}
  {% if variant.kind === 'enumStructVariantTypeNode' %}
    export function {{ dataEnumFunction }}(kind: '{{ getVariant(variant.name) }}', data: GetDataEnumKindContent<{{ looseName }}, '{{ getVariant(variant.name) }}'>): GetDataEnumKind<{{ looseName }}, '{{ getVariant(variant.name) }}'>;
  {% elif variant.kind === 'enumTupleVariantTypeNode' %}
    export function {{ dataEnumFunction }}(kind: '{{ getVariant(variant.name) }}', data: GetDataEnumKindContent<{{ looseName }}, '{{ getVariant(variant.name) }}'>['fields']): GetDataEnumKind<{{ looseName }}, '{{ getVariant(variant.name) }}'>;
  {% else %}
    export function {{ dataEnumFunction }}(kind: '{{ getVariant(variant.name) }}'): GetDataEnumKind<{{ looseName }}, '{{ getVariant(variant.name) }}'>;
  {% endif %}
{% endfor %}
export function {{ dataEnumFunction }}<K extends {{ looseName }}['{{ dataEnumDiscriminator }}'], Data>(
  kind: K,
  data?: Data,
) {
  return Array.isArray(data) ? { {{ dataEnumDiscriminator }}: kind, fields: data } : { {{ dataEnumDiscriminator }}: kind, ...(data ?? {}) };
}

export function {{ isDataEnumFunction }}<K extends {{ strictName }}['{{ dataEnumDiscriminator }}']>(
  kind: K,
  value: {{ strictName }},
): value is {{ strictName }} & { {{ dataEnumDiscriminator }}: K } {
  return value.{{ dataEnumDiscriminator }} === kind;
};
