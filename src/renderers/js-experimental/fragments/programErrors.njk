{% import "templates/macros.njk" as macros %}

export const enum {{ programErrorName }}Code {
  {% for error in errors | sort(false, false, 'code') %}
    {{ macros.docblock(error.docs) }}
    {{ error.name | snakeCase | upper }} = 0x{{ error.code.toString(16) }}, // {{ error.code }}
  {% endfor %}
}

export class {{ programErrorName }} extends Error {
  override readonly name = '{{ programErrorName }}';

  readonly code: {{ programErrorName }}Code;

  readonly cause: Error | undefined;

  constructor(code: {{ programErrorName }}Code, name: string, message: string, cause?: Error) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let {{ programErrorName | camelCase }}CodeMap: Record<{{ programErrorName }}Code, [string, string]> | undefined;
if (__DEV__) {
  {{ programErrorName | camelCase }}CodeMap = {
    {% for error in errors | sort(false, false, 'code') %}
      [{{ programErrorName }}Code.{{ error.name | snakeCase | upper }}]: ['{{ error.name | pascalCase }}', `{{ error.message }}`],
    {% endfor %}
  };
}

export function get{{ programErrorName }}FromCode(code: {{ programErrorName }}Code, cause?: Error): {{ programErrorName }} {
  if (__DEV__) {
    return new {{ programErrorName }}(code, ...({{ programErrorName | camelCase }}CodeMap as Record<{{ programErrorName }}Code, [string, string]>)[code], cause);
  }

  return new {{ programErrorName }}(code, 'Unknown', 'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.', cause);
}
