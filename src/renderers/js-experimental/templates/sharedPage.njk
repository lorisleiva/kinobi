{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
import { Base58EncodedAddress } from '@solana/addresses';
import { AccountRole, IAccountMeta, IInstruction } from '@solana/instructions';
import { Ed25519Signature } from '@solana/keys';
import { Transaction } from '@solana/transactions';

/**
 * Add an account meta with a default role if only an address is provided.
 * @internal
 */
 export function accountMetaWithDefault<TAccount extends string | IAccountMeta<string>, TRole extends AccountRole>(
   account: TAccount | undefined,
   role: TRole
 ) {
  if (account === undefined) return undefined;
   return (
     typeof account === 'string' ? { address: account, role } : account
   ) as TAccount extends string ? { address: Base58EncodedAddress<TAccount>; role: TRole } : TAccount;
 }

 export type WrappedInstruction<TInstruction extends IInstruction> = {
   instruction: TInstruction;
   signers: Signer[];
   bytesCreatedOnChain: number;
 };

 export type Signer<TAddress extends string = string> = TransactionSigner<TAddress> | TransactionSenderSigner<TAddress>;

 export type TransactionSigner<TAddress extends string = string> = {
  address: Base58EncodedAddress<TAddress>;
  signTransaction: <T extends Transaction = Transaction>(transactions: T[]) => Promise<T[]>;
}

export type TransactionSenderSigner<TAddress extends string = string> = {
  address: Base58EncodedAddress<TAddress>;
  signAndSendTransaction: (transactions: Transaction[]) => Promise<Ed25519Signature[]>;
}
{% endblock %}
